
MP3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001058c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08010714  08010714  00011714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c3c  08010c3c  000120b8  2**0
                  CONTENTS
  4 .ARM          00000008  08010c3c  08010c3c  00011c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c44  08010c44  000120b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c44  08010c44  00011c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010c48  08010c48  00011c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b8  20000000  08010c4c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000120b8  2**0
                  CONTENTS
 10 .bss          000025e4  200000b8  200000b8  000120b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000269c  2000269c  000120b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000120b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e37a  00000000  00000000  000120e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055b3  00000000  00000000  00030462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c8  00000000  00000000  00035a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001075  00000000  00000000  00036fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002719b  00000000  00000000  00038055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000242f9  00000000  00000000  0005f1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cce81  00000000  00000000  000834e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015036a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b0c  00000000  00000000  001503b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00155ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b8 	.word	0x200000b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080106fc 	.word	0x080106fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000bc 	.word	0x200000bc
 80001c4:	080106fc 	.word	0x080106fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	603a      	str	r2, [r7, #0]
 80004c2:	80fb      	strh	r3, [r7, #6]
 80004c4:	460b      	mov	r3, r1
 80004c6:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004c8:	2300      	movs	r3, #0
 80004ca:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004cc:	2200      	movs	r2, #0
 80004ce:	6839      	ldr	r1, [r7, #0]
 80004d0:	481c      	ldr	r0, [pc, #112]	@ (8000544 <AUDIO_OUT_Init+0x8c>)
 80004d2:	f000 f8f9 	bl	80006c8 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000544 <AUDIO_OUT_Init+0x8c>)
 80004d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000548 <AUDIO_OUT_Init+0x90>)
 80004da:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004dc:	4819      	ldr	r0, [pc, #100]	@ (8000544 <AUDIO_OUT_Init+0x8c>)
 80004de:	f006 fc21 	bl	8006d24 <HAL_I2S_GetState>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d103      	bne.n	80004f0 <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80004e8:	2100      	movs	r1, #0
 80004ea:	4816      	ldr	r0, [pc, #88]	@ (8000544 <AUDIO_OUT_Init+0x8c>)
 80004ec:	f000 f94a 	bl	8000784 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 80004f0:	6838      	ldr	r0, [r7, #0]
 80004f2:	f000 fa0f 	bl	8000914 <I2S3_Init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 80004fc:	2301      	movs	r3, #1
 80004fe:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d10e      	bne.n	8000524 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8000506:	4b11      	ldr	r3, [pc, #68]	@ (800054c <AUDIO_OUT_Init+0x94>)
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	2094      	movs	r0, #148	@ 0x94
 800050c:	4798      	blx	r3
 800050e:	4603      	mov	r3, r0
 8000510:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8000514:	2be0      	cmp	r3, #224	@ 0xe0
 8000516:	d103      	bne.n	8000520 <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000518:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <AUDIO_OUT_Init+0x98>)
 800051a:	4a0c      	ldr	r2, [pc, #48]	@ (800054c <AUDIO_OUT_Init+0x94>)
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	e001      	b.n	8000524 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 8000520:	2301      	movs	r3, #1
 8000522:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d107      	bne.n	800053a <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <AUDIO_OUT_Init+0x98>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	681c      	ldr	r4, [r3, #0]
 8000530:	797a      	ldrb	r2, [r7, #5]
 8000532:	88f9      	ldrh	r1, [r7, #6]
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	2094      	movs	r0, #148	@ 0x94
 8000538:	47a0      	blx	r4
  }
  
  return ret;
 800053a:	7bfb      	ldrb	r3, [r7, #15]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}
 8000544:	200000d8 	.word	0x200000d8
 8000548:	40003c00 	.word	0x40003c00
 800054c:	20000004 	.word	0x20000004
 8000550:	200000d4 	.word	0x200000d4

08000554 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800055e:	4b10      	ldr	r3, [pc, #64]	@ (80005a0 <AUDIO_OUT_Play+0x4c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	b292      	uxth	r2, r2
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	2094      	movs	r0, #148	@ 0x94
 800056c:	4798      	blx	r3
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000574:	2301      	movs	r3, #1
 8000576:	e00f      	b.n	8000598 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800057e:	d203      	bcs.n	8000588 <AUDIO_OUT_Play+0x34>
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	085b      	lsrs	r3, r3, #1
 8000584:	b29b      	uxth	r3, r3
 8000586:	e001      	b.n	800058c <AUDIO_OUT_Play+0x38>
 8000588:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800058c:	461a      	mov	r2, r3
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <AUDIO_OUT_Play+0x50>)
 8000592:	f006 f849 	bl	8006628 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000596:	2300      	movs	r3, #0
  }
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	200000d4 	.word	0x200000d4
 80005a4:	200000d8 	.word	0x200000d8

080005a8 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005ac:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <AUDIO_OUT_Pause+0x24>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	691b      	ldr	r3, [r3, #16]
 80005b2:	2094      	movs	r0, #148	@ 0x94
 80005b4:	4798      	blx	r3
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80005bc:	2301      	movs	r3, #1
 80005be:	e003      	b.n	80005c8 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <AUDIO_OUT_Pause+0x28>)
 80005c2:	f006 f8d5 	bl	8006770 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005c6:	2300      	movs	r3, #0
  }
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000d4 	.word	0x200000d4
 80005d0:	200000d8 	.word	0x200000d8

080005d4 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80005d8:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <AUDIO_OUT_Resume+0x24>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	2094      	movs	r0, #148	@ 0x94
 80005e0:	4798      	blx	r3
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 80005e8:	2301      	movs	r3, #1
 80005ea:	e003      	b.n	80005f4 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 80005ec:	4803      	ldr	r0, [pc, #12]	@ (80005fc <AUDIO_OUT_Resume+0x28>)
 80005ee:	f006 f921 	bl	8006834 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005f2:	2300      	movs	r3, #0
  }
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200000d4 	.word	0x200000d4
 80005fc:	200000d8 	.word	0x200000d8

08000600 <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8000608:	480e      	ldr	r0, [pc, #56]	@ (8000644 <AUDIO_OUT_Stop+0x44>)
 800060a:	f006 f9a7 	bl	800695c <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <AUDIO_OUT_Stop+0x48>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	2094      	movs	r0, #148	@ 0x94
 8000618:	4798      	blx	r3
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 8000620:	2301      	movs	r3, #1
 8000622:	e00b      	b.n	800063c <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d107      	bne.n	800063a <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 800062a:	2001      	movs	r0, #1
 800062c:	f001 fce8 	bl	8002000 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2110      	movs	r1, #16
 8000634:	4805      	ldr	r0, [pc, #20]	@ (800064c <AUDIO_OUT_Stop+0x4c>)
 8000636:	f002 fcef 	bl	8003018 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800063a:	2300      	movs	r3, #0
  }
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000d8 	.word	0x200000d8
 8000648:	200000d4 	.word	0x200000d4
 800064c:	40020c00 	.word	0x40020c00

08000650 <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 800065a:	4b08      	ldr	r3, [pc, #32]	@ (800067c <AUDIO_OUT_SetVolume+0x2c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6a1b      	ldr	r3, [r3, #32]
 8000660:	79fa      	ldrb	r2, [r7, #7]
 8000662:	4611      	mov	r1, r2
 8000664:	2094      	movs	r0, #148	@ 0x94
 8000666:	4798      	blx	r3
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000672:	2300      	movs	r3, #0
  }
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200000d4 	.word	0x200000d4

08000680 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <HAL_I2S_TxCpltCallback+0x20>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d101      	bne.n	8000696 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 8000692:	f001 fbf1 	bl	8001e78 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40003c00 	.word	0x40003c00

080006a4 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d101      	bne.n	80006ba <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80006b6:	f001 fbf3 	bl	8001ea0 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40003c00 	.word	0x40003c00

080006c8 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	@ 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80006da:	23ff      	movs	r3, #255	@ 0xff
 80006dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  
  for(index = 0; index < 8; index++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80006e6:	e010      	b.n	800070a <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80006e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006ec:	4a22      	ldr	r2, [pc, #136]	@ (8000778 <AUDIO_OUT_ClockConfig+0xb0>)
 80006ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d103      	bne.n	8000700 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 80006f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  for(index = 0; index < 8; index++)
 8000700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000704:	3301      	adds	r3, #1
 8000706:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800070a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800070e:	2b07      	cmp	r3, #7
 8000710:	d9ea      	bls.n	80006e8 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4618      	mov	r0, r3
 8000718:	f007 fc48 	bl	8007fac <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 800071c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000720:	f003 0307 	and.w	r3, r3, #7
 8000724:	2b00      	cmp	r3, #0
 8000726:	d115      	bne.n	8000754 <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000728:	2301      	movs	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000730:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000734:	4a11      	ldr	r2, [pc, #68]	@ (800077c <AUDIO_OUT_ClockConfig+0xb4>)
 8000736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800073a:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 800073c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000740:	4a0f      	ldr	r2, [pc, #60]	@ (8000780 <AUDIO_OUT_ClockConfig+0xb8>)
 8000742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000746:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4618      	mov	r0, r3
 800074e:	f007 fb4b 	bl	8007de8 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SN = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000752:	e00d      	b.n	8000770 <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000754:	2301      	movs	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 8;
 8000758:	2308      	movs	r3, #8
 800075a:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 800075c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000760:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000762:	2303      	movs	r3, #3
 8000764:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4618      	mov	r0, r3
 800076c:	f007 fb3c 	bl	8007de8 <HAL_RCCEx_PeriphCLKConfig>
}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08010768 	.word	0x08010768
 800077c:	08010788 	.word	0x08010788
 8000780:	080107a8 	.word	0x080107a8

08000784 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	@ 0x30
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	4b56      	ldr	r3, [pc, #344]	@ (80008ec <AUDIO_OUT_MspInit+0x168>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	4a55      	ldr	r2, [pc, #340]	@ (80008ec <AUDIO_OUT_MspInit+0x168>)
 8000798:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800079c:	6413      	str	r3, [r2, #64]	@ 0x40
 800079e:	4b53      	ldr	r3, [pc, #332]	@ (80008ec <AUDIO_OUT_MspInit+0x168>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	4b4f      	ldr	r3, [pc, #316]	@ (80008ec <AUDIO_OUT_MspInit+0x168>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a4e      	ldr	r2, [pc, #312]	@ (80008ec <AUDIO_OUT_MspInit+0x168>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b4c      	ldr	r3, [pc, #304]	@ (80008ec <AUDIO_OUT_MspInit+0x168>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b48      	ldr	r3, [pc, #288]	@ (80008ec <AUDIO_OUT_MspInit+0x168>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a47      	ldr	r2, [pc, #284]	@ (80008ec <AUDIO_OUT_MspInit+0x168>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b45      	ldr	r3, [pc, #276]	@ (80008ec <AUDIO_OUT_MspInit+0x168>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80007e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80007f0:	2302      	movs	r3, #2
 80007f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 80007f4:	2306      	movs	r3, #6
 80007f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	483c      	ldr	r0, [pc, #240]	@ (80008f0 <AUDIO_OUT_MspInit+0x16c>)
 8000800:	f002 f972 	bl	8002ae8 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8000804:	2310      	movs	r3, #16
 8000806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	4839      	ldr	r0, [pc, #228]	@ (80008f4 <AUDIO_OUT_MspInit+0x170>)
 8000810:	f002 f96a 	bl	8002ae8 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	4b34      	ldr	r3, [pc, #208]	@ (80008ec <AUDIO_OUT_MspInit+0x168>)
 800081a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081c:	4a33      	ldr	r2, [pc, #204]	@ (80008ec <AUDIO_OUT_MspInit+0x168>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6313      	str	r3, [r2, #48]	@ 0x30
 8000824:	4b31      	ldr	r3, [pc, #196]	@ (80008ec <AUDIO_OUT_MspInit+0x168>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8000830:	2380      	movs	r3, #128	@ 0x80
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	482d      	ldr	r0, [pc, #180]	@ (80008f0 <AUDIO_OUT_MspInit+0x16c>)
 800083c:	f002 f954 	bl	8002ae8 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	4b29      	ldr	r3, [pc, #164]	@ (80008ec <AUDIO_OUT_MspInit+0x168>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000848:	4a28      	ldr	r2, [pc, #160]	@ (80008ec <AUDIO_OUT_MspInit+0x168>)
 800084a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800084e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000850:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <AUDIO_OUT_MspInit+0x168>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000854:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a25      	ldr	r2, [pc, #148]	@ (80008f8 <AUDIO_OUT_MspInit+0x174>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d136      	bne.n	80008d4 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000866:	4b25      	ldr	r3, [pc, #148]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800086c:	4b23      	ldr	r3, [pc, #140]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 800086e:	2240      	movs	r2, #64	@ 0x40
 8000870:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000872:	4b22      	ldr	r3, [pc, #136]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000878:	4b20      	ldr	r3, [pc, #128]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 800087a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800087e:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8000880:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 8000882:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000886:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8000888:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 800088a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800088e:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8000890:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 8000898:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800089c:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800089e:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008a4:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008a6:	2203      	movs	r2, #3
 80008a8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008aa:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008b8:	4a11      	ldr	r2, [pc, #68]	@ (8000900 <AUDIO_OUT_MspInit+0x17c>)
 80008ba:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a0f      	ldr	r2, [pc, #60]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80008c2:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008ca:	f001 fd7d 	bl	80023c8 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80008ce:	480b      	ldr	r0, [pc, #44]	@ (80008fc <AUDIO_OUT_MspInit+0x178>)
 80008d0:	f001 fccc 	bl	800226c <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	210e      	movs	r1, #14
 80008d8:	202f      	movs	r0, #47	@ 0x2f
 80008da:	f001 fc90 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80008de:	202f      	movs	r0, #47	@ 0x2f
 80008e0:	f001 fca9 	bl	8002236 <HAL_NVIC_EnableIRQ>
}
 80008e4:	bf00      	nop
 80008e6:	3730      	adds	r7, #48	@ 0x30
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40003c00 	.word	0x40003c00
 80008fc:	20000120 	.word	0x20000120
 8000900:	400260b8 	.word	0x400260b8

08000904 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 800091c:	4b17      	ldr	r3, [pc, #92]	@ (800097c <I2S3_Init+0x68>)
 800091e:	4a18      	ldr	r2, [pc, #96]	@ (8000980 <I2S3_Init+0x6c>)
 8000920:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8000922:	4b16      	ldr	r3, [pc, #88]	@ (800097c <I2S3_Init+0x68>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	69da      	ldr	r2, [r3, #28]
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <I2S3_Init+0x68>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000930:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8000932:	4a12      	ldr	r2, [pc, #72]	@ (800097c <I2S3_Init+0x68>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000938:	4b10      	ldr	r3, [pc, #64]	@ (800097c <I2S3_Init+0x68>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <I2S3_Init+0x68>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000944:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <I2S3_Init+0x68>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <I2S3_Init+0x68>)
 800094c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000950:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8000952:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <I2S3_Init+0x68>)
 8000954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000958:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 800095a:	4b08      	ldr	r3, [pc, #32]	@ (800097c <I2S3_Init+0x68>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8000960:	4806      	ldr	r0, [pc, #24]	@ (800097c <I2S3_Init+0x68>)
 8000962:	f005 fd21 	bl	80063a8 <HAL_I2S_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	e000      	b.n	8000972 <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 8000970:	2300      	movs	r3, #0
  }
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000d8 	.word	0x200000d8
 8000980:	40003c00 	.word	0x40003c00

08000984 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a04      	ldr	r2, [pc, #16]	@ (80009a4 <HAL_I2S_ErrorCallback+0x20>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 8000996:	f7ff ffb5 	bl	8000904 <AUDIO_OUT_Error_CallBack>
  }
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40003c00 	.word	0x40003c00

080009a8 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009ac:	4814      	ldr	r0, [pc, #80]	@ (8000a00 <I2Cx_Init+0x58>)
 80009ae:	f005 f939 	bl	8005c24 <HAL_I2C_GetState>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d121      	bne.n	80009fc <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <I2Cx_Init+0x58>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	@ (8000a04 <I2Cx_Init+0x5c>)
 80009bc:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80009be:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <I2Cx_Init+0x58>)
 80009c0:	2243      	movs	r2, #67	@ 0x43
 80009c2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <I2Cx_Init+0x58>)
 80009c6:	4a10      	ldr	r2, [pc, #64]	@ (8000a08 <I2Cx_Init+0x60>)
 80009c8:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000a00 <I2Cx_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <I2Cx_Init+0x58>)
 80009d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009d6:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <I2Cx_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80009de:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <I2Cx_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <I2Cx_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80009ea:	4b05      	ldr	r3, [pc, #20]	@ (8000a00 <I2Cx_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80009f0:	4803      	ldr	r0, [pc, #12]	@ (8000a00 <I2Cx_Init+0x58>)
 80009f2:	f000 f86b 	bl	8000acc <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80009f6:	4802      	ldr	r0, [pc, #8]	@ (8000a00 <I2Cx_Init+0x58>)
 80009f8:	f004 fc74 	bl	80052e4 <HAL_I2C_Init>
  }
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000180 	.word	0x20000180
 8000a04:	40005400 	.word	0x40005400
 8000a08:	000186a0 	.word	0x000186a0

08000a0c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af04      	add	r7, sp, #16
 8000a12:	4603      	mov	r3, r0
 8000a14:	80fb      	strh	r3, [r7, #6]
 8000a16:	460b      	mov	r3, r1
 8000a18:	717b      	strb	r3, [r7, #5]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a22:	797b      	ldrb	r3, [r7, #5]
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <I2Cx_WriteData+0x48>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	88f9      	ldrh	r1, [r7, #6]
 8000a2c:	9302      	str	r3, [sp, #8]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2301      	movs	r3, #1
 8000a38:	4807      	ldr	r0, [pc, #28]	@ (8000a58 <I2Cx_WriteData+0x4c>)
 8000a3a:	f004 fdc7 	bl	80055cc <HAL_I2C_Mem_Write>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a48:	f000 f834 	bl	8000ab4 <I2Cx_Error>
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000180 	.word	0x20000180

08000a5c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af04      	add	r7, sp, #16
 8000a62:	4603      	mov	r3, r0
 8000a64:	460a      	mov	r2, r1
 8000a66:	80fb      	strh	r3, [r7, #6]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000a74:	797b      	ldrb	r3, [r7, #5]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <I2Cx_ReadData+0x50>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	88f9      	ldrh	r1, [r7, #6]
 8000a7e:	9302      	str	r3, [sp, #8]
 8000a80:	2301      	movs	r3, #1
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	f107 030e 	add.w	r3, r7, #14
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	4808      	ldr	r0, [pc, #32]	@ (8000ab0 <I2Cx_ReadData+0x54>)
 8000a8e:	f004 fe97 	bl	80057c0 <HAL_I2C_Mem_Read>
 8000a92:	4603      	mov	r3, r0
 8000a94:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a9c:	f000 f80a 	bl	8000ab4 <I2Cx_Error>
  }
  return value;
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000180 	.word	0x20000180

08000ab4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000ab8:	4803      	ldr	r0, [pc, #12]	@ (8000ac8 <I2Cx_Error+0x14>)
 8000aba:	f004 fd57 	bl	800556c <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000abe:	f7ff ff73 	bl	80009a8 <I2Cx_Init>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000180 	.word	0x20000180

08000acc <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	4b25      	ldr	r3, [pc, #148]	@ (8000b70 <I2Cx_MspInit+0xa4>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000adc:	4a24      	ldr	r2, [pc, #144]	@ (8000b70 <I2Cx_MspInit+0xa4>)
 8000ade:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae4:	4b22      	ldr	r3, [pc, #136]	@ (8000b70 <I2Cx_MspInit+0xa4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <I2Cx_MspInit+0xa4>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b70 <I2Cx_MspInit+0xa4>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b00:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <I2Cx_MspInit+0xa4>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b0c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b12:	2312      	movs	r3, #18
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4812      	ldr	r0, [pc, #72]	@ (8000b74 <I2Cx_MspInit+0xa8>)
 8000b2a:	f001 ffdd 	bl	8002ae8 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <I2Cx_MspInit+0xa4>)
 8000b30:	6a1b      	ldr	r3, [r3, #32]
 8000b32:	4a0f      	ldr	r2, [pc, #60]	@ (8000b70 <I2Cx_MspInit+0xa4>)
 8000b34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b38:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <I2Cx_MspInit+0xa4>)
 8000b3c:	6a1b      	ldr	r3, [r3, #32]
 8000b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b70 <I2Cx_MspInit+0xa4>)
 8000b40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000b44:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	210f      	movs	r1, #15
 8000b4a:	201f      	movs	r0, #31
 8000b4c:	f001 fb57 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b50:	201f      	movs	r0, #31
 8000b52:	f001 fb70 	bl	8002236 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	210f      	movs	r1, #15
 8000b5a:	2020      	movs	r0, #32
 8000b5c:	f001 fb4f 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000b60:	2020      	movs	r0, #32
 8000b62:	f001 fb68 	bl	8002236 <HAL_NVIC_EnableIRQ>
}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	@ 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020400 	.word	0x40020400

08000b78 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <AUDIO_IO_Init+0x68>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a16      	ldr	r2, [pc, #88]	@ (8000be0 <AUDIO_IO_Init+0x68>)
 8000b88:	f043 0308 	orr.w	r3, r3, #8
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <AUDIO_IO_Init+0x68>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4619      	mov	r1, r3
 8000bae:	480d      	ldr	r0, [pc, #52]	@ (8000be4 <AUDIO_IO_Init+0x6c>)
 8000bb0:	f001 ff9a 	bl	8002ae8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000bb4:	f7ff fef8 	bl	80009a8 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2110      	movs	r1, #16
 8000bbc:	4809      	ldr	r0, [pc, #36]	@ (8000be4 <AUDIO_IO_Init+0x6c>)
 8000bbe:	f002 fa2b 	bl	8003018 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bc2:	2005      	movs	r0, #5
 8000bc4:	f001 fa1c 	bl	8002000 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2110      	movs	r1, #16
 8000bcc:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <AUDIO_IO_Init+0x6c>)
 8000bce:	f002 fa23 	bl	8003018 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bd2:	2005      	movs	r0, #5
 8000bd4:	f001 fa14 	bl	8002000 <HAL_Delay>
}
 8000bd8:	bf00      	nop
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020c00 	.word	0x40020c00

08000be8 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	460b      	mov	r3, r1
 8000c02:	71bb      	strb	r3, [r7, #6]
 8000c04:	4613      	mov	r3, r2
 8000c06:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	797a      	ldrb	r2, [r7, #5]
 8000c0e:	79b9      	ldrb	r1, [r7, #6]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fefb 	bl	8000a0c <I2Cx_WriteData>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	460a      	mov	r2, r1
 8000c28:	71fb      	strb	r3, [r7, #7]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	79ba      	ldrb	r2, [r7, #6]
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff10 	bl	8000a5c <I2Cx_ReadData>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0d6      	sub	sp, #344	@ 0x158
 8000c4c:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4946      	ldr	r1, [pc, #280]	@ (8000d70 <AUDIO_StorageParse+0x128>)
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f00e fe95 	bl	800f988 <f_opendir>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
  FileList.ptr = 0;
 8000c64:	4b43      	ldr	r3, [pc, #268]	@ (8000d74 <AUDIO_StorageParse+0x12c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8

  if(res == FR_OK)
 8000c6c:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d16c      	bne.n	8000d4e <AUDIO_StorageParse+0x106>
  {
    while(Appli_state == APPLICATION_READY)
 8000c74:	e067      	b.n	8000d46 <AUDIO_StorageParse+0xfe>
    {
      res = f_readdir(&dir, &fno);
 8000c76:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f00e ff1b 	bl	800faba <f_readdir>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f887 3157 	strb.w	r3, [r7, #343]	@ 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000c8a:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d15d      	bne.n	8000d4e <AUDIO_StorageParse+0x106>
 8000c92:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000c96:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000c9a:	7d9b      	ldrb	r3, [r3, #22]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d056      	beq.n	8000d4e <AUDIO_StorageParse+0x106>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000ca0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000ca4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000ca8:	7d9b      	ldrb	r3, [r3, #22]
 8000caa:	2b2e      	cmp	r3, #46	@ 0x2e
 8000cac:	d04a      	beq.n	8000d44 <AUDIO_StorageParse+0xfc>
      {
        continue;
      }

      fn = fno.fname;
 8000cae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cb2:	3316      	adds	r3, #22
 8000cb4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d74 <AUDIO_StorageParse+0x12c>)
 8000cba:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000cbe:	2b17      	cmp	r3, #23
 8000cc0:	d841      	bhi.n	8000d46 <AUDIO_StorageParse+0xfe>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000cc2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000cc6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000cca:	7a1b      	ldrb	r3, [r3, #8]
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d138      	bne.n	8000d46 <AUDIO_StorageParse+0xfe>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000cd4:	4928      	ldr	r1, [pc, #160]	@ (8000d78 <AUDIO_StorageParse+0x130>)
 8000cd6:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000cda:	f00f fc64 	bl	80105a6 <strstr>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d107      	bne.n	8000cf4 <AUDIO_StorageParse+0xac>
 8000ce4:	4925      	ldr	r1, [pc, #148]	@ (8000d7c <AUDIO_StorageParse+0x134>)
 8000ce6:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8000cea:	f00f fc5c 	bl	80105a6 <strstr>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d028      	beq.n	8000d46 <AUDIO_StorageParse+0xfe>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <AUDIO_StorageParse+0x12c>)
 8000cf6:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	4413      	add	r3, r2
 8000d06:	4a1b      	ldr	r2, [pc, #108]	@ (8000d74 <AUDIO_StorageParse+0x12c>)
 8000d08:	4413      	add	r3, r2
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	2228      	movs	r2, #40	@ 0x28
 8000d0e:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8000d12:	4618      	mov	r0, r3
 8000d14:	f00f fc34 	bl	8010580 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d18:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <AUDIO_StorageParse+0x12c>)
 8000d1a:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4914      	ldr	r1, [pc, #80]	@ (8000d74 <AUDIO_StorageParse+0x12c>)
 8000d22:	4613      	mov	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4413      	add	r3, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	2201      	movs	r2, #1
 8000d30:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <AUDIO_StorageParse+0x12c>)
 8000d34:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <AUDIO_StorageParse+0x12c>)
 8000d3e:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
 8000d42:	e000      	b.n	8000d46 <AUDIO_StorageParse+0xfe>
        continue;
 8000d44:	bf00      	nop
    while(Appli_state == APPLICATION_READY)
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <AUDIO_StorageParse+0x138>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d093      	beq.n	8000c76 <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <AUDIO_StorageParse+0x12c>)
 8000d50:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	@ 0x3d8
 8000d54:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <AUDIO_StorageParse+0x13c>)
 8000d56:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f00e fe87 	bl	800fa6e <f_closedir>
  return res;
 8000d60:	f897 3157 	ldrb.w	r3, [r7, #343]	@ 0x157
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000192c 	.word	0x2000192c
 8000d74:	200012ec 	.word	0x200012ec
 8000d78:	08010714 	.word	0x08010714
 8000d7c:	08010718 	.word	0x08010718
 8000d80:	20002170 	.word	0x20002170
 8000d84:	200001d6 	.word	0x200001d6

08000d88 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000d8c:	f7ff ff5c 	bl	8000c48 <AUDIO_StorageParse>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d102      	bne.n	8000d9c <AUDIO_GetWavObjectNumber+0x14>
 8000d96:	4b02      	ldr	r3, [pc, #8]	@ (8000da0 <AUDIO_GetWavObjectNumber+0x18>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	e7ff      	b.n	8000d9c <AUDIO_GetWavObjectNumber+0x14>
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200001d6 	.word	0x200001d6

08000da4 <Mount_USB>:

void Mount_USB (void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000da8:	2201      	movs	r2, #1
 8000daa:	4905      	ldr	r1, [pc, #20]	@ (8000dc0 <Mount_USB+0x1c>)
 8000dac:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <Mount_USB+0x20>)
 8000dae:	f00d fffb 	bl	800eda8 <f_mount>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <Mount_USB+0x24>)
 8000db8:	701a      	strb	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000192c 	.word	0x2000192c
 8000dc4:	20001930 	.word	0x20001930
 8000dc8:	200001d4 	.word	0x200001d4

08000dcc <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	81fb      	strh	r3, [r7, #14]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	81bb      	strh	r3, [r7, #12]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000de4:	f7ff fec8 	bl	8000b78 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000de8:	89fb      	ldrh	r3, [r7, #14]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2201      	movs	r2, #1
 8000dee:	2102      	movs	r1, #2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fb01 	bl	80013f8 <CODEC_IO_Write>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000e00:	89bb      	ldrh	r3, [r7, #12]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d81b      	bhi.n	8000e40 <cs43l22_Init+0x74>
 8000e08:	a201      	add	r2, pc, #4	@ (adr r2, 8000e10 <cs43l22_Init+0x44>)
 8000e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0e:	bf00      	nop
 8000e10:	08000e21 	.word	0x08000e21
 8000e14:	08000e29 	.word	0x08000e29
 8000e18:	08000e31 	.word	0x08000e31
 8000e1c:	08000e39 	.word	0x08000e39
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e20:	4b5b      	ldr	r3, [pc, #364]	@ (8000f90 <cs43l22_Init+0x1c4>)
 8000e22:	22fa      	movs	r2, #250	@ 0xfa
 8000e24:	701a      	strb	r2, [r3, #0]
    break;
 8000e26:	e00f      	b.n	8000e48 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000e28:	4b59      	ldr	r3, [pc, #356]	@ (8000f90 <cs43l22_Init+0x1c4>)
 8000e2a:	22af      	movs	r2, #175	@ 0xaf
 8000e2c:	701a      	strb	r2, [r3, #0]
    break;
 8000e2e:	e00b      	b.n	8000e48 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000e30:	4b57      	ldr	r3, [pc, #348]	@ (8000f90 <cs43l22_Init+0x1c4>)
 8000e32:	22aa      	movs	r2, #170	@ 0xaa
 8000e34:	701a      	strb	r2, [r3, #0]
    break;
 8000e36:	e007      	b.n	8000e48 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000e38:	4b55      	ldr	r3, [pc, #340]	@ (8000f90 <cs43l22_Init+0x1c4>)
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	701a      	strb	r2, [r3, #0]
    break;    
 8000e3e:	e003      	b.n	8000e48 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000e40:	4b53      	ldr	r3, [pc, #332]	@ (8000f90 <cs43l22_Init+0x1c4>)
 8000e42:	2205      	movs	r2, #5
 8000e44:	701a      	strb	r2, [r3, #0]
    break;    
 8000e46:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e48:	89fb      	ldrh	r3, [r7, #14]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	4a50      	ldr	r2, [pc, #320]	@ (8000f90 <cs43l22_Init+0x1c4>)
 8000e4e:	7812      	ldrb	r2, [r2, #0]
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	2104      	movs	r1, #4
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 facf 	bl	80013f8 <CODEC_IO_Write>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	4413      	add	r3, r2
 8000e62:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2281      	movs	r2, #129	@ 0x81
 8000e6a:	2105      	movs	r1, #5
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fac3 	bl	80013f8 <CODEC_IO_Write>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	4413      	add	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000e7c:	89fb      	ldrh	r3, [r7, #14]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2204      	movs	r2, #4
 8000e82:	2106      	movs	r1, #6
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fab7 	bl	80013f8 <CODEC_IO_Write>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4413      	add	r3, r2
 8000e92:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000e94:	7afa      	ldrb	r2, [r7, #11]
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f964 	bl	8001168 <cs43l22_SetVolume>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000ea8:	89bb      	ldrh	r3, [r7, #12]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d023      	beq.n	8000ef6 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2206      	movs	r2, #6
 8000eb4:	210f      	movs	r1, #15
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fa9e 	bl	80013f8 <CODEC_IO_Write>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2124      	movs	r1, #36	@ 0x24
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fa92 	bl	80013f8 <CODEC_IO_Write>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	4413      	add	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000ede:	89fb      	ldrh	r3, [r7, #14]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2125      	movs	r1, #37	@ 0x25
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fa86 	bl	80013f8 <CODEC_IO_Write>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2200      	movs	r2, #0
 8000efc:	210a      	movs	r1, #10
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fa7a 	bl	80013f8 <CODEC_IO_Write>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2204      	movs	r2, #4
 8000f14:	210e      	movs	r1, #14
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fa6e 	bl	80013f8 <CODEC_IO_Write>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	4413      	add	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2127      	movs	r1, #39	@ 0x27
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fa62 	bl	80013f8 <CODEC_IO_Write>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000f3e:	89fb      	ldrh	r3, [r7, #14]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	220f      	movs	r2, #15
 8000f44:	211f      	movs	r1, #31
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fa56 	bl	80013f8 <CODEC_IO_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4413      	add	r3, r2
 8000f54:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	220a      	movs	r2, #10
 8000f5c:	211a      	movs	r1, #26
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fa4a 	bl	80013f8 <CODEC_IO_Write>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	220a      	movs	r2, #10
 8000f74:	211b      	movs	r1, #27
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fa3e 	bl	80013f8 <CODEC_IO_Write>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	4413      	add	r3, r2
 8000f84:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000f86:	697b      	ldr	r3, [r7, #20]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200001d8 	.word	0x200001d8

08000f94 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000f98:	f7ff fe26 	bl	8000be8 <AUDIO_IO_DeInit>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000faa:	f7ff fde5 	bl	8000b78 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fe32 	bl	8000c1e <AUDIO_IO_Read>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	f023 0307 	bic.w	r3, r3, #7
 8000fc4:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	80fb      	strh	r3, [r7, #6]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000fe4:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <cs43l22_Play+0x70>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d123      	bne.n	8001034 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2206      	movs	r2, #6
 8000ff2:	210e      	movs	r1, #14
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f9ff 	bl	80013f8 <CODEC_IO_Write>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4413      	add	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f919 	bl	8001240 <cs43l22_SetMute>
 800100e:	4602      	mov	r2, r0
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	229e      	movs	r2, #158	@ 0x9e
 800101c:	2102      	movs	r1, #2
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f9ea 	bl	80013f8 <CODEC_IO_Write>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800102e:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <cs43l22_Play+0x70>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001034:	68fb      	ldr	r3, [r7, #12]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000034 	.word	0x20000034

08001044 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	2101      	movs	r1, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f8f2 	bl	8001240 <cs43l22_SetMute>
 800105c:	4602      	mov	r2, r0
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4413      	add	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2201      	movs	r2, #1
 800106a:	2102      	movs	r1, #2
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f9c3 	bl	80013f8 <CODEC_IO_Write>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 800107c:	68fb      	ldr	r3, [r7, #12]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f8ce 	bl	8001240 <cs43l22_SetMute>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4413      	add	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	e002      	b.n	80010b8 <cs43l22_Resume+0x30>
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	3301      	adds	r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	2bfe      	cmp	r3, #254	@ 0xfe
 80010bc:	d9f9      	bls.n	80010b2 <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4a0e      	ldr	r2, [pc, #56]	@ (80010fc <cs43l22_Resume+0x74>)
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	2104      	movs	r1, #4
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f994 	bl	80013f8 <CODEC_IO_Write>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	229e      	movs	r2, #158	@ 0x9e
 80010e0:	2102      	movs	r1, #2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f988 	bl	80013f8 <CODEC_IO_Write>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200001d8 	.word	0x200001d8

08001100 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	2101      	movs	r1, #1
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f893 	bl	8001240 <cs43l22_SetMute>
 800111a:	4602      	mov	r2, r0
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2204      	movs	r2, #4
 8001128:	210e      	movs	r1, #14
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f964 	bl	80013f8 <CODEC_IO_Write>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	229f      	movs	r2, #159	@ 0x9f
 8001140:	2102      	movs	r1, #2
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f958 	bl	80013f8 <CODEC_IO_Write>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 8001152:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <cs43l22_Stop+0x64>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001158:	68fb      	ldr	r3, [r7, #12]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000034 	.word	0x20000034

08001168 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	4613      	mov	r3, r2
 8001176:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800117c:	797b      	ldrb	r3, [r7, #5]
 800117e:	2b64      	cmp	r3, #100	@ 0x64
 8001180:	d80b      	bhi.n	800119a <cs43l22_SetVolume+0x32>
 8001182:	797a      	ldrb	r2, [r7, #5]
 8001184:	4613      	mov	r3, r2
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	4a25      	ldr	r2, [pc, #148]	@ (8001220 <cs43l22_SetVolume+0xb8>)
 800118c:	fb82 1203 	smull	r1, r2, r2, r3
 8001190:	1152      	asrs	r2, r2, #5
 8001192:	17db      	asrs	r3, r3, #31
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	e000      	b.n	800119c <cs43l22_SetVolume+0x34>
 800119a:	23ff      	movs	r3, #255	@ 0xff
 800119c:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	2be6      	cmp	r3, #230	@ 0xe6
 80011a2:	d91c      	bls.n	80011de <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	b2d8      	uxtb	r0, r3
 80011a8:	7afb      	ldrb	r3, [r7, #11]
 80011aa:	3319      	adds	r3, #25
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	2120      	movs	r1, #32
 80011b2:	f000 f921 	bl	80013f8 <CODEC_IO_Write>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	b2d8      	uxtb	r0, r3
 80011c4:	7afb      	ldrb	r3, [r7, #11]
 80011c6:	3319      	adds	r3, #25
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	2121      	movs	r1, #33	@ 0x21
 80011ce:	f000 f913 	bl	80013f8 <CODEC_IO_Write>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4413      	add	r3, r2
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	e01b      	b.n	8001216 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	b2d8      	uxtb	r0, r3
 80011e2:	7afb      	ldrb	r3, [r7, #11]
 80011e4:	3319      	adds	r3, #25
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	2120      	movs	r1, #32
 80011ec:	f000 f904 	bl	80013f8 <CODEC_IO_Write>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	b2d8      	uxtb	r0, r3
 80011fe:	7afb      	ldrb	r3, [r7, #11]
 8001200:	3319      	adds	r3, #25
 8001202:	b2db      	uxtb	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	2121      	movs	r1, #33	@ 0x21
 8001208:	f000 f8f6 	bl	80013f8 <CODEC_IO_Write>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	51eb851f 	.word	0x51eb851f

08001224 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d124      	bne.n	80012a0 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	22ff      	movs	r2, #255	@ 0xff
 800125c:	2104      	movs	r1, #4
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f8ca 	bl	80013f8 <CODEC_IO_Write>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2201      	movs	r2, #1
 8001274:	2122      	movs	r1, #34	@ 0x22
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f8be 	bl	80013f8 <CODEC_IO_Write>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2201      	movs	r2, #1
 800128c:	2123      	movs	r1, #35	@ 0x23
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f8b2 	bl	80013f8 <CODEC_IO_Write>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	e025      	b.n	80012ec <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2200      	movs	r2, #0
 80012a6:	2122      	movs	r1, #34	@ 0x22
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f8a5 	bl	80013f8 <CODEC_IO_Write>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4413      	add	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2200      	movs	r2, #0
 80012be:	2123      	movs	r1, #35	@ 0x23
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f899 	bl	80013f8 <CODEC_IO_Write>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	4a08      	ldr	r2, [pc, #32]	@ (80012f8 <cs43l22_SetMute+0xb8>)
 80012d6:	7812      	ldrb	r2, [r2, #0]
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	2104      	movs	r1, #4
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f88b 	bl	80013f8 <CODEC_IO_Write>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4413      	add	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80012ec:	68fb      	ldr	r3, [r7, #12]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200001d8 	.word	0x200001d8

080012fc <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	80fb      	strh	r3, [r7, #6]
 8001308:	4613      	mov	r3, r2
 800130a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001310:	797b      	ldrb	r3, [r7, #5]
 8001312:	3b01      	subs	r3, #1
 8001314:	2b03      	cmp	r3, #3
 8001316:	d84b      	bhi.n	80013b0 <cs43l22_SetOutputMode+0xb4>
 8001318:	a201      	add	r2, pc, #4	@ (adr r2, 8001320 <cs43l22_SetOutputMode+0x24>)
 800131a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131e:	bf00      	nop
 8001320:	08001331 	.word	0x08001331
 8001324:	08001351 	.word	0x08001351
 8001328:	08001371 	.word	0x08001371
 800132c:	08001391 	.word	0x08001391
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	22fa      	movs	r2, #250	@ 0xfa
 8001336:	2104      	movs	r1, #4
 8001338:	4618      	mov	r0, r3
 800133a:	f000 f85d 	bl	80013f8 <CODEC_IO_Write>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001348:	4b24      	ldr	r3, [pc, #144]	@ (80013dc <cs43l22_SetOutputMode+0xe0>)
 800134a:	22fa      	movs	r2, #250	@ 0xfa
 800134c:	701a      	strb	r2, [r3, #0]
      break;
 800134e:	e03f      	b.n	80013d0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	22af      	movs	r2, #175	@ 0xaf
 8001356:	2104      	movs	r1, #4
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f84d 	bl	80013f8 <CODEC_IO_Write>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4413      	add	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001368:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <cs43l22_SetOutputMode+0xe0>)
 800136a:	22af      	movs	r2, #175	@ 0xaf
 800136c:	701a      	strb	r2, [r3, #0]
      break;
 800136e:	e02f      	b.n	80013d0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	22aa      	movs	r2, #170	@ 0xaa
 8001376:	2104      	movs	r1, #4
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f83d 	bl	80013f8 <CODEC_IO_Write>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4413      	add	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001388:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <cs43l22_SetOutputMode+0xe0>)
 800138a:	22aa      	movs	r2, #170	@ 0xaa
 800138c:	701a      	strb	r2, [r3, #0]
      break;
 800138e:	e01f      	b.n	80013d0 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2205      	movs	r2, #5
 8001396:	2104      	movs	r1, #4
 8001398:	4618      	mov	r0, r3
 800139a:	f000 f82d 	bl	80013f8 <CODEC_IO_Write>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4413      	add	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <cs43l22_SetOutputMode+0xe0>)
 80013aa:	2205      	movs	r2, #5
 80013ac:	701a      	strb	r2, [r3, #0]
      break;    
 80013ae:	e00f      	b.n	80013d0 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2205      	movs	r2, #5
 80013b6:	2104      	movs	r1, #4
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f81d 	bl	80013f8 <CODEC_IO_Write>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013c8:	4b04      	ldr	r3, [pc, #16]	@ (80013dc <cs43l22_SetOutputMode+0xe0>)
 80013ca:	2205      	movs	r2, #5
 80013cc:	701a      	strb	r2, [r3, #0]
      break;
 80013ce:	bf00      	nop
  }  
  return counter;
 80013d0:	68fb      	ldr	r3, [r7, #12]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200001d8 	.word	0x200001d8

080013e0 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
  return 0;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	460b      	mov	r3, r1
 8001404:	71bb      	strb	r3, [r7, #6]
 8001406:	4613      	mov	r3, r2
 8001408:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 800140e:	797a      	ldrb	r2, [r7, #5]
 8001410:	79b9      	ldrb	r1, [r7, #6]
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fbee 	bl	8000bf6 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	b2db      	uxtb	r3, r3
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_GPIO_EXTI_Callback>:
extern AUDIO_PLAYBACK_StateTypeDef AudioState;  //variable externa en uwaveplayer.c

int IsFinished = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0 ) //se pueden añadir mas botones
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d10d      	bne.n	8001454 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		//AudioState = AUDIO_STATE_NEXT; //Aqui se selecciona que hace el boton
		if (AudioState == AUDIO_STATE_PLAY )
 8001438:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <HAL_GPIO_EXTI_Callback+0x38>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d102      	bne.n	8001446 <HAL_GPIO_EXTI_Callback+0x1e>
		{
			AudioState = AUDIO_STATE_PAUSE;
 8001440:	4b07      	ldr	r3, [pc, #28]	@ (8001460 <HAL_GPIO_EXTI_Callback+0x38>)
 8001442:	220a      	movs	r2, #10
 8001444:	701a      	strb	r2, [r3, #0]
		}
		if (AudioState == AUDIO_STATE_WAIT )
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <HAL_GPIO_EXTI_Callback+0x38>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d102      	bne.n	8001454 <HAL_GPIO_EXTI_Callback+0x2c>
		{
			AudioState = AUDIO_STATE_RESUME;
 800144e:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <HAL_GPIO_EXTI_Callback+0x38>)
 8001450:	220b      	movs	r2, #11
 8001452:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	200012e8 	.word	0x200012e8

08001464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001468:	f000 fd58 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146c:	f000 f82e 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001470:	f000 f912 	bl	8001698 <MX_GPIO_Init>
  MX_DMA_Init();
 8001474:	f000 f8f0 	bl	8001658 <MX_DMA_Init>
  MX_I2C1_Init();
 8001478:	f000 f892 	bl	80015a0 <MX_I2C1_Init>
  MX_I2S3_Init();
 800147c:	f000 f8be 	bl	80015fc <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8001480:	f00e fc7a 	bl	800fd78 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8001484:	f007 ff8c 	bl	80093a0 <MX_FATFS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001488:	f00e fc9c 	bl	800fdc4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (Appli_state == APPLICATION_READY)
 800148c:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <main+0x5c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d1f9      	bne.n	8001488 <main+0x24>
    {
    	Mount_USB();
 8001494:	f7ff fc86 	bl	8000da4 <Mount_USB>
    	AUDIO_PLAYER_Start(0); //El cero indica el indice del archivo de audio
 8001498:	2000      	movs	r0, #0
 800149a:	f000 fb73 	bl	8001b84 <AUDIO_PLAYER_Start>

    	while (!IsFinished)
 800149e:	e009      	b.n	80014b4 <main+0x50>
    	{
    		AUDIO_PLAYER_Process(true); //LOOP TRUE: Despues de que el ultimo audio termine, empieza con el primero
 80014a0:	2001      	movs	r0, #1
 80014a2:	f000 fbcf 	bl	8001c44 <AUDIO_PLAYER_Process>
    		if (AudioState == AUDIO_STATE_STOP )
 80014a6:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <main+0x60>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b09      	cmp	r3, #9
 80014ac:	d102      	bne.n	80014b4 <main+0x50>
    		{
    			IsFinished = 1 ;
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <main+0x64>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
    	while (!IsFinished)
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <main+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f1      	beq.n	80014a0 <main+0x3c>
    MX_USB_HOST_Process();
 80014bc:	e7e4      	b.n	8001488 <main+0x24>
 80014be:	bf00      	nop
 80014c0:	20002170 	.word	0x20002170
 80014c4:	200012e8 	.word	0x200012e8
 80014c8:	200002d8 	.word	0x200002d8

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b094      	sub	sp, #80	@ 0x50
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	2230      	movs	r2, #48	@ 0x30
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f00f f848 	bl	8010570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <SystemClock_Config+0xcc>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	4a27      	ldr	r2, [pc, #156]	@ (8001598 <SystemClock_Config+0xcc>)
 80014fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001500:	4b25      	ldr	r3, [pc, #148]	@ (8001598 <SystemClock_Config+0xcc>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	4b22      	ldr	r3, [pc, #136]	@ (800159c <SystemClock_Config+0xd0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a21      	ldr	r2, [pc, #132]	@ (800159c <SystemClock_Config+0xd0>)
 8001516:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <SystemClock_Config+0xd0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001528:	2301      	movs	r3, #1
 800152a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800152c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001532:	2302      	movs	r3, #2
 8001534:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001536:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800153a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800153c:	2304      	movs	r3, #4
 800153e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001540:	23c0      	movs	r3, #192	@ 0xc0
 8001542:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001544:	2304      	movs	r3, #4
 8001546:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001548:	2308      	movs	r3, #8
 800154a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154c:	f107 0320 	add.w	r3, r7, #32
 8001550:	4618      	mov	r0, r3
 8001552:	f005 ffc5 	bl	80074e0 <HAL_RCC_OscConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800155c:	f000 f912 	bl	8001784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001560:	230f      	movs	r3, #15
 8001562:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001564:	2302      	movs	r3, #2
 8001566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800156c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001576:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	2103      	movs	r1, #3
 800157e:	4618      	mov	r0, r3
 8001580:	f006 fa26 	bl	80079d0 <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800158a:	f000 f8fb 	bl	8001784 <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3750      	adds	r7, #80	@ 0x50
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40007000 	.word	0x40007000

080015a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015a6:	4a13      	ldr	r2, [pc, #76]	@ (80015f4 <MX_I2C1_Init+0x54>)
 80015a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015aa:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015ac:	4a12      	ldr	r2, [pc, #72]	@ (80015f8 <MX_I2C1_Init+0x58>)
 80015ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d0:	4b07      	ldr	r3, [pc, #28]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015d8:	2200      	movs	r2, #0
 80015da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	@ (80015f0 <MX_I2C1_Init+0x50>)
 80015de:	f003 fe81 	bl	80052e4 <HAL_I2C_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015e8:	f000 f8cc 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200001dc 	.word	0x200001dc
 80015f4:	40005400 	.word	0x40005400
 80015f8:	000186a0 	.word	0x000186a0

080015fc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <MX_I2S3_Init+0x54>)
 8001602:	4a14      	ldr	r2, [pc, #80]	@ (8001654 <MX_I2S3_Init+0x58>)
 8001604:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001606:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <MX_I2S3_Init+0x54>)
 8001608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800160c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <MX_I2S3_Init+0x54>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001614:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <MX_I2S3_Init+0x54>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800161a:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <MX_I2S3_Init+0x54>)
 800161c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001620:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001622:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <MX_I2S3_Init+0x54>)
 8001624:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001628:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800162a:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <MX_I2S3_Init+0x54>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001630:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <MX_I2S3_Init+0x54>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <MX_I2S3_Init+0x54>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MX_I2S3_Init+0x54>)
 800163e:	f004 feb3 	bl	80063a8 <HAL_I2S_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001648:	f000 f89c 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000230 	.word	0x20000230
 8001654:	40003c00 	.word	0x40003c00

08001658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <MX_DMA_Init+0x3c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a0b      	ldr	r2, [pc, #44]	@ (8001694 <MX_DMA_Init+0x3c>)
 8001668:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <MX_DMA_Init+0x3c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	2010      	movs	r0, #16
 8001680:	f000 fdbd 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001684:	2010      	movs	r0, #16
 8001686:	f000 fdd6 	bl	8002236 <HAL_NVIC_EnableIRQ>

}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <MX_GPIO_Init+0xe0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a30      	ldr	r2, [pc, #192]	@ (8001778 <MX_GPIO_Init+0xe0>)
 80016b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b2e      	ldr	r3, [pc, #184]	@ (8001778 <MX_GPIO_Init+0xe0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001778 <MX_GPIO_Init+0xe0>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4a29      	ldr	r2, [pc, #164]	@ (8001778 <MX_GPIO_Init+0xe0>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016da:	4b27      	ldr	r3, [pc, #156]	@ (8001778 <MX_GPIO_Init+0xe0>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b23      	ldr	r3, [pc, #140]	@ (8001778 <MX_GPIO_Init+0xe0>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a22      	ldr	r2, [pc, #136]	@ (8001778 <MX_GPIO_Init+0xe0>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b20      	ldr	r3, [pc, #128]	@ (8001778 <MX_GPIO_Init+0xe0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <MX_GPIO_Init+0xe0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a1b      	ldr	r2, [pc, #108]	@ (8001778 <MX_GPIO_Init+0xe0>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <MX_GPIO_Init+0xe0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2101      	movs	r1, #1
 8001722:	4816      	ldr	r0, [pc, #88]	@ (800177c <MX_GPIO_Init+0xe4>)
 8001724:	f001 fc78 	bl	8003018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001728:	2301      	movs	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	480f      	ldr	r0, [pc, #60]	@ (800177c <MX_GPIO_Init+0xe4>)
 8001740:	f001 f9d2 	bl	8002ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001744:	2301      	movs	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001748:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800174c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800174e:	2302      	movs	r3, #2
 8001750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	4809      	ldr	r0, [pc, #36]	@ (8001780 <MX_GPIO_Init+0xe8>)
 800175a:	f001 f9c5 	bl	8002ae8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2006      	movs	r0, #6
 8001764:	f000 fd4b 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001768:	2006      	movs	r0, #6
 800176a:	f000 fd64 	bl	8002236 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	@ 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40020800 	.word	0x40020800
 8001780:	40020000 	.word	0x40020000

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <Error_Handler+0x8>

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <HAL_MspInit+0x4c>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	4a0f      	ldr	r2, [pc, #60]	@ (80017dc <HAL_MspInit+0x4c>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017a6:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <HAL_MspInit+0x4c>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_MspInit+0x4c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	4a08      	ldr	r2, [pc, #32]	@ (80017dc <HAL_MspInit+0x4c>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_MspInit+0x4c>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ce:	2007      	movs	r0, #7
 80017d0:	f000 fd0a 	bl	80021e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40023800 	.word	0x40023800

080017e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	@ 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a19      	ldr	r2, [pc, #100]	@ (8001864 <HAL_I2C_MspInit+0x84>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d12c      	bne.n	800185c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	4b18      	ldr	r3, [pc, #96]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a17      	ldr	r2, [pc, #92]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800181e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001824:	2312      	movs	r3, #18
 8001826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001830:	2304      	movs	r3, #4
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	480c      	ldr	r0, [pc, #48]	@ (800186c <HAL_I2C_MspInit+0x8c>)
 800183c:	f001 f954 	bl	8002ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001848:	4a07      	ldr	r2, [pc, #28]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 800184a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800184e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001850:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <HAL_I2C_MspInit+0x88>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001854:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800185c:	bf00      	nop
 800185e:	3728      	adds	r7, #40	@ 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40005400 	.word	0x40005400
 8001868:	40023800 	.word	0x40023800
 800186c:	40020400 	.word	0x40020400

08001870 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <HAL_I2C_MspDeInit+0x38>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d10e      	bne.n	80018a0 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <HAL_I2C_MspDeInit+0x3c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	4a09      	ldr	r2, [pc, #36]	@ (80018ac <HAL_I2C_MspDeInit+0x3c>)
 8001888:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800188c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800188e:	2140      	movs	r1, #64	@ 0x40
 8001890:	4807      	ldr	r0, [pc, #28]	@ (80018b0 <HAL_I2C_MspDeInit+0x40>)
 8001892:	f001 fac5 	bl	8002e20 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001896:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <HAL_I2C_MspDeInit+0x40>)
 800189c:	f001 fac0 	bl	8002e20 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40005400 	.word	0x40005400
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400

080018b4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08e      	sub	sp, #56	@ 0x38
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a4e      	ldr	r2, [pc, #312]	@ (8001a18 <HAL_I2S_MspInit+0x164>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	f040 8094 	bne.w	8001a0e <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80018e6:	2301      	movs	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 160;
 80018ea:	23a0      	movs	r3, #160	@ 0xa0
 80018ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4618      	mov	r0, r3
 80018f8:	f006 fa76 	bl	8007de8 <HAL_RCCEx_PeriphCLKConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001902:	f7ff ff3f 	bl	8001784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b44      	ldr	r3, [pc, #272]	@ (8001a1c <HAL_I2S_MspInit+0x168>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	4a43      	ldr	r2, [pc, #268]	@ (8001a1c <HAL_I2S_MspInit+0x168>)
 8001910:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001914:	6413      	str	r3, [r2, #64]	@ 0x40
 8001916:	4b41      	ldr	r3, [pc, #260]	@ (8001a1c <HAL_I2S_MspInit+0x168>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b3d      	ldr	r3, [pc, #244]	@ (8001a1c <HAL_I2S_MspInit+0x168>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a3c      	ldr	r2, [pc, #240]	@ (8001a1c <HAL_I2S_MspInit+0x168>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b3a      	ldr	r3, [pc, #232]	@ (8001a1c <HAL_I2S_MspInit+0x168>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b36      	ldr	r3, [pc, #216]	@ (8001a1c <HAL_I2S_MspInit+0x168>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a35      	ldr	r2, [pc, #212]	@ (8001a1c <HAL_I2S_MspInit+0x168>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b33      	ldr	r3, [pc, #204]	@ (8001a1c <HAL_I2S_MspInit+0x168>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800195a:	2310      	movs	r3, #16
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800196a:	2306      	movs	r3, #6
 800196c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001972:	4619      	mov	r1, r3
 8001974:	482a      	ldr	r0, [pc, #168]	@ (8001a20 <HAL_I2S_MspInit+0x16c>)
 8001976:	f001 f8b7 	bl	8002ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800197a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800198c:	2306      	movs	r3, #6
 800198e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001994:	4619      	mov	r1, r3
 8001996:	4823      	ldr	r0, [pc, #140]	@ (8001a24 <HAL_I2S_MspInit+0x170>)
 8001998:	f001 f8a6 	bl	8002ae8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800199c:	4b22      	ldr	r3, [pc, #136]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 800199e:	4a23      	ldr	r2, [pc, #140]	@ (8001a2c <HAL_I2S_MspInit+0x178>)
 80019a0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80019a2:	4b21      	ldr	r3, [pc, #132]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 80019aa:	2240      	movs	r2, #64	@ 0x40
 80019ac:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 80019b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ba:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 80019be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019c2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019c4:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 80019c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019ca:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80019cc:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 80019ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019d2:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019d4:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019da:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 80019dc:	2204      	movs	r2, #4
 80019de:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 80019e2:	2203      	movs	r2, #3
 80019e4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80019e6:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80019ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80019f2:	480d      	ldr	r0, [pc, #52]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 80019f4:	f000 fc3a 	bl	800226c <HAL_DMA_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 80019fe:	f7ff fec1 	bl	8001784 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a08      	ldr	r2, [pc, #32]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 8001a06:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a08:	4a07      	ldr	r2, [pc, #28]	@ (8001a28 <HAL_I2S_MspInit+0x174>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001a0e:	bf00      	nop
 8001a10:	3738      	adds	r7, #56	@ 0x38
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40003c00 	.word	0x40003c00
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020000 	.word	0x40020000
 8001a24:	40020800 	.word	0x40020800
 8001a28:	20000278 	.word	0x20000278
 8001a2c:	40026088 	.word	0x40026088

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <NMI_Handler+0x4>

08001a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <HardFault_Handler+0x4>

08001a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <MemManage_Handler+0x4>

08001a48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <BusFault_Handler+0x4>

08001a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <UsageFault_Handler+0x4>

08001a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a86:	f000 fa9b 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f001 fada 	bl	800304c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <DMA1_Stream5_IRQHandler+0x10>)
 8001aa2:	f000 fdb7 	bl	8002614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000278 	.word	0x20000278

08001ab0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ab4:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <OTG_FS_IRQHandler+0x10>)
 8001ab6:	f001 fdc1 	bl	800363c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20002174 	.word	0x20002174

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	@ (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	@ (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f00e fd7e 	bl	80105f4 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	@ (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20020000 	.word	0x20020000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	200002dc 	.word	0x200002dc
 8001b2c:	200026a0 	.word	0x200026a0

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	@ (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8001b5c:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <PlayerInit+0x2c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4619      	mov	r1, r3
 8001b66:	2003      	movs	r0, #3
 8001b68:	f7fe fca6 	bl	80004b8 <AUDIO_OUT_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <PlayerInit+0x22>
	{
		return 1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8001b76:	2300      	movs	r3, #0
	}
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000003c 	.word	0x2000003c

08001b84 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  UINT bytesread;

  f_close(&WavFile);
 8001b8e:	4828      	ldr	r0, [pc, #160]	@ (8001c30 <AUDIO_PLAYER_Start+0xac>)
 8001b90:	f00d fcc7 	bl	800f522 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8001b94:	f7ff f8f8 	bl	8000d88 <AUDIO_GetWavObjectNumber>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d93f      	bls.n	8001c24 <AUDIO_PLAYER_Start+0xa0>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8001ba4:	79fa      	ldrb	r2, [r7, #7]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a20      	ldr	r2, [pc, #128]	@ (8001c34 <AUDIO_PLAYER_Start+0xb0>)
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4619      	mov	r1, r3
 8001bba:	481d      	ldr	r0, [pc, #116]	@ (8001c30 <AUDIO_PLAYER_Start+0xac>)
 8001bbc:	f00d f93a 	bl	800ee34 <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	222c      	movs	r2, #44	@ 0x2c
 8001bc6:	491c      	ldr	r1, [pc, #112]	@ (8001c38 <AUDIO_PLAYER_Start+0xb4>)
 8001bc8:	4819      	ldr	r0, [pc, #100]	@ (8001c30 <AUDIO_PLAYER_Start+0xac>)
 8001bca:	f00d faed 	bl	800f1a8 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8001bce:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <AUDIO_PLAYER_Start+0xb4>)
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ffbe 	bl	8001b54 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <AUDIO_PLAYER_Start+0xb8>)
 8001bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8001be2:	2100      	movs	r1, #0
 8001be4:	4812      	ldr	r0, [pc, #72]	@ (8001c30 <AUDIO_PLAYER_Start+0xac>)
 8001be6:	f00d fcc6 	bl	800f576 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bf2:	4912      	ldr	r1, [pc, #72]	@ (8001c3c <AUDIO_PLAYER_Start+0xb8>)
 8001bf4:	480e      	ldr	r0, [pc, #56]	@ (8001c30 <AUDIO_PLAYER_Start+0xac>)
 8001bf6:	f00d fad7 	bl	800f1a8 <f_read>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d111      	bne.n	8001c24 <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <AUDIO_PLAYER_Start+0xbc>)
 8001c02:	2203      	movs	r2, #3
 8001c04:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00b      	beq.n	8001c24 <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8001c0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c10:	480a      	ldr	r0, [pc, #40]	@ (8001c3c <AUDIO_PLAYER_Start+0xb8>)
 8001c12:	f7fe fc9f 	bl	8000554 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4a08      	ldr	r2, [pc, #32]	@ (8001c3c <AUDIO_PLAYER_Start+0xb8>)
 8001c1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c1e:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e000      	b.n	8001c26 <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8001c24:	2301      	movs	r3, #1
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200016f4 	.word	0x200016f4
 8001c34:	200012ec 	.word	0x200012ec
 8001c38:	200016c8 	.word	0x200016c8
 8001c3c:	200002e0 	.word	0x200002e0
 8001c40:	200012e8 	.word	0x200012e8

08001c44 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 8001c52:	4b82      	ldr	r3, [pc, #520]	@ (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	3b03      	subs	r3, #3
 8001c58:	2b0a      	cmp	r3, #10
 8001c5a:	f200 80f6 	bhi.w	8001e4a <AUDIO_PLAYER_Process+0x206>
 8001c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c64 <AUDIO_PLAYER_Process+0x20>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001c91 	.word	0x08001c91
 8001c68:	08001e4b 	.word	0x08001e4b
 8001c6c:	08001d57 	.word	0x08001d57
 8001c70:	08001da5 	.word	0x08001da5
 8001c74:	08001e4b 	.word	0x08001e4b
 8001c78:	08001e4b 	.word	0x08001e4b
 8001c7c:	08001d45 	.word	0x08001d45
 8001c80:	08001de7 	.word	0x08001de7
 8001c84:	08001df3 	.word	0x08001df3
 8001c88:	08001dff 	.word	0x08001dff
 8001c8c:	08001e25 	.word	0x08001e25
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8001c90:	4b73      	ldr	r3, [pc, #460]	@ (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	4b72      	ldr	r3, [pc, #456]	@ (8001e64 <AUDIO_PLAYER_Process+0x220>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d305      	bcc.n	8001cac <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001ca0:	2002      	movs	r0, #2
 8001ca2:	f7fe fcad 	bl	8000600 <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8001ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001ca8:	2205      	movs	r2, #5
 8001caa:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8001cac:	4b6c      	ldr	r3, [pc, #432]	@ (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001cae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d11e      	bne.n	8001cf6 <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cc0:	4967      	ldr	r1, [pc, #412]	@ (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001cc2:	4869      	ldr	r0, [pc, #420]	@ (8001e68 <AUDIO_PLAYER_Process+0x224>)
 8001cc4:	f00d fa70 	bl	800f1a8 <f_read>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d004      	beq.n	8001cd8 <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f7fe fc96 	bl	8000600 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0bc      	b.n	8001e52 <AUDIO_PLAYER_Process+0x20e>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001cd8:	4b61      	ldr	r3, [pc, #388]	@ (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001cda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001ce2:	4b5f      	ldr	r3, [pc, #380]	@ (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001ce4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a5c      	ldr	r2, [pc, #368]	@ (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001cf0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cf4:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8001cf6:	4b5a      	ldr	r3, [pc, #360]	@ (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001cf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	f040 80a5 	bne.w	8001e4e <AUDIO_PLAYER_Process+0x20a>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001d04:	f107 0308 	add.w	r3, r7, #8
 8001d08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d0c:	4957      	ldr	r1, [pc, #348]	@ (8001e6c <AUDIO_PLAYER_Process+0x228>)
 8001d0e:	4856      	ldr	r0, [pc, #344]	@ (8001e68 <AUDIO_PLAYER_Process+0x224>)
 8001d10:	f00d fa4a 	bl	800f1a8 <f_read>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d004      	beq.n	8001d24 <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f7fe fc70 	bl	8000600 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001d20:	2301      	movs	r3, #1
 8001d22:	e096      	b.n	8001e52 <AUDIO_PLAYER_Process+0x20e>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001d24:	4b4e      	ldr	r3, [pc, #312]	@ (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001d30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a49      	ldr	r2, [pc, #292]	@ (8001e60 <AUDIO_PLAYER_Process+0x21c>)
 8001d3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d40:	6053      	str	r3, [r2, #4]
    }
    break;
 8001d42:	e084      	b.n	8001e4e <AUDIO_PLAYER_Process+0x20a>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001d44:	2002      	movs	r0, #2
 8001d46:	f7fe fc5b 	bl	8000600 <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8001d4a:	4b44      	ldr	r3, [pc, #272]	@ (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
    break;
 8001d54:	e07c      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8001d56:	4b46      	ldr	r3, [pc, #280]	@ (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	4b42      	ldr	r3, [pc, #264]	@ (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001d66:	801a      	strh	r2, [r3, #0]
 8001d68:	4b41      	ldr	r3, [pc, #260]	@ (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6e:	461c      	mov	r4, r3
 8001d70:	f7ff f80a 	bl	8000d88 <AUDIO_GetWavObjectNumber>
 8001d74:	4603      	mov	r3, r0
 8001d76:	429c      	cmp	r4, r3
 8001d78:	db09      	blt.n	8001d8e <AUDIO_PLAYER_Process+0x14a>
    {
    	if (isLoop)
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <AUDIO_PLAYER_Process+0x144>
    	{
    		FilePos = 0;
 8001d80:	4b3b      	ldr	r3, [pc, #236]	@ (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	801a      	strh	r2, [r3, #0]
 8001d86:	e002      	b.n	8001d8e <AUDIO_PLAYER_Process+0x14a>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8001d88:	4b34      	ldr	r3, [pc, #208]	@ (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001d8a:	2209      	movs	r2, #9
 8001d8c:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001d8e:	2002      	movs	r0, #2
 8001d90:	f7fe fc36 	bl	8000600 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001d94:	4b36      	ldr	r3, [pc, #216]	@ (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fef1 	bl	8001b84 <AUDIO_PLAYER_Start>
    break;    
 8001da2:	e055      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8001da4:	4b32      	ldr	r3, [pc, #200]	@ (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	b21a      	sxth	r2, r3
 8001db2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001db4:	801a      	strh	r2, [r3, #0]
 8001db6:	4b2e      	ldr	r3, [pc, #184]	@ (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	da07      	bge.n	8001dd0 <AUDIO_PLAYER_Process+0x18c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8001dc0:	f7fe ffe2 	bl	8000d88 <AUDIO_GetWavObjectNumber>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	4b28      	ldr	r3, [pc, #160]	@ (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001dce:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001dd0:	2002      	movs	r0, #2
 8001dd2:	f7fe fc15 	bl	8000600 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001dd6:	4b26      	ldr	r3, [pc, #152]	@ (8001e70 <AUDIO_PLAYER_Process+0x22c>)
 8001dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fed0 	bl	8001b84 <AUDIO_PLAYER_Start>
    break;   
 8001de4:	e034      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8001de6:	f7fe fbdf 	bl	80005a8 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8001dea:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
    break;
 8001df0:	e02e      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8001df2:	f7fe fbef 	bl	80005d4 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8001df6:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001df8:	2203      	movs	r2, #3
 8001dfa:	701a      	strb	r2, [r3, #0]
    break;
 8001dfc:	e028      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b5a      	cmp	r3, #90	@ 0x5a
 8001e04:	d804      	bhi.n	8001e10 <AUDIO_PLAYER_Process+0x1cc>
    {
      uwVolume += 10;
 8001e06:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	330a      	adds	r3, #10
 8001e0c:	4a19      	ldr	r2, [pc, #100]	@ (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e0e:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8001e10:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fc1a 	bl	8000650 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001e1e:	2203      	movs	r2, #3
 8001e20:	701a      	strb	r2, [r3, #0]
    break;
 8001e22:	e015      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 8001e24:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b09      	cmp	r3, #9
 8001e2a:	d904      	bls.n	8001e36 <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume -= 10;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3b0a      	subs	r3, #10
 8001e32:	4a10      	ldr	r2, [pc, #64]	@ (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e34:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8001e36:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <AUDIO_PLAYER_Process+0x230>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fc07 	bl	8000650 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <AUDIO_PLAYER_Process+0x218>)
 8001e44:	2203      	movs	r2, #3
 8001e46:	701a      	strb	r2, [r3, #0]
    break;
 8001e48:	e002      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 8001e4a:	bf00      	nop
 8001e4c:	e000      	b.n	8001e50 <AUDIO_PLAYER_Process+0x20c>
    break;
 8001e4e:	bf00      	nop
  }
  return audio_error;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd90      	pop	{r4, r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200012e8 	.word	0x200012e8
 8001e60:	200002e0 	.word	0x200002e0
 8001e64:	200016c8 	.word	0x200016c8
 8001e68:	200016f4 	.word	0x200016f4
 8001e6c:	20000ae0 	.word	0x20000ae0
 8001e70:	200012ea 	.word	0x200012ea
 8001e74:	2000003c 	.word	0x2000003c

08001e78 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d104      	bne.n	8001e8e <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8001e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	701a      	strb	r2, [r3, #0]
  }
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	200012e8 	.word	0x200012e8
 8001e9c:	200002e0 	.word	0x200002e0

08001ea0 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d104      	bne.n	8001eb6 <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8001eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	200012e8 	.word	0x200012e8
 8001ec4:	200002e0 	.word	0x200002e0

08001ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ecc:	f7ff fe30 	bl	8001b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed0:	480c      	ldr	r0, [pc, #48]	@ (8001f04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ed2:	490d      	ldr	r1, [pc, #52]	@ (8001f08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8001f14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f00e fb83 	bl	8010600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efa:	f7ff fab3 	bl	8001464 <main>
  bx  lr    
 8001efe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001f0c:	08010c4c 	.word	0x08010c4c
  ldr r2, =_sbss
 8001f10:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001f14:	2000269c 	.word	0x2000269c

08001f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f20:	4b0e      	ldr	r3, [pc, #56]	@ (8001f5c <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	@ (8001f5c <HAL_Init+0x40>)
 8001f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <HAL_Init+0x40>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	@ (8001f5c <HAL_Init+0x40>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 f94f 	bl	80021e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f000 f808 	bl	8001f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f50:	f7ff fc1e 	bl	8001790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f68:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <HAL_InitTick+0x54>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <HAL_InitTick+0x58>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f967 	bl	8002252 <HAL_SYSTICK_Config>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00e      	b.n	8001fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0f      	cmp	r3, #15
 8001f92:	d80a      	bhi.n	8001faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f94:	2200      	movs	r2, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f000 f92f 	bl	80021fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa0:	4a06      	ldr	r2, [pc, #24]	@ (8001fbc <HAL_InitTick+0x5c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000038 	.word	0x20000038
 8001fb8:	20000044 	.word	0x20000044
 8001fbc:	20000040 	.word	0x20000040

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000044 	.word	0x20000044
 8001fe4:	20001924 	.word	0x20001924

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20001924 	.word	0x20001924

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff ffee 	bl	8001fe8 <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffde 	bl	8001fe8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000044 	.word	0x20000044

08002048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002058:	4b0c      	ldr	r3, [pc, #48]	@ (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002070:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207a:	4a04      	ldr	r2, [pc, #16]	@ (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	60d3      	str	r3, [r2, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b04      	ldr	r3, [pc, #16]	@ (80020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0307 	and.w	r3, r3, #7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	db0b      	blt.n	80020d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	4907      	ldr	r1, [pc, #28]	@ (80020e4 <__NVIC_EnableIRQ+0x38>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2001      	movs	r0, #1
 80020ce:	fa00 f202 	lsl.w	r2, r0, r2
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000e100 	.word	0xe000e100

080020e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	db0a      	blt.n	8002112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	490c      	ldr	r1, [pc, #48]	@ (8002134 <__NVIC_SetPriority+0x4c>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	440b      	add	r3, r1
 800210c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002110:	e00a      	b.n	8002128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4908      	ldr	r1, [pc, #32]	@ (8002138 <__NVIC_SetPriority+0x50>)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3b04      	subs	r3, #4
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	440b      	add	r3, r1
 8002126:	761a      	strb	r2, [r3, #24]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000e100 	.word	0xe000e100
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	@ 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f1c3 0307 	rsb	r3, r3, #7
 8002156:	2b04      	cmp	r3, #4
 8002158:	bf28      	it	cs
 800215a:	2304      	movcs	r3, #4
 800215c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3304      	adds	r3, #4
 8002162:	2b06      	cmp	r3, #6
 8002164:	d902      	bls.n	800216c <NVIC_EncodePriority+0x30>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3b03      	subs	r3, #3
 800216a:	e000      	b.n	800216e <NVIC_EncodePriority+0x32>
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43d9      	mvns	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	4313      	orrs	r3, r2
         );
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	@ 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021b4:	d301      	bcc.n	80021ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00f      	b.n	80021da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ba:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <SysTick_Config+0x40>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c2:	210f      	movs	r1, #15
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295
 80021c8:	f7ff ff8e 	bl	80020e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021cc:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <SysTick_Config+0x40>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d2:	4b04      	ldr	r3, [pc, #16]	@ (80021e4 <SysTick_Config+0x40>)
 80021d4:	2207      	movs	r2, #7
 80021d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	e000e010 	.word	0xe000e010

080021e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff29 	bl	8002048 <__NVIC_SetPriorityGrouping>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002210:	f7ff ff3e 	bl	8002090 <__NVIC_GetPriorityGrouping>
 8002214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	6978      	ldr	r0, [r7, #20]
 800221c:	f7ff ff8e 	bl	800213c <NVIC_EncodePriority>
 8002220:	4602      	mov	r2, r0
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff5d 	bl	80020e8 <__NVIC_SetPriority>
}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff31 	bl	80020ac <__NVIC_EnableIRQ>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffa2 	bl	80021a4 <SysTick_Config>
 8002260:	4603      	mov	r3, r0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7ff feb6 	bl	8001fe8 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e099      	b.n	80023bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a8:	e00f      	b.n	80022ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022aa:	f7ff fe9d 	bl	8001fe8 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	d908      	bls.n	80022ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2203      	movs	r2, #3
 80022c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e078      	b.n	80023bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e8      	bne.n	80022aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4b38      	ldr	r3, [pc, #224]	@ (80023c4 <HAL_DMA_Init+0x158>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002302:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800230e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002320:	2b04      	cmp	r3, #4
 8002322:	d107      	bne.n	8002334 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232c:	4313      	orrs	r3, r2
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f023 0307 	bic.w	r3, r3, #7
 800234a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235a:	2b04      	cmp	r3, #4
 800235c:	d117      	bne.n	800238e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00e      	beq.n	800238e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fb3d 	bl	80029f0 <DMA_CheckFifoParam>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2240      	movs	r2, #64	@ 0x40
 8002380:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800238a:	2301      	movs	r3, #1
 800238c:	e016      	b.n	80023bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 faf4 	bl	8002984 <DMA_CalcBaseAndBitshift>
 800239c:	4603      	mov	r3, r0
 800239e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a4:	223f      	movs	r2, #63	@ 0x3f
 80023a6:	409a      	lsls	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	f010803f 	.word	0xf010803f

080023c8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e050      	b.n	800247c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d101      	bne.n	80023ea <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
 80023e8:	e048      	b.n	800247c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2200      	movs	r2, #0
 8002408:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2221      	movs	r2, #33	@ 0x21
 8002428:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 faaa 	bl	8002984 <DMA_CalcBaseAndBitshift>
 8002430:	4603      	mov	r3, r0
 8002432:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245c:	223f      	movs	r2, #63	@ 0x3f
 800245e:	409a      	lsls	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_DMA_Start_IT+0x26>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e040      	b.n	800252c <HAL_DMA_Start_IT+0xa8>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d12f      	bne.n	800251e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2202      	movs	r2, #2
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fa28 	bl	8002928 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024dc:	223f      	movs	r2, #63	@ 0x3f
 80024de:	409a      	lsls	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0216 	orr.w	r2, r2, #22
 80024f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d007      	beq.n	800250c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0208 	orr.w	r2, r2, #8
 800250a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e005      	b.n	800252a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002526:	2302      	movs	r3, #2
 8002528:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800252a:	7dfb      	ldrb	r3, [r7, #23]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002542:	f7ff fd51 	bl	8001fe8 <HAL_GetTick>
 8002546:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d008      	beq.n	8002566 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2280      	movs	r2, #128	@ 0x80
 8002558:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e052      	b.n	800260c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0216 	bic.w	r2, r2, #22
 8002574:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002584:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <HAL_DMA_Abort+0x62>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002592:	2b00      	cmp	r3, #0
 8002594:	d007      	beq.n	80025a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0208 	bic.w	r2, r2, #8
 80025a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0201 	bic.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b6:	e013      	b.n	80025e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025b8:	f7ff fd16 	bl	8001fe8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d90c      	bls.n	80025e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2220      	movs	r2, #32
 80025ca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2203      	movs	r2, #3
 80025d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e015      	b.n	800260c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1e4      	bne.n	80025b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f2:	223f      	movs	r2, #63	@ 0x3f
 80025f4:	409a      	lsls	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002620:	4b8e      	ldr	r3, [pc, #568]	@ (800285c <HAL_DMA_IRQHandler+0x248>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a8e      	ldr	r2, [pc, #568]	@ (8002860 <HAL_DMA_IRQHandler+0x24c>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	0a9b      	lsrs	r3, r3, #10
 800262c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002632:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263e:	2208      	movs	r2, #8
 8002640:	409a      	lsls	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4013      	ands	r3, r2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01a      	beq.n	8002680 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0204 	bic.w	r2, r2, #4
 8002666:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266c:	2208      	movs	r2, #8
 800266e:	409a      	lsls	r2, r3
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002678:	f043 0201 	orr.w	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002684:	2201      	movs	r2, #1
 8002686:	409a      	lsls	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d012      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a2:	2201      	movs	r2, #1
 80026a4:	409a      	lsls	r2, r3
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ae:	f043 0202 	orr.w	r2, r3, #2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ba:	2204      	movs	r2, #4
 80026bc:	409a      	lsls	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d012      	beq.n	80026ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d8:	2204      	movs	r2, #4
 80026da:	409a      	lsls	r2, r3
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e4:	f043 0204 	orr.w	r2, r3, #4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f0:	2210      	movs	r2, #16
 80026f2:	409a      	lsls	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d043      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d03c      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270e:	2210      	movs	r2, #16
 8002710:	409a      	lsls	r2, r3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d018      	beq.n	8002756 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d108      	bne.n	8002744 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d024      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	4798      	blx	r3
 8002742:	e01f      	b.n	8002784 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
 8002754:	e016      	b.n	8002784 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0208 	bic.w	r2, r2, #8
 8002772:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002788:	2220      	movs	r2, #32
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 808f 	beq.w	80028b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8087 	beq.w	80028b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027aa:	2220      	movs	r2, #32
 80027ac:	409a      	lsls	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	d136      	bne.n	800282c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0216 	bic.w	r2, r2, #22
 80027cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d103      	bne.n	80027ee <HAL_DMA_IRQHandler+0x1da>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0208 	bic.w	r2, r2, #8
 80027fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002802:	223f      	movs	r2, #63	@ 0x3f
 8002804:	409a      	lsls	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281e:	2b00      	cmp	r3, #0
 8002820:	d07e      	beq.n	8002920 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
        }
        return;
 800282a:	e079      	b.n	8002920 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01d      	beq.n	8002876 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10d      	bne.n	8002864 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284c:	2b00      	cmp	r3, #0
 800284e:	d031      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
 8002858:	e02c      	b.n	80028b4 <HAL_DMA_IRQHandler+0x2a0>
 800285a:	bf00      	nop
 800285c:	20000038 	.word	0x20000038
 8002860:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d023      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	4798      	blx	r3
 8002874:	e01e      	b.n	80028b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10f      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0210 	bic.w	r2, r2, #16
 8002892:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d032      	beq.n	8002922 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d022      	beq.n	800290e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2205      	movs	r2, #5
 80028cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	3301      	adds	r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d307      	bcc.n	80028fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f2      	bne.n	80028e0 <HAL_DMA_IRQHandler+0x2cc>
 80028fa:	e000      	b.n	80028fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	4798      	blx	r3
 800291e:	e000      	b.n	8002922 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002920:	bf00      	nop
    }
  }
}
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002944:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b40      	cmp	r3, #64	@ 0x40
 8002954:	d108      	bne.n	8002968 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002966:	e007      	b.n	8002978 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	60da      	str	r2, [r3, #12]
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	3b10      	subs	r3, #16
 8002994:	4a14      	ldr	r2, [pc, #80]	@ (80029e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800299e:	4a13      	ldr	r2, [pc, #76]	@ (80029ec <DMA_CalcBaseAndBitshift+0x68>)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4413      	add	r3, r2
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d909      	bls.n	80029c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029ba:	f023 0303 	bic.w	r3, r3, #3
 80029be:	1d1a      	adds	r2, r3, #4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80029c4:	e007      	b.n	80029d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029ce:	f023 0303 	bic.w	r3, r3, #3
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	aaaaaaab 	.word	0xaaaaaaab
 80029ec:	080107e0 	.word	0x080107e0

080029f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d11f      	bne.n	8002a4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d856      	bhi.n	8002abe <DMA_CheckFifoParam+0xce>
 8002a10:	a201      	add	r2, pc, #4	@ (adr r2, 8002a18 <DMA_CheckFifoParam+0x28>)
 8002a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a16:	bf00      	nop
 8002a18:	08002a29 	.word	0x08002a29
 8002a1c:	08002a3b 	.word	0x08002a3b
 8002a20:	08002a29 	.word	0x08002a29
 8002a24:	08002abf 	.word	0x08002abf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d046      	beq.n	8002ac2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a38:	e043      	b.n	8002ac2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a42:	d140      	bne.n	8002ac6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a48:	e03d      	b.n	8002ac6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a52:	d121      	bne.n	8002a98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d837      	bhi.n	8002aca <DMA_CheckFifoParam+0xda>
 8002a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a60 <DMA_CheckFifoParam+0x70>)
 8002a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a60:	08002a71 	.word	0x08002a71
 8002a64:	08002a77 	.word	0x08002a77
 8002a68:	08002a71 	.word	0x08002a71
 8002a6c:	08002a89 	.word	0x08002a89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      break;
 8002a74:	e030      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d025      	beq.n	8002ace <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a86:	e022      	b.n	8002ace <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a90:	d11f      	bne.n	8002ad2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a96:	e01c      	b.n	8002ad2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d903      	bls.n	8002aa6 <DMA_CheckFifoParam+0xb6>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d003      	beq.n	8002aac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002aa4:	e018      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aaa:	e015      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00e      	beq.n	8002ad6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      break;
 8002abc:	e00b      	b.n	8002ad6 <DMA_CheckFifoParam+0xe6>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e00a      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac2:	bf00      	nop
 8002ac4:	e008      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac6:	bf00      	nop
 8002ac8:	e006      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002aca:	bf00      	nop
 8002acc:	e004      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e002      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ad2:	bf00      	nop
 8002ad4:	e000      	b.n	8002ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop

08002ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	@ 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	e16b      	b.n	8002ddc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b04:	2201      	movs	r2, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f040 815a 	bne.w	8002dd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d005      	beq.n	8002b3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d130      	bne.n	8002b9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2203      	movs	r2, #3
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b70:	2201      	movs	r2, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 0201 	and.w	r2, r3, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d017      	beq.n	8002bd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d123      	bne.n	8002c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	08da      	lsrs	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3208      	adds	r2, #8
 8002bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	08da      	lsrs	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3208      	adds	r2, #8
 8002c26:	69b9      	ldr	r1, [r7, #24]
 8002c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0203 	and.w	r2, r3, #3
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80b4 	beq.w	8002dd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b60      	ldr	r3, [pc, #384]	@ (8002df4 <HAL_GPIO_Init+0x30c>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	4a5f      	ldr	r2, [pc, #380]	@ (8002df4 <HAL_GPIO_Init+0x30c>)
 8002c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c7e:	4b5d      	ldr	r3, [pc, #372]	@ (8002df4 <HAL_GPIO_Init+0x30c>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c8a:	4a5b      	ldr	r2, [pc, #364]	@ (8002df8 <HAL_GPIO_Init+0x310>)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	3302      	adds	r3, #2
 8002c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a52      	ldr	r2, [pc, #328]	@ (8002dfc <HAL_GPIO_Init+0x314>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d02b      	beq.n	8002d0e <HAL_GPIO_Init+0x226>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a51      	ldr	r2, [pc, #324]	@ (8002e00 <HAL_GPIO_Init+0x318>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d025      	beq.n	8002d0a <HAL_GPIO_Init+0x222>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a50      	ldr	r2, [pc, #320]	@ (8002e04 <HAL_GPIO_Init+0x31c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01f      	beq.n	8002d06 <HAL_GPIO_Init+0x21e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4f      	ldr	r2, [pc, #316]	@ (8002e08 <HAL_GPIO_Init+0x320>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x21a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4e      	ldr	r2, [pc, #312]	@ (8002e0c <HAL_GPIO_Init+0x324>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x216>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4d      	ldr	r2, [pc, #308]	@ (8002e10 <HAL_GPIO_Init+0x328>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x212>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4c      	ldr	r2, [pc, #304]	@ (8002e14 <HAL_GPIO_Init+0x32c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x20e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4b      	ldr	r2, [pc, #300]	@ (8002e18 <HAL_GPIO_Init+0x330>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x20a>
 8002cee:	2307      	movs	r3, #7
 8002cf0:	e00e      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002cf2:	2308      	movs	r3, #8
 8002cf4:	e00c      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002cf6:	2306      	movs	r3, #6
 8002cf8:	e00a      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002cfa:	2305      	movs	r3, #5
 8002cfc:	e008      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002cfe:	2304      	movs	r3, #4
 8002d00:	e006      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002d02:	2303      	movs	r3, #3
 8002d04:	e004      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e002      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_GPIO_Init+0x228>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	f002 0203 	and.w	r2, r2, #3
 8002d16:	0092      	lsls	r2, r2, #2
 8002d18:	4093      	lsls	r3, r2
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d20:	4935      	ldr	r1, [pc, #212]	@ (8002df8 <HAL_GPIO_Init+0x310>)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	3302      	adds	r3, #2
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e1c <HAL_GPIO_Init+0x334>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d52:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <HAL_GPIO_Init+0x334>)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d58:	4b30      	ldr	r3, [pc, #192]	@ (8002e1c <HAL_GPIO_Init+0x334>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d7c:	4a27      	ldr	r2, [pc, #156]	@ (8002e1c <HAL_GPIO_Init+0x334>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d82:	4b26      	ldr	r3, [pc, #152]	@ (8002e1c <HAL_GPIO_Init+0x334>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002da6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e1c <HAL_GPIO_Init+0x334>)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dac:	4b1b      	ldr	r3, [pc, #108]	@ (8002e1c <HAL_GPIO_Init+0x334>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd0:	4a12      	ldr	r2, [pc, #72]	@ (8002e1c <HAL_GPIO_Init+0x334>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2b0f      	cmp	r3, #15
 8002de0:	f67f ae90 	bls.w	8002b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3724      	adds	r7, #36	@ 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40013800 	.word	0x40013800
 8002dfc:	40020000 	.word	0x40020000
 8002e00:	40020400 	.word	0x40020400
 8002e04:	40020800 	.word	0x40020800
 8002e08:	40020c00 	.word	0x40020c00
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40021400 	.word	0x40021400
 8002e14:	40021800 	.word	0x40021800
 8002e18:	40021c00 	.word	0x40021c00
 8002e1c:	40013c00 	.word	0x40013c00

08002e20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e0cd      	b.n	8002fd8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	f040 80bd 	bne.w	8002fd2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002e58:	4a65      	ldr	r2, [pc, #404]	@ (8002ff0 <HAL_GPIO_DeInit+0x1d0>)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e64:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	220f      	movs	r2, #15
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	4013      	ands	r3, r2
 8002e78:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ff4 <HAL_GPIO_DeInit+0x1d4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d02b      	beq.n	8002eda <HAL_GPIO_DeInit+0xba>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a5c      	ldr	r2, [pc, #368]	@ (8002ff8 <HAL_GPIO_DeInit+0x1d8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d025      	beq.n	8002ed6 <HAL_GPIO_DeInit+0xb6>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a5b      	ldr	r2, [pc, #364]	@ (8002ffc <HAL_GPIO_DeInit+0x1dc>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01f      	beq.n	8002ed2 <HAL_GPIO_DeInit+0xb2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a5a      	ldr	r2, [pc, #360]	@ (8003000 <HAL_GPIO_DeInit+0x1e0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d019      	beq.n	8002ece <HAL_GPIO_DeInit+0xae>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a59      	ldr	r2, [pc, #356]	@ (8003004 <HAL_GPIO_DeInit+0x1e4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <HAL_GPIO_DeInit+0xaa>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a58      	ldr	r2, [pc, #352]	@ (8003008 <HAL_GPIO_DeInit+0x1e8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00d      	beq.n	8002ec6 <HAL_GPIO_DeInit+0xa6>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a57      	ldr	r2, [pc, #348]	@ (800300c <HAL_GPIO_DeInit+0x1ec>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d007      	beq.n	8002ec2 <HAL_GPIO_DeInit+0xa2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a56      	ldr	r2, [pc, #344]	@ (8003010 <HAL_GPIO_DeInit+0x1f0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d101      	bne.n	8002ebe <HAL_GPIO_DeInit+0x9e>
 8002eba:	2307      	movs	r3, #7
 8002ebc:	e00e      	b.n	8002edc <HAL_GPIO_DeInit+0xbc>
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	e00c      	b.n	8002edc <HAL_GPIO_DeInit+0xbc>
 8002ec2:	2306      	movs	r3, #6
 8002ec4:	e00a      	b.n	8002edc <HAL_GPIO_DeInit+0xbc>
 8002ec6:	2305      	movs	r3, #5
 8002ec8:	e008      	b.n	8002edc <HAL_GPIO_DeInit+0xbc>
 8002eca:	2304      	movs	r3, #4
 8002ecc:	e006      	b.n	8002edc <HAL_GPIO_DeInit+0xbc>
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e004      	b.n	8002edc <HAL_GPIO_DeInit+0xbc>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e002      	b.n	8002edc <HAL_GPIO_DeInit+0xbc>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_GPIO_DeInit+0xbc>
 8002eda:	2300      	movs	r3, #0
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	f002 0203 	and.w	r2, r2, #3
 8002ee2:	0092      	lsls	r2, r2, #2
 8002ee4:	4093      	lsls	r3, r2
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d132      	bne.n	8002f52 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002eec:	4b49      	ldr	r3, [pc, #292]	@ (8003014 <HAL_GPIO_DeInit+0x1f4>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	4947      	ldr	r1, [pc, #284]	@ (8003014 <HAL_GPIO_DeInit+0x1f4>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002efa:	4b46      	ldr	r3, [pc, #280]	@ (8003014 <HAL_GPIO_DeInit+0x1f4>)
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	4944      	ldr	r1, [pc, #272]	@ (8003014 <HAL_GPIO_DeInit+0x1f4>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002f08:	4b42      	ldr	r3, [pc, #264]	@ (8003014 <HAL_GPIO_DeInit+0x1f4>)
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	4940      	ldr	r1, [pc, #256]	@ (8003014 <HAL_GPIO_DeInit+0x1f4>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002f16:	4b3f      	ldr	r3, [pc, #252]	@ (8003014 <HAL_GPIO_DeInit+0x1f4>)
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	493d      	ldr	r1, [pc, #244]	@ (8003014 <HAL_GPIO_DeInit+0x1f4>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002f34:	4a2e      	ldr	r2, [pc, #184]	@ (8002ff0 <HAL_GPIO_DeInit+0x1d0>)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	089b      	lsrs	r3, r3, #2
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	43da      	mvns	r2, r3
 8002f44:	482a      	ldr	r0, [pc, #168]	@ (8002ff0 <HAL_GPIO_DeInit+0x1d0>)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	2103      	movs	r1, #3
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	401a      	ands	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	08da      	lsrs	r2, r3, #3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3208      	adds	r2, #8
 8002f70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	220f      	movs	r2, #15
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	08d2      	lsrs	r2, r2, #3
 8002f88:	4019      	ands	r1, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3208      	adds	r2, #8
 8002f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	2103      	movs	r1, #3
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	2101      	movs	r1, #1
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	2103      	movs	r1, #3
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	401a      	ands	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2b0f      	cmp	r3, #15
 8002fdc:	f67f af2e 	bls.w	8002e3c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40013800 	.word	0x40013800
 8002ff4:	40020000 	.word	0x40020000
 8002ff8:	40020400 	.word	0x40020400
 8002ffc:	40020800 	.word	0x40020800
 8003000:	40020c00 	.word	0x40020c00
 8003004:	40021000 	.word	0x40021000
 8003008:	40021400 	.word	0x40021400
 800300c:	40021800 	.word	0x40021800
 8003010:	40021c00 	.word	0x40021c00
 8003014:	40013c00 	.word	0x40013c00

08003018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	807b      	strh	r3, [r7, #2]
 8003024:	4613      	mov	r3, r2
 8003026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003028:	787b      	ldrb	r3, [r7, #1]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800302e:	887a      	ldrh	r2, [r7, #2]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003034:	e003      	b.n	800303e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003036:	887b      	ldrh	r3, [r7, #2]
 8003038:	041a      	lsls	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	619a      	str	r2, [r3, #24]
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003056:	4b08      	ldr	r3, [pc, #32]	@ (8003078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	4013      	ands	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d006      	beq.n	8003070 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003062:	4a05      	ldr	r2, [pc, #20]	@ (8003078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003064:	88fb      	ldrh	r3, [r7, #6]
 8003066:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe f9dc 	bl	8001428 <HAL_GPIO_EXTI_Callback>
  }
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40013c00 	.word	0x40013c00

0800307c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af02      	add	r7, sp, #8
 8003082:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e059      	b.n	8003142 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d106      	bne.n	80030ae <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f00c fec3 	bl	800fe34 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2203      	movs	r2, #3
 80030b2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030bc:	d102      	bne.n	80030c4 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f005 f870 	bl	80081ae <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7c1a      	ldrb	r2, [r3, #16]
 80030d6:	f88d 2000 	strb.w	r2, [sp]
 80030da:	3304      	adds	r3, #4
 80030dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030de:	f004 fff1 	bl	80080c4 <USB_CoreInit>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e026      	b.n	8003142 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2101      	movs	r1, #1
 80030fa:	4618      	mov	r0, r3
 80030fc:	f005 f868 	bl	80081d0 <USB_SetCurrentMode>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2202      	movs	r2, #2
 800310a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e017      	b.n	8003142 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7c1a      	ldrb	r2, [r3, #16]
 800311a:	f88d 2000 	strb.w	r2, [sp]
 800311e:	3304      	adds	r3, #4
 8003120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003122:	f005 fa0b 	bl	800853c <USB_HostInit>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e004      	b.n	8003142 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800314a:	b590      	push	{r4, r7, lr}
 800314c:	b08b      	sub	sp, #44	@ 0x2c
 800314e:	af04      	add	r7, sp, #16
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	4608      	mov	r0, r1
 8003154:	4611      	mov	r1, r2
 8003156:	461a      	mov	r2, r3
 8003158:	4603      	mov	r3, r0
 800315a:	70fb      	strb	r3, [r7, #3]
 800315c:	460b      	mov	r3, r1
 800315e:	70bb      	strb	r3, [r7, #2]
 8003160:	4613      	mov	r3, r2
 8003162:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003164:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003166:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_HCD_HC_Init+0x2c>
 8003172:	2302      	movs	r3, #2
 8003174:	e09d      	b.n	80032b2 <HAL_HCD_HC_Init+0x168>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	3319      	adds	r3, #25
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	3314      	adds	r3, #20
 80031a2:	787a      	ldrb	r2, [r7, #1]
 80031a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3315      	adds	r3, #21
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	3326      	adds	r3, #38	@ 0x26
 80031ca:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80031ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	78bb      	ldrb	r3, [r7, #2]
 80031d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031d8:	b2d8      	uxtb	r0, r3
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3316      	adds	r3, #22
 80031e8:	4602      	mov	r2, r0
 80031ea:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fbc7 	bl	8003984 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80031f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	da0a      	bge.n	8003214 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	3317      	adds	r3, #23
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	e009      	b.n	8003228 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	3317      	adds	r3, #23
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f005 fae9 	bl	8008804 <USB_GetHostSpeed>
 8003232:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003234:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003238:	2b01      	cmp	r3, #1
 800323a:	d10b      	bne.n	8003254 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800323c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003240:	2b01      	cmp	r3, #1
 8003242:	d107      	bne.n	8003254 <HAL_HCD_HC_Init+0x10a>
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d104      	bne.n	8003254 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2bbc      	cmp	r3, #188	@ 0xbc
 800324e:	d901      	bls.n	8003254 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003250:	23bc      	movs	r3, #188	@ 0xbc
 8003252:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	3318      	adds	r3, #24
 8003264:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003268:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	b298      	uxth	r0, r3
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	3328      	adds	r3, #40	@ 0x28
 800327e:	4602      	mov	r2, r0
 8003280:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	b29b      	uxth	r3, r3
 800328a:	787c      	ldrb	r4, [r7, #1]
 800328c:	78ba      	ldrb	r2, [r7, #2]
 800328e:	78f9      	ldrb	r1, [r7, #3]
 8003290:	9302      	str	r3, [sp, #8]
 8003292:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	4623      	mov	r3, r4
 80032a0:	f005 fad8 	bl	8008854 <USB_HC_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd90      	pop	{r4, r7, pc}

080032ba <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	460b      	mov	r3, r1
 80032c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_HCD_HC_Halt+0x1e>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e00f      	b.n	80032f8 <HAL_HCD_HC_Halt+0x3e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f005 fe6a 	bl	8008fc2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	4608      	mov	r0, r1
 800330a:	4611      	mov	r1, r2
 800330c:	461a      	mov	r2, r3
 800330e:	4603      	mov	r3, r0
 8003310:	70fb      	strb	r3, [r7, #3]
 8003312:	460b      	mov	r3, r1
 8003314:	70bb      	strb	r3, [r7, #2]
 8003316:	4613      	mov	r3, r2
 8003318:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	3317      	adds	r3, #23
 800332a:	78ba      	ldrb	r2, [r7, #2]
 800332c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	3326      	adds	r3, #38	@ 0x26
 800333e:	787a      	ldrb	r2, [r7, #1]
 8003340:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003342:	7c3b      	ldrb	r3, [r7, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d114      	bne.n	8003372 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	332a      	adds	r3, #42	@ 0x2a
 8003358:	2203      	movs	r2, #3
 800335a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3319      	adds	r3, #25
 800336c:	7f3a      	ldrb	r2, [r7, #28]
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	e009      	b.n	8003386 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	332a      	adds	r3, #42	@ 0x2a
 8003382:	2202      	movs	r2, #2
 8003384:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003386:	787b      	ldrb	r3, [r7, #1]
 8003388:	2b03      	cmp	r3, #3
 800338a:	f200 8102 	bhi.w	8003592 <HAL_HCD_HC_SubmitRequest+0x292>
 800338e:	a201      	add	r2, pc, #4	@ (adr r2, 8003394 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033a5 	.word	0x080033a5
 8003398:	0800357d 	.word	0x0800357d
 800339c:	08003469 	.word	0x08003469
 80033a0:	080034f3 	.word	0x080034f3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80033a4:	7c3b      	ldrb	r3, [r7, #16]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	f040 80f5 	bne.w	8003596 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80033ac:	78bb      	ldrb	r3, [r7, #2]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d12d      	bne.n	800340e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80033b2:	8b3b      	ldrh	r3, [r7, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d109      	bne.n	80033cc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	333d      	adds	r3, #61	@ 0x3d
 80033c8:	2201      	movs	r2, #1
 80033ca:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	333d      	adds	r3, #61	@ 0x3d
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	332a      	adds	r3, #42	@ 0x2a
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80033f6:	e0ce      	b.n	8003596 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	332a      	adds	r3, #42	@ 0x2a
 8003408:	2202      	movs	r2, #2
 800340a:	701a      	strb	r2, [r3, #0]
      break;
 800340c:	e0c3      	b.n	8003596 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	331a      	adds	r3, #26
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	f040 80b8 	bne.w	8003596 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	333c      	adds	r3, #60	@ 0x3c
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10a      	bne.n	8003452 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	332a      	adds	r3, #42	@ 0x2a
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
      break;
 8003450:	e0a1      	b.n	8003596 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	332a      	adds	r3, #42	@ 0x2a
 8003462:	2202      	movs	r2, #2
 8003464:	701a      	strb	r2, [r3, #0]
      break;
 8003466:	e096      	b.n	8003596 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003468:	78bb      	ldrb	r3, [r7, #2]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d120      	bne.n	80034b0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	333d      	adds	r3, #61	@ 0x3d
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	332a      	adds	r3, #42	@ 0x2a
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003498:	e07e      	b.n	8003598 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	332a      	adds	r3, #42	@ 0x2a
 80034aa:	2202      	movs	r2, #2
 80034ac:	701a      	strb	r2, [r3, #0]
      break;
 80034ae:	e073      	b.n	8003598 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	333c      	adds	r3, #60	@ 0x3c
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	332a      	adds	r3, #42	@ 0x2a
 80034d6:	2200      	movs	r2, #0
 80034d8:	701a      	strb	r2, [r3, #0]
      break;
 80034da:	e05d      	b.n	8003598 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	332a      	adds	r3, #42	@ 0x2a
 80034ec:	2202      	movs	r2, #2
 80034ee:	701a      	strb	r2, [r3, #0]
      break;
 80034f0:	e052      	b.n	8003598 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80034f2:	78bb      	ldrb	r3, [r7, #2]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d120      	bne.n	800353a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	333d      	adds	r3, #61	@ 0x3d
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10a      	bne.n	8003524 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	332a      	adds	r3, #42	@ 0x2a
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003522:	e039      	b.n	8003598 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	332a      	adds	r3, #42	@ 0x2a
 8003534:	2202      	movs	r2, #2
 8003536:	701a      	strb	r2, [r3, #0]
      break;
 8003538:	e02e      	b.n	8003598 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	333c      	adds	r3, #60	@ 0x3c
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10a      	bne.n	8003566 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	332a      	adds	r3, #42	@ 0x2a
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
      break;
 8003564:	e018      	b.n	8003598 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	332a      	adds	r3, #42	@ 0x2a
 8003576:	2202      	movs	r2, #2
 8003578:	701a      	strb	r2, [r3, #0]
      break;
 800357a:	e00d      	b.n	8003598 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	332a      	adds	r3, #42	@ 0x2a
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
      break;
 8003590:	e002      	b.n	8003598 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003596:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	332c      	adds	r3, #44	@ 0x2c
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	8b39      	ldrh	r1, [r7, #24]
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4403      	add	r3, r0
 80035bc:	3334      	adds	r3, #52	@ 0x34
 80035be:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80035c0:	78fa      	ldrb	r2, [r7, #3]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	334c      	adds	r3, #76	@ 0x4c
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	3338      	adds	r3, #56	@ 0x38
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	3315      	adds	r3, #21
 80035f8:	78fa      	ldrb	r2, [r7, #3]
 80035fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	334d      	adds	r3, #77	@ 0x4d
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	3310      	adds	r3, #16
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4413      	add	r3, r2
 8003624:	1d19      	adds	r1, r3, #4
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	799b      	ldrb	r3, [r3, #6]
 800362a:	461a      	mov	r2, r3
 800362c:	f005 fa3e 	bl	8008aac <USB_HC_StartXfer>
 8003630:	4603      	mov	r3, r0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop

0800363c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f004 ff32 	bl	80084bc <USB_GetMode>
 8003658:	4603      	mov	r3, r0
 800365a:	2b01      	cmp	r3, #1
 800365c:	f040 80fb 	bne.w	8003856 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f004 fef5 	bl	8008454 <USB_ReadInterrupts>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80f1 	beq.w	8003854 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f004 feec 	bl	8008454 <USB_ReadInterrupts>
 800367c:	4603      	mov	r3, r0
 800367e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003682:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003686:	d104      	bne.n	8003692 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003690:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f004 fedc 	bl	8008454 <USB_ReadInterrupts>
 800369c:	4603      	mov	r3, r0
 800369e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036a6:	d104      	bne.n	80036b2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80036b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f004 fecc 	bl	8008454 <USB_ReadInterrupts>
 80036bc:	4603      	mov	r3, r0
 80036be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036c6:	d104      	bne.n	80036d2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80036d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f004 febc 	bl	8008454 <USB_ReadInterrupts>
 80036dc:	4603      	mov	r3, r0
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d103      	bne.n	80036ee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2202      	movs	r2, #2
 80036ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f004 feae 	bl	8008454 <USB_ReadInterrupts>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003702:	d120      	bne.n	8003746 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800370c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d113      	bne.n	8003746 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800371e:	2110      	movs	r1, #16
 8003720:	6938      	ldr	r0, [r7, #16]
 8003722:	f004 fda1 	bl	8008268 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003726:	6938      	ldr	r0, [r7, #16]
 8003728:	f004 fdd0 	bl	80082cc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7a5b      	ldrb	r3, [r3, #9]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d105      	bne.n	8003740 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2101      	movs	r1, #1
 800373a:	4618      	mov	r0, r3
 800373c:	f004 ffc2 	bl	80086c4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f00c fbf5 	bl	800ff30 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f004 fe82 	bl	8008454 <USB_ReadInterrupts>
 8003750:	4603      	mov	r3, r0
 8003752:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003756:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800375a:	d102      	bne.n	8003762 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f001 fd4d 	bl	80051fc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f004 fe74 	bl	8008454 <USB_ReadInterrupts>
 800376c:	4603      	mov	r3, r0
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	d106      	bne.n	8003784 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f00c fbbe 	bl	800fef8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2208      	movs	r2, #8
 8003782:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f004 fe63 	bl	8008454 <USB_ReadInterrupts>
 800378e:	4603      	mov	r3, r0
 8003790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003794:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003798:	d139      	bne.n	800380e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f005 fbfe 	bl	8008fa0 <USB_HC_ReadInterrupt>
 80037a4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	e025      	b.n	80037f8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d018      	beq.n	80037f2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037d6:	d106      	bne.n	80037e6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	4619      	mov	r1, r3
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f905 	bl	80039ee <HCD_HC_IN_IRQHandler>
 80037e4:	e005      	b.n	80037f2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	4619      	mov	r1, r3
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 ff67 	bl	80046c0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	3301      	adds	r3, #1
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	795b      	ldrb	r3, [r3, #5]
 80037fc:	461a      	mov	r2, r3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	4293      	cmp	r3, r2
 8003802:	d3d3      	bcc.n	80037ac <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800380c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f004 fe1e 	bl	8008454 <USB_ReadInterrupts>
 8003818:	4603      	mov	r3, r0
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b10      	cmp	r3, #16
 8003820:	d101      	bne.n	8003826 <HAL_HCD_IRQHandler+0x1ea>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <HAL_HCD_IRQHandler+0x1ec>
 8003826:	2300      	movs	r3, #0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d014      	beq.n	8003856 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0210 	bic.w	r2, r2, #16
 800383a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f001 fbfe 	bl	800503e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699a      	ldr	r2, [r3, #24]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0210 	orr.w	r2, r2, #16
 8003850:	619a      	str	r2, [r3, #24]
 8003852:	e000      	b.n	8003856 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003854:	bf00      	nop
    }
  }
}
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_HCD_Start+0x16>
 800386e:	2302      	movs	r3, #2
 8003870:	e013      	b.n	800389a <HAL_HCD_Start+0x3e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2101      	movs	r1, #1
 8003880:	4618      	mov	r0, r3
 8003882:	f004 ff86 	bl	8008792 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f004 fc7e 	bl	800818c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_HCD_Stop+0x16>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e00d      	b.n	80038d4 <HAL_HCD_Stop+0x32>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f005 fcd9 	bl	800927c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f004 ff28 	bl	800873e <USB_ResetPort>
 80038ee:	4603      	mov	r3, r0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	334c      	adds	r3, #76	@ 0x4c
 8003914:	781b      	ldrb	r3, [r3, #0]
}
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3338      	adds	r3, #56	@ 0x38
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f004 ff6a 	bl	8008832 <USB_GetCurrentFrame>
 800395e:	4603      	mov	r3, r0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f004 ff45 	bl	8008804 <USB_GetHostSpeed>
 800397a:	4603      	mov	r3, r0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	331a      	adds	r3, #26
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	331b      	adds	r3, #27
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	3325      	adds	r3, #37	@ 0x25
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	3324      	adds	r3, #36	@ 0x24
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	460b      	mov	r3, r1
 80039f8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f004 fd34 	bl	800847a <USB_ReadChInterrupts>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d11a      	bne.n	8003a52 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	334d      	adds	r3, #77	@ 0x4d
 8003a3e:	2207      	movs	r2, #7
 8003a40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f005 fab9 	bl	8008fc2 <USB_HC_Halt>
 8003a50:	e09e      	b.n	8003b90 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	4611      	mov	r1, r2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f004 fd0d 	bl	800847a <USB_ReadChInterrupts>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a6a:	d11b      	bne.n	8003aa4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	334d      	adds	r3, #77	@ 0x4d
 8003a90:	2208      	movs	r2, #8
 8003a92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f005 fa90 	bl	8008fc2 <USB_HC_Halt>
 8003aa2:	e075      	b.n	8003b90 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f004 fce4 	bl	800847a <USB_ReadChInterrupts>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d11a      	bne.n	8003af2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2308      	movs	r3, #8
 8003acc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003ace:	78fa      	ldrb	r2, [r7, #3]
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	1a9b      	subs	r3, r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	334d      	adds	r3, #77	@ 0x4d
 8003ade:	2206      	movs	r2, #6
 8003ae0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f005 fa69 	bl	8008fc2 <USB_HC_Halt>
 8003af0:	e04e      	b.n	8003b90 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f004 fcbd 	bl	800847a <USB_ReadChInterrupts>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b0a:	d11b      	bne.n	8003b44 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	334d      	adds	r3, #77	@ 0x4d
 8003b30:	2209      	movs	r2, #9
 8003b32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f005 fa40 	bl	8008fc2 <USB_HC_Halt>
 8003b42:	e025      	b.n	8003b90 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f004 fc94 	bl	800847a <USB_ReadChInterrupts>
 8003b52:	4603      	mov	r3, r0
 8003b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b58:	2b80      	cmp	r3, #128	@ 0x80
 8003b5a:	d119      	bne.n	8003b90 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2380      	movs	r3, #128	@ 0x80
 8003b6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	334d      	adds	r3, #77	@ 0x4d
 8003b7e:	2207      	movs	r2, #7
 8003b80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f005 fa19 	bl	8008fc2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	4611      	mov	r1, r2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f004 fc6e 	bl	800847a <USB_ReadChInterrupts>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba8:	d112      	bne.n	8003bd0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f005 fa05 	bl	8008fc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bca:	6093      	str	r3, [r2, #8]
 8003bcc:	f000 bd75 	b.w	80046ba <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f004 fc4e 	bl	800847a <USB_ReadChInterrupts>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	f040 8128 	bne.w	8003e3a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	331b      	adds	r3, #27
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d119      	bne.n	8003c46 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	331b      	adds	r3, #27
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c26:	78fb      	ldrb	r3, [r7, #3]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	0151      	lsls	r1, r2, #5
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	440a      	add	r2, r1
 8003c3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c44:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	799b      	ldrb	r3, [r3, #6]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01b      	beq.n	8003c86 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	3330      	adds	r3, #48	@ 0x30
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	1ac9      	subs	r1, r1, r3
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4403      	add	r3, r0
 8003c82:	3338      	adds	r3, #56	@ 0x38
 8003c84:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003c86:	78fa      	ldrb	r2, [r7, #3]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	334d      	adds	r3, #77	@ 0x4d
 8003c96:	2201      	movs	r2, #1
 8003c98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	3344      	adds	r3, #68	@ 0x44
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	3326      	adds	r3, #38	@ 0x26
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003cd6:	78fa      	ldrb	r2, [r7, #3]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	3326      	adds	r3, #38	@ 0x26
 8003ce6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d110      	bne.n	8003d0e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f005 f964 	bl	8008fc2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d06:	461a      	mov	r2, r3
 8003d08:	2310      	movs	r3, #16
 8003d0a:	6093      	str	r3, [r2, #8]
 8003d0c:	e03d      	b.n	8003d8a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003d0e:	78fa      	ldrb	r2, [r7, #3]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	3326      	adds	r3, #38	@ 0x26
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d00a      	beq.n	8003d3a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	3326      	adds	r3, #38	@ 0x26
 8003d34:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d127      	bne.n	8003d8a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d58:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d5a:	78fa      	ldrb	r2, [r7, #3]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	334c      	adds	r3, #76	@ 0x4c
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	334c      	adds	r3, #76	@ 0x4c
 8003d7e:	781a      	ldrb	r2, [r3, #0]
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	4619      	mov	r1, r3
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f00c f8e1 	bl	800ff4c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	799b      	ldrb	r3, [r3, #6]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d13b      	bne.n	8003e0a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3338      	adds	r3, #56	@ 0x38
 8003da2:	6819      	ldr	r1, [r3, #0]
 8003da4:	78fa      	ldrb	r2, [r7, #3]
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4403      	add	r3, r0
 8003db2:	3328      	adds	r3, #40	@ 0x28
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	440b      	add	r3, r1
 8003db8:	1e59      	subs	r1, r3, #1
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4403      	add	r3, r0
 8003dc8:	3328      	adds	r3, #40	@ 0x28
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8470 	beq.w	80046ba <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	333c      	adds	r3, #60	@ 0x3c
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	78fa      	ldrb	r2, [r7, #3]
 8003dee:	f083 0301 	eor.w	r3, r3, #1
 8003df2:	b2d8      	uxtb	r0, r3
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	333c      	adds	r3, #60	@ 0x3c
 8003e02:	4602      	mov	r2, r0
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	f000 bc58 	b.w	80046ba <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	333c      	adds	r3, #60	@ 0x3c
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	f083 0301 	eor.w	r3, r3, #1
 8003e22:	b2d8      	uxtb	r0, r3
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	333c      	adds	r3, #60	@ 0x3c
 8003e32:	4602      	mov	r2, r0
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	f000 bc40 	b.w	80046ba <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	4611      	mov	r1, r2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f004 fb19 	bl	800847a <USB_ReadChInterrupts>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d131      	bne.n	8003eb6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e5e:	461a      	mov	r2, r3
 8003e60:	2320      	movs	r3, #32
 8003e62:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003e64:	78fa      	ldrb	r2, [r7, #3]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	331a      	adds	r3, #26
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	f040 841f 	bne.w	80046ba <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003e7c:	78fa      	ldrb	r2, [r7, #3]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	331b      	adds	r3, #27
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	334d      	adds	r3, #77	@ 0x4d
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f005 f888 	bl	8008fc2 <USB_HC_Halt>
 8003eb2:	f000 bc02 	b.w	80046ba <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f004 fadb 	bl	800847a <USB_ReadChInterrupts>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	f040 8305 	bne.w	80044da <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003edc:	461a      	mov	r2, r3
 8003ede:	2302      	movs	r3, #2
 8003ee0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	334d      	adds	r3, #77	@ 0x4d
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d114      	bne.n	8003f22 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	334d      	adds	r3, #77	@ 0x4d
 8003f08:	2202      	movs	r2, #2
 8003f0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	334c      	adds	r3, #76	@ 0x4c
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	e2cc      	b.n	80044bc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	334d      	adds	r3, #77	@ 0x4d
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b06      	cmp	r3, #6
 8003f36:	d114      	bne.n	8003f62 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	334d      	adds	r3, #77	@ 0x4d
 8003f48:	2202      	movs	r2, #2
 8003f4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003f4c:	78fa      	ldrb	r2, [r7, #3]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	334c      	adds	r3, #76	@ 0x4c
 8003f5c:	2205      	movs	r2, #5
 8003f5e:	701a      	strb	r2, [r3, #0]
 8003f60:	e2ac      	b.n	80044bc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	334d      	adds	r3, #77	@ 0x4d
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b07      	cmp	r3, #7
 8003f76:	d00b      	beq.n	8003f90 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	334d      	adds	r3, #77	@ 0x4d
 8003f88:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f8a:	2b09      	cmp	r3, #9
 8003f8c:	f040 80a6 	bne.w	80040dc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f90:	78fa      	ldrb	r2, [r7, #3]
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	334d      	adds	r3, #77	@ 0x4d
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	3344      	adds	r3, #68	@ 0x44
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	1c59      	adds	r1, r3, #1
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4403      	add	r3, r0
 8003fc4:	3344      	adds	r3, #68	@ 0x44
 8003fc6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fc8:	78fa      	ldrb	r2, [r7, #3]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	3344      	adds	r3, #68	@ 0x44
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d943      	bls.n	8004066 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003fde:	78fa      	ldrb	r2, [r7, #3]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	3344      	adds	r3, #68	@ 0x44
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	1a9b      	subs	r3, r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	331a      	adds	r3, #26
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d123      	bne.n	8004050 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004008:	78fa      	ldrb	r2, [r7, #3]
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	1a9b      	subs	r3, r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	331b      	adds	r3, #27
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800401c:	78fa      	ldrb	r2, [r7, #3]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	331c      	adds	r3, #28
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	4413      	add	r3, r2
 8004038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	440a      	add	r2, r1
 8004046:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800404a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800404e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	334c      	adds	r3, #76	@ 0x4c
 8004060:	2204      	movs	r2, #4
 8004062:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004064:	e229      	b.n	80044ba <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004066:	78fa      	ldrb	r2, [r7, #3]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	334c      	adds	r3, #76	@ 0x4c
 8004076:	2202      	movs	r2, #2
 8004078:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	3326      	adds	r3, #38	@ 0x26
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00b      	beq.n	80040a8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004090:	78fa      	ldrb	r2, [r7, #3]
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	3326      	adds	r3, #38	@ 0x26
 80040a0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	f040 8209 	bne.w	80044ba <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040be:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040c6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d4:	461a      	mov	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040da:	e1ee      	b.n	80044ba <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	334d      	adds	r3, #77	@ 0x4d
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	f040 80c8 	bne.w	8004284 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	334d      	adds	r3, #77	@ 0x4d
 8004104:	2202      	movs	r2, #2
 8004106:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004108:	78fa      	ldrb	r2, [r7, #3]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	331b      	adds	r3, #27
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b01      	cmp	r3, #1
 800411c:	f040 81ce 	bne.w	80044bc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	3326      	adds	r3, #38	@ 0x26
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b03      	cmp	r3, #3
 8004134:	d16b      	bne.n	800420e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	440b      	add	r3, r1
 8004144:	3348      	adds	r3, #72	@ 0x48
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	1c59      	adds	r1, r3, #1
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4403      	add	r3, r0
 8004156:	3348      	adds	r3, #72	@ 0x48
 8004158:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	3348      	adds	r3, #72	@ 0x48
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d943      	bls.n	80041f8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	3348      	adds	r3, #72	@ 0x48
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	331b      	adds	r3, #27
 8004194:	2200      	movs	r2, #0
 8004196:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	3344      	adds	r3, #68	@ 0x44
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d809      	bhi.n	80041c2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	331c      	adds	r3, #28
 80041be:	2201      	movs	r2, #1
 80041c0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	78fa      	ldrb	r2, [r7, #3]
 80041d2:	0151      	lsls	r1, r2, #5
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	440a      	add	r2, r1
 80041d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041e0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80041e2:	78fa      	ldrb	r2, [r7, #3]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	334c      	adds	r3, #76	@ 0x4c
 80041f2:	2204      	movs	r2, #4
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	e014      	b.n	8004222 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041f8:	78fa      	ldrb	r2, [r7, #3]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	334c      	adds	r3, #76	@ 0x4c
 8004208:	2202      	movs	r2, #2
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	e009      	b.n	8004222 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	334c      	adds	r3, #76	@ 0x4c
 800421e:	2202      	movs	r2, #2
 8004220:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004222:	78fa      	ldrb	r2, [r7, #3]
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	3326      	adds	r3, #38	@ 0x26
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004238:	78fa      	ldrb	r2, [r7, #3]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	3326      	adds	r3, #38	@ 0x26
 8004248:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800424a:	2b02      	cmp	r3, #2
 800424c:	f040 8136 	bne.w	80044bc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4413      	add	r3, r2
 8004258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004266:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800426e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800427c:	461a      	mov	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e11b      	b.n	80044bc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	334d      	adds	r3, #77	@ 0x4d
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b03      	cmp	r3, #3
 8004298:	f040 8081 	bne.w	800439e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	334d      	adds	r3, #77	@ 0x4d
 80042ac:	2202      	movs	r2, #2
 80042ae:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042b0:	78fa      	ldrb	r2, [r7, #3]
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	331b      	adds	r3, #27
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	f040 80fa 	bne.w	80044bc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042c8:	78fa      	ldrb	r2, [r7, #3]
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	334c      	adds	r3, #76	@ 0x4c
 80042d8:	2202      	movs	r2, #2
 80042da:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	0151      	lsls	r1, r2, #5
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	440a      	add	r2, r1
 80042f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042fa:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	440a      	add	r2, r1
 8004312:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800431a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4413      	add	r3, r2
 8004324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	78fa      	ldrb	r2, [r7, #3]
 800432c:	0151      	lsls	r1, r2, #5
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	440a      	add	r2, r1
 8004332:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004336:	f023 0320 	bic.w	r3, r3, #32
 800433a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800433c:	78fa      	ldrb	r2, [r7, #3]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	3326      	adds	r3, #38	@ 0x26
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004352:	78fa      	ldrb	r2, [r7, #3]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	3326      	adds	r3, #38	@ 0x26
 8004362:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004364:	2b02      	cmp	r3, #2
 8004366:	f040 80a9 	bne.w	80044bc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800436a:	78fb      	ldrb	r3, [r7, #3]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4413      	add	r3, r2
 8004372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004380:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004388:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4413      	add	r3, r2
 8004392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004396:	461a      	mov	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	e08e      	b.n	80044bc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	334d      	adds	r3, #77	@ 0x4d
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d143      	bne.n	800443c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043b4:	78fa      	ldrb	r2, [r7, #3]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	334d      	adds	r3, #77	@ 0x4d
 80043c4:	2202      	movs	r2, #2
 80043c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	334c      	adds	r3, #76	@ 0x4c
 80043d8:	2202      	movs	r2, #2
 80043da:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	3326      	adds	r3, #38	@ 0x26
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	3326      	adds	r3, #38	@ 0x26
 8004402:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004404:	2b02      	cmp	r3, #2
 8004406:	d159      	bne.n	80044bc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4413      	add	r3, r2
 8004410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800441e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004426:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004434:	461a      	mov	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e03f      	b.n	80044bc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800443c:	78fa      	ldrb	r2, [r7, #3]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	334d      	adds	r3, #77	@ 0x4d
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b08      	cmp	r3, #8
 8004450:	d126      	bne.n	80044a0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004452:	78fa      	ldrb	r2, [r7, #3]
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	334d      	adds	r3, #77	@ 0x4d
 8004462:	2202      	movs	r2, #2
 8004464:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	3344      	adds	r3, #68	@ 0x44
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	1c59      	adds	r1, r3, #1
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4403      	add	r3, r0
 8004486:	3344      	adds	r3, #68	@ 0x44
 8004488:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	334c      	adds	r3, #76	@ 0x4c
 800449a:	2204      	movs	r2, #4
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	e00d      	b.n	80044bc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80044a0:	78fa      	ldrb	r2, [r7, #3]
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	334d      	adds	r3, #77	@ 0x4d
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	f000 8100 	beq.w	80046b8 <HCD_HC_IN_IRQHandler+0xcca>
 80044b8:	e000      	b.n	80044bc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044ba:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	334c      	adds	r3, #76	@ 0x4c
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	4619      	mov	r1, r3
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f00b fd3a 	bl	800ff4c <HAL_HCD_HC_NotifyURBChange_Callback>
 80044d8:	e0ef      	b.n	80046ba <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	4611      	mov	r1, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f003 ffc9 	bl	800847a <USB_ReadChInterrupts>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ee:	2b40      	cmp	r3, #64	@ 0x40
 80044f0:	d12f      	bne.n	8004552 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044fe:	461a      	mov	r2, r3
 8004500:	2340      	movs	r3, #64	@ 0x40
 8004502:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	334d      	adds	r3, #77	@ 0x4d
 8004514:	2205      	movs	r2, #5
 8004516:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004518:	78fa      	ldrb	r2, [r7, #3]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	331a      	adds	r3, #26
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	3344      	adds	r3, #68	@ 0x44
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f004 fd39 	bl	8008fc2 <USB_HC_Halt>
 8004550:	e0b3      	b.n	80046ba <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f003 ff8d 	bl	800847a <USB_ReadChInterrupts>
 8004560:	4603      	mov	r3, r0
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b10      	cmp	r3, #16
 8004568:	f040 80a7 	bne.w	80046ba <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	3326      	adds	r3, #38	@ 0x26
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b03      	cmp	r3, #3
 8004580:	d11b      	bne.n	80045ba <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004582:	78fa      	ldrb	r2, [r7, #3]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	3344      	adds	r3, #68	@ 0x44
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	334d      	adds	r3, #77	@ 0x4d
 80045a6:	2204      	movs	r2, #4
 80045a8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	78fa      	ldrb	r2, [r7, #3]
 80045b0:	4611      	mov	r1, r2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f004 fd05 	bl	8008fc2 <USB_HC_Halt>
 80045b8:	e03f      	b.n	800463a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	3326      	adds	r3, #38	@ 0x26
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	3326      	adds	r3, #38	@ 0x26
 80045e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d129      	bne.n	800463a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	3344      	adds	r3, #68	@ 0x44
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	799b      	ldrb	r3, [r3, #6]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HCD_HC_IN_IRQHandler+0xc2a>
 8004602:	78fa      	ldrb	r2, [r7, #3]
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	331b      	adds	r3, #27
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d110      	bne.n	800463a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004618:	78fa      	ldrb	r2, [r7, #3]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	334d      	adds	r3, #77	@ 0x4d
 8004628:	2204      	movs	r2, #4
 800462a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f004 fcc4 	bl	8008fc2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	331b      	adds	r3, #27
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d129      	bne.n	80046a4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	331b      	adds	r3, #27
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	4413      	add	r3, r2
 800466c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	0151      	lsls	r1, r2, #5
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	440a      	add	r2, r1
 800467a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800467e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004682:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	4413      	add	r3, r2
 800468c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	78fa      	ldrb	r2, [r7, #3]
 8004694:	0151      	lsls	r1, r2, #5
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	440a      	add	r2, r1
 800469a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800469e:	f043 0320 	orr.w	r3, r3, #32
 80046a2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b0:	461a      	mov	r2, r3
 80046b2:	2310      	movs	r3, #16
 80046b4:	6093      	str	r3, [r2, #8]
 80046b6:	e000      	b.n	80046ba <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80046b8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f003 fecb 	bl	800847a <USB_ReadChInterrupts>
 80046e4:	4603      	mov	r3, r0
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d11b      	bne.n	8004726 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046fa:	461a      	mov	r2, r3
 80046fc:	2304      	movs	r3, #4
 80046fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	334d      	adds	r3, #77	@ 0x4d
 8004710:	2207      	movs	r2, #7
 8004712:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	78fa      	ldrb	r2, [r7, #3]
 800471a:	4611      	mov	r1, r2
 800471c:	4618      	mov	r0, r3
 800471e:	f004 fc50 	bl	8008fc2 <USB_HC_Halt>
 8004722:	f000 bc89 	b.w	8005038 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	78fa      	ldrb	r2, [r7, #3]
 800472c:	4611      	mov	r1, r2
 800472e:	4618      	mov	r0, r3
 8004730:	f003 fea3 	bl	800847a <USB_ReadChInterrupts>
 8004734:	4603      	mov	r3, r0
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b20      	cmp	r3, #32
 800473c:	f040 8082 	bne.w	8004844 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4413      	add	r3, r2
 8004748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800474c:	461a      	mov	r2, r3
 800474e:	2320      	movs	r3, #32
 8004750:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	3319      	adds	r3, #25
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d124      	bne.n	80047b2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004768:	78fa      	ldrb	r2, [r7, #3]
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	3319      	adds	r3, #25
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800477c:	78fa      	ldrb	r2, [r7, #3]
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	334c      	adds	r3, #76	@ 0x4c
 800478c:	2202      	movs	r2, #2
 800478e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	334d      	adds	r3, #77	@ 0x4d
 80047a0:	2203      	movs	r2, #3
 80047a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	4611      	mov	r1, r2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f004 fc08 	bl	8008fc2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80047b2:	78fa      	ldrb	r2, [r7, #3]
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	1a9b      	subs	r3, r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	331a      	adds	r3, #26
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	f040 8437 	bne.w	8005038 <HCD_HC_OUT_IRQHandler+0x978>
 80047ca:	78fa      	ldrb	r2, [r7, #3]
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	331b      	adds	r3, #27
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f040 842b 	bne.w	8005038 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	3326      	adds	r3, #38	@ 0x26
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d009      	beq.n	800480c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	331b      	adds	r3, #27
 8004808:	2201      	movs	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	334d      	adds	r3, #77	@ 0x4d
 800481c:	2203      	movs	r2, #3
 800481e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	78fa      	ldrb	r2, [r7, #3]
 8004826:	4611      	mov	r1, r2
 8004828:	4618      	mov	r0, r3
 800482a:	f004 fbca 	bl	8008fc2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800482e:	78fa      	ldrb	r2, [r7, #3]
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	440b      	add	r3, r1
 800483c:	3344      	adds	r3, #68	@ 0x44
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	e3f9      	b.n	8005038 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	4611      	mov	r1, r2
 800484c:	4618      	mov	r0, r3
 800484e:	f003 fe14 	bl	800847a <USB_ReadChInterrupts>
 8004852:	4603      	mov	r3, r0
 8004854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800485c:	d111      	bne.n	8004882 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800485e:	78fb      	ldrb	r3, [r7, #3]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4413      	add	r3, r2
 8004866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800486a:	461a      	mov	r2, r3
 800486c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004870:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	78fa      	ldrb	r2, [r7, #3]
 8004878:	4611      	mov	r1, r2
 800487a:	4618      	mov	r0, r3
 800487c:	f004 fba1 	bl	8008fc2 <USB_HC_Halt>
 8004880:	e3da      	b.n	8005038 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	78fa      	ldrb	r2, [r7, #3]
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f003 fdf5 	bl	800847a <USB_ReadChInterrupts>
 8004890:	4603      	mov	r3, r0
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b01      	cmp	r3, #1
 8004898:	d168      	bne.n	800496c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800489a:	78fa      	ldrb	r2, [r7, #3]
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	3344      	adds	r3, #68	@ 0x44
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f003 fddf 	bl	800847a <USB_ReadChInterrupts>
 80048bc:	4603      	mov	r3, r0
 80048be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c2:	2b40      	cmp	r3, #64	@ 0x40
 80048c4:	d112      	bne.n	80048ec <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	3319      	adds	r3, #25
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048e6:	461a      	mov	r2, r3
 80048e8:	2340      	movs	r3, #64	@ 0x40
 80048ea:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	1a9b      	subs	r3, r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	331b      	adds	r3, #27
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d019      	beq.n	8004936 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004902:	78fa      	ldrb	r2, [r7, #3]
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	331b      	adds	r3, #27
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	4413      	add	r3, r2
 800491e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	78fa      	ldrb	r2, [r7, #3]
 8004926:	0151      	lsls	r1, r2, #5
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	440a      	add	r2, r1
 800492c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004934:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004936:	78fb      	ldrb	r3, [r7, #3]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4413      	add	r3, r2
 800493e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004942:	461a      	mov	r2, r3
 8004944:	2301      	movs	r3, #1
 8004946:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004948:	78fa      	ldrb	r2, [r7, #3]
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	334d      	adds	r3, #77	@ 0x4d
 8004958:	2201      	movs	r2, #1
 800495a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	78fa      	ldrb	r2, [r7, #3]
 8004962:	4611      	mov	r1, r2
 8004964:	4618      	mov	r0, r3
 8004966:	f004 fb2c 	bl	8008fc2 <USB_HC_Halt>
 800496a:	e365      	b.n	8005038 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	4611      	mov	r1, r2
 8004974:	4618      	mov	r0, r3
 8004976:	f003 fd80 	bl	800847a <USB_ReadChInterrupts>
 800497a:	4603      	mov	r3, r0
 800497c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004980:	2b40      	cmp	r3, #64	@ 0x40
 8004982:	d139      	bne.n	80049f8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	334d      	adds	r3, #77	@ 0x4d
 8004994:	2205      	movs	r2, #5
 8004996:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004998:	78fa      	ldrb	r2, [r7, #3]
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	331a      	adds	r3, #26
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80049ae:	78fa      	ldrb	r2, [r7, #3]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	3319      	adds	r3, #25
 80049be:	2201      	movs	r2, #1
 80049c0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	3344      	adds	r3, #68	@ 0x44
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	4611      	mov	r1, r2
 80049de:	4618      	mov	r0, r3
 80049e0:	f004 faef 	bl	8008fc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049f0:	461a      	mov	r2, r3
 80049f2:	2340      	movs	r3, #64	@ 0x40
 80049f4:	6093      	str	r3, [r2, #8]
 80049f6:	e31f      	b.n	8005038 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	78fa      	ldrb	r2, [r7, #3]
 80049fe:	4611      	mov	r1, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f003 fd3a 	bl	800847a <USB_ReadChInterrupts>
 8004a06:	4603      	mov	r3, r0
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d11a      	bne.n	8004a46 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	2308      	movs	r3, #8
 8004a20:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004a22:	78fa      	ldrb	r2, [r7, #3]
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	334d      	adds	r3, #77	@ 0x4d
 8004a32:	2206      	movs	r2, #6
 8004a34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f004 fabf 	bl	8008fc2 <USB_HC_Halt>
 8004a44:	e2f8      	b.n	8005038 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	78fa      	ldrb	r2, [r7, #3]
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f003 fd13 	bl	800847a <USB_ReadChInterrupts>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d144      	bne.n	8004ae8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004a5e:	78fa      	ldrb	r2, [r7, #3]
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3344      	adds	r3, #68	@ 0x44
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	334d      	adds	r3, #77	@ 0x4d
 8004a82:	2204      	movs	r2, #4
 8004a84:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004a86:	78fa      	ldrb	r2, [r7, #3]
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	3319      	adds	r3, #25
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d114      	bne.n	8004ac6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004a9c:	78fa      	ldrb	r2, [r7, #3]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	3318      	adds	r3, #24
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	3319      	adds	r3, #25
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	78fa      	ldrb	r2, [r7, #3]
 8004acc:	4611      	mov	r1, r2
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f004 fa77 	bl	8008fc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2310      	movs	r3, #16
 8004ae4:	6093      	str	r3, [r2, #8]
 8004ae6:	e2a7      	b.n	8005038 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	78fa      	ldrb	r2, [r7, #3]
 8004aee:	4611      	mov	r1, r2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f003 fcc2 	bl	800847a <USB_ReadChInterrupts>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afc:	2b80      	cmp	r3, #128	@ 0x80
 8004afe:	f040 8083 	bne.w	8004c08 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	799b      	ldrb	r3, [r3, #6]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d111      	bne.n	8004b2e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004b0a:	78fa      	ldrb	r2, [r7, #3]
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	1a9b      	subs	r3, r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	334d      	adds	r3, #77	@ 0x4d
 8004b1a:	2207      	movs	r2, #7
 8004b1c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	78fa      	ldrb	r2, [r7, #3]
 8004b24:	4611      	mov	r1, r2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f004 fa4b 	bl	8008fc2 <USB_HC_Halt>
 8004b2c:	e062      	b.n	8004bf4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004b2e:	78fa      	ldrb	r2, [r7, #3]
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	3344      	adds	r3, #68	@ 0x44
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	1c59      	adds	r1, r3, #1
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4403      	add	r3, r0
 8004b4e:	3344      	adds	r3, #68	@ 0x44
 8004b50:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b52:	78fa      	ldrb	r2, [r7, #3]
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	4613      	mov	r3, r2
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	3344      	adds	r3, #68	@ 0x44
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d922      	bls.n	8004bae <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	3344      	adds	r3, #68	@ 0x44
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b7c:	78fa      	ldrb	r2, [r7, #3]
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	334c      	adds	r3, #76	@ 0x4c
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b90:	78fa      	ldrb	r2, [r7, #3]
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	334c      	adds	r3, #76	@ 0x4c
 8004ba0:	781a      	ldrb	r2, [r3, #0]
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f00b f9d0 	bl	800ff4c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004bac:	e022      	b.n	8004bf4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	334c      	adds	r3, #76	@ 0x4c
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bd8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004be0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bee:	461a      	mov	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c00:	461a      	mov	r2, r3
 8004c02:	2380      	movs	r3, #128	@ 0x80
 8004c04:	6093      	str	r3, [r2, #8]
 8004c06:	e217      	b.n	8005038 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	78fa      	ldrb	r2, [r7, #3]
 8004c0e:	4611      	mov	r1, r2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f003 fc32 	bl	800847a <USB_ReadChInterrupts>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c20:	d11b      	bne.n	8004c5a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	334d      	adds	r3, #77	@ 0x4d
 8004c32:	2209      	movs	r2, #9
 8004c34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	78fa      	ldrb	r2, [r7, #3]
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f004 f9bf 	bl	8008fc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c50:	461a      	mov	r2, r3
 8004c52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c56:	6093      	str	r3, [r2, #8]
 8004c58:	e1ee      	b.n	8005038 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f003 fc09 	bl	800847a <USB_ReadChInterrupts>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	f040 81df 	bne.w	8005032 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c80:	461a      	mov	r2, r3
 8004c82:	2302      	movs	r3, #2
 8004c84:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004c86:	78fa      	ldrb	r2, [r7, #3]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	1a9b      	subs	r3, r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	334d      	adds	r3, #77	@ 0x4d
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	f040 8093 	bne.w	8004dc4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	334d      	adds	r3, #77	@ 0x4d
 8004cae:	2202      	movs	r2, #2
 8004cb0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004cb2:	78fa      	ldrb	r2, [r7, #3]
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	334c      	adds	r3, #76	@ 0x4c
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004cc6:	78fa      	ldrb	r2, [r7, #3]
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3326      	adds	r3, #38	@ 0x26
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d00b      	beq.n	8004cf4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004cdc:	78fa      	ldrb	r2, [r7, #3]
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	3326      	adds	r3, #38	@ 0x26
 8004cec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	f040 8190 	bne.w	8005014 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	799b      	ldrb	r3, [r3, #6]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d115      	bne.n	8004d28 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	333d      	adds	r3, #61	@ 0x3d
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	78fa      	ldrb	r2, [r7, #3]
 8004d10:	f083 0301 	eor.w	r3, r3, #1
 8004d14:	b2d8      	uxtb	r0, r3
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	1a9b      	subs	r3, r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	333d      	adds	r3, #61	@ 0x3d
 8004d24:	4602      	mov	r2, r0
 8004d26:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	799b      	ldrb	r3, [r3, #6]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	f040 8171 	bne.w	8005014 <HCD_HC_OUT_IRQHandler+0x954>
 8004d32:	78fa      	ldrb	r2, [r7, #3]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	3334      	adds	r3, #52	@ 0x34
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8165 	beq.w	8005014 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004d4a:	78fa      	ldrb	r2, [r7, #3]
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	440b      	add	r3, r1
 8004d58:	3334      	adds	r3, #52	@ 0x34
 8004d5a:	6819      	ldr	r1, [r3, #0]
 8004d5c:	78fa      	ldrb	r2, [r7, #3]
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4403      	add	r3, r0
 8004d6a:	3328      	adds	r3, #40	@ 0x28
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	440b      	add	r3, r1
 8004d70:	1e59      	subs	r1, r3, #1
 8004d72:	78fa      	ldrb	r2, [r7, #3]
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4403      	add	r3, r0
 8004d80:	3328      	adds	r3, #40	@ 0x28
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d88:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 813f 	beq.w	8005014 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004d96:	78fa      	ldrb	r2, [r7, #3]
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	333d      	adds	r3, #61	@ 0x3d
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	f083 0301 	eor.w	r3, r3, #1
 8004dae:	b2d8      	uxtb	r0, r3
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	1a9b      	subs	r3, r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	333d      	adds	r3, #61	@ 0x3d
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e127      	b.n	8005014 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004dc4:	78fa      	ldrb	r2, [r7, #3]
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	1a9b      	subs	r3, r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	334d      	adds	r3, #77	@ 0x4d
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d120      	bne.n	8004e1c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004dda:	78fa      	ldrb	r2, [r7, #3]
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	4613      	mov	r3, r2
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	440b      	add	r3, r1
 8004de8:	334d      	adds	r3, #77	@ 0x4d
 8004dea:	2202      	movs	r2, #2
 8004dec:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	331b      	adds	r3, #27
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	f040 8107 	bne.w	8005014 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e06:	78fa      	ldrb	r2, [r7, #3]
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	334c      	adds	r3, #76	@ 0x4c
 8004e16:	2202      	movs	r2, #2
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	e0fb      	b.n	8005014 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004e1c:	78fa      	ldrb	r2, [r7, #3]
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	334d      	adds	r3, #77	@ 0x4d
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d13a      	bne.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	334d      	adds	r3, #77	@ 0x4d
 8004e42:	2202      	movs	r2, #2
 8004e44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	334c      	adds	r3, #76	@ 0x4c
 8004e56:	2202      	movs	r2, #2
 8004e58:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004e5a:	78fa      	ldrb	r2, [r7, #3]
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	331b      	adds	r3, #27
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	f040 80d1 	bne.w	8005014 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004e72:	78fa      	ldrb	r2, [r7, #3]
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	331b      	adds	r3, #27
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ea4:	6053      	str	r3, [r2, #4]
 8004ea6:	e0b5      	b.n	8005014 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	334d      	adds	r3, #77	@ 0x4d
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b05      	cmp	r3, #5
 8004ebc:	d114      	bne.n	8004ee8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ebe:	78fa      	ldrb	r2, [r7, #3]
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	334d      	adds	r3, #77	@ 0x4d
 8004ece:	2202      	movs	r2, #2
 8004ed0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004ed2:	78fa      	ldrb	r2, [r7, #3]
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	334c      	adds	r3, #76	@ 0x4c
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	e095      	b.n	8005014 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004ee8:	78fa      	ldrb	r2, [r7, #3]
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	1a9b      	subs	r3, r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	334d      	adds	r3, #77	@ 0x4d
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b06      	cmp	r3, #6
 8004efc:	d114      	bne.n	8004f28 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004efe:	78fa      	ldrb	r2, [r7, #3]
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	334d      	adds	r3, #77	@ 0x4d
 8004f0e:	2202      	movs	r2, #2
 8004f10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004f12:	78fa      	ldrb	r2, [r7, #3]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	334c      	adds	r3, #76	@ 0x4c
 8004f22:	2205      	movs	r2, #5
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	e075      	b.n	8005014 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	334d      	adds	r3, #77	@ 0x4d
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b07      	cmp	r3, #7
 8004f3c:	d00a      	beq.n	8004f54 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004f3e:	78fa      	ldrb	r2, [r7, #3]
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	334d      	adds	r3, #77	@ 0x4d
 8004f4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004f50:	2b09      	cmp	r3, #9
 8004f52:	d170      	bne.n	8005036 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	1a9b      	subs	r3, r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	334d      	adds	r3, #77	@ 0x4d
 8004f64:	2202      	movs	r2, #2
 8004f66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	3344      	adds	r3, #68	@ 0x44
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	1c59      	adds	r1, r3, #1
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4403      	add	r3, r0
 8004f88:	3344      	adds	r3, #68	@ 0x44
 8004f8a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f8c:	78fa      	ldrb	r2, [r7, #3]
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	4613      	mov	r3, r2
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	3344      	adds	r3, #68	@ 0x44
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d914      	bls.n	8004fcc <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004fa2:	78fa      	ldrb	r2, [r7, #3]
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	3344      	adds	r3, #68	@ 0x44
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004fb6:	78fa      	ldrb	r2, [r7, #3]
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	334c      	adds	r3, #76	@ 0x4c
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004fca:	e022      	b.n	8005012 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004fcc:	78fa      	ldrb	r2, [r7, #3]
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	334c      	adds	r3, #76	@ 0x4c
 8004fdc:	2202      	movs	r2, #2
 8004fde:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ff6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ffe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4413      	add	r3, r2
 8005008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800500c:	461a      	mov	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005012:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005014:	78fa      	ldrb	r2, [r7, #3]
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	4613      	mov	r3, r2
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	1a9b      	subs	r3, r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	334c      	adds	r3, #76	@ 0x4c
 8005024:	781a      	ldrb	r2, [r3, #0]
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f00a ff8e 	bl	800ff4c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005030:	e002      	b.n	8005038 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005032:	bf00      	nop
 8005034:	e000      	b.n	8005038 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005036:	bf00      	nop
  }
}
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b08a      	sub	sp, #40	@ 0x28
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	0c5b      	lsrs	r3, r3, #17
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005072:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d004      	beq.n	8005084 <HCD_RXQLVL_IRQHandler+0x46>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b05      	cmp	r3, #5
 800507e:	f000 80b6 	beq.w	80051ee <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005082:	e0b7      	b.n	80051f4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 80b3 	beq.w	80051f2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4613      	mov	r3, r2
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	332c      	adds	r3, #44	@ 0x2c
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 80a7 	beq.w	80051f2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	4613      	mov	r3, r2
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	1a9b      	subs	r3, r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	3338      	adds	r3, #56	@ 0x38
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	18d1      	adds	r1, r2, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4613      	mov	r3, r2
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	1a9b      	subs	r3, r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4403      	add	r3, r0
 80050c8:	3334      	adds	r3, #52	@ 0x34
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4299      	cmp	r1, r3
 80050ce:	f200 8083 	bhi.w	80051d8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4613      	mov	r3, r2
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	1a9b      	subs	r3, r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	332c      	adds	r3, #44	@ 0x2c
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	b292      	uxth	r2, r2
 80050ec:	4619      	mov	r1, r3
 80050ee:	f003 f959 	bl	80083a4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4613      	mov	r3, r2
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	332c      	adds	r3, #44	@ 0x2c
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	18d1      	adds	r1, r2, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4613      	mov	r3, r2
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4403      	add	r3, r0
 8005116:	332c      	adds	r3, #44	@ 0x2c
 8005118:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	4613      	mov	r3, r2
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	3338      	adds	r3, #56	@ 0x38
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	18d1      	adds	r1, r2, r3
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	4613      	mov	r3, r2
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4403      	add	r3, r0
 800513e:	3338      	adds	r3, #56	@ 0x38
 8005140:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	4413      	add	r3, r2
 800514a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	0cdb      	lsrs	r3, r3, #19
 8005152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005156:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4613      	mov	r3, r2
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	1a9b      	subs	r3, r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	3328      	adds	r3, #40	@ 0x28
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4293      	cmp	r3, r2
 8005170:	d13f      	bne.n	80051f2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d03c      	beq.n	80051f2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	4413      	add	r3, r2
 8005180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800518e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005196:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051a4:	461a      	mov	r2, r3
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4613      	mov	r3, r2
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	333c      	adds	r3, #60	@ 0x3c
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	f083 0301 	eor.w	r3, r3, #1
 80051c0:	b2d8      	uxtb	r0, r3
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4613      	mov	r3, r2
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	333c      	adds	r3, #60	@ 0x3c
 80051d2:	4602      	mov	r2, r0
 80051d4:	701a      	strb	r2, [r3, #0]
      break;
 80051d6:	e00c      	b.n	80051f2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	4613      	mov	r3, r2
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	1a9b      	subs	r3, r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	334c      	adds	r3, #76	@ 0x4c
 80051e8:	2204      	movs	r2, #4
 80051ea:	701a      	strb	r2, [r3, #0]
      break;
 80051ec:	e001      	b.n	80051f2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80051f2:	bf00      	nop
  }
}
 80051f4:	bf00      	nop
 80051f6:	3728      	adds	r7, #40	@ 0x28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005228:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b02      	cmp	r3, #2
 8005232:	d10b      	bne.n	800524c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b01      	cmp	r3, #1
 800523c:	d102      	bne.n	8005244 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f00a fe68 	bl	800ff14 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f043 0302 	orr.w	r3, r3, #2
 800524a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b08      	cmp	r3, #8
 8005254:	d132      	bne.n	80052bc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f043 0308 	orr.w	r3, r3, #8
 800525c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b04      	cmp	r3, #4
 8005266:	d126      	bne.n	80052b6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	7a5b      	ldrb	r3, [r3, #9]
 800526c:	2b02      	cmp	r3, #2
 800526e:	d113      	bne.n	8005298 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005276:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800527a:	d106      	bne.n	800528a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2102      	movs	r1, #2
 8005282:	4618      	mov	r0, r3
 8005284:	f003 fa1e 	bl	80086c4 <USB_InitFSLSPClkSel>
 8005288:	e011      	b.n	80052ae <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2101      	movs	r1, #1
 8005290:	4618      	mov	r0, r3
 8005292:	f003 fa17 	bl	80086c4 <USB_InitFSLSPClkSel>
 8005296:	e00a      	b.n	80052ae <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	79db      	ldrb	r3, [r3, #7]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d106      	bne.n	80052ae <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052a6:	461a      	mov	r2, r3
 80052a8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80052ac:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f00a fe5a 	bl	800ff68 <HAL_HCD_PortEnabled_Callback>
 80052b4:	e002      	b.n	80052bc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f00a fe64 	bl	800ff84 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d103      	bne.n	80052ce <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f043 0320 	orr.w	r3, r3, #32
 80052cc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80052d4:	461a      	mov	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	6013      	str	r3, [r2, #0]
}
 80052da:	bf00      	nop
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e12b      	b.n	800554e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fc fa68 	bl	80017e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2224      	movs	r2, #36	@ 0x24
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0201 	bic.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005336:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005346:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005348:	f002 fd3a 	bl	8007dc0 <HAL_RCC_GetPCLK1Freq>
 800534c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4a81      	ldr	r2, [pc, #516]	@ (8005558 <HAL_I2C_Init+0x274>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d807      	bhi.n	8005368 <HAL_I2C_Init+0x84>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4a80      	ldr	r2, [pc, #512]	@ (800555c <HAL_I2C_Init+0x278>)
 800535c:	4293      	cmp	r3, r2
 800535e:	bf94      	ite	ls
 8005360:	2301      	movls	r3, #1
 8005362:	2300      	movhi	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	e006      	b.n	8005376 <HAL_I2C_Init+0x92>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4a7d      	ldr	r2, [pc, #500]	@ (8005560 <HAL_I2C_Init+0x27c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	bf94      	ite	ls
 8005370:	2301      	movls	r3, #1
 8005372:	2300      	movhi	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e0e7      	b.n	800554e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4a78      	ldr	r2, [pc, #480]	@ (8005564 <HAL_I2C_Init+0x280>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	0c9b      	lsrs	r3, r3, #18
 8005388:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4a6a      	ldr	r2, [pc, #424]	@ (8005558 <HAL_I2C_Init+0x274>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d802      	bhi.n	80053b8 <HAL_I2C_Init+0xd4>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	3301      	adds	r3, #1
 80053b6:	e009      	b.n	80053cc <HAL_I2C_Init+0xe8>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80053be:	fb02 f303 	mul.w	r3, r2, r3
 80053c2:	4a69      	ldr	r2, [pc, #420]	@ (8005568 <HAL_I2C_Init+0x284>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	099b      	lsrs	r3, r3, #6
 80053ca:	3301      	adds	r3, #1
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80053de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	495c      	ldr	r1, [pc, #368]	@ (8005558 <HAL_I2C_Init+0x274>)
 80053e8:	428b      	cmp	r3, r1
 80053ea:	d819      	bhi.n	8005420 <HAL_I2C_Init+0x13c>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1e59      	subs	r1, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80053fa:	1c59      	adds	r1, r3, #1
 80053fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005400:	400b      	ands	r3, r1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_I2C_Init+0x138>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	1e59      	subs	r1, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	fbb1 f3f3 	udiv	r3, r1, r3
 8005414:	3301      	adds	r3, #1
 8005416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800541a:	e051      	b.n	80054c0 <HAL_I2C_Init+0x1dc>
 800541c:	2304      	movs	r3, #4
 800541e:	e04f      	b.n	80054c0 <HAL_I2C_Init+0x1dc>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d111      	bne.n	800544c <HAL_I2C_Init+0x168>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	1e58      	subs	r0, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6859      	ldr	r1, [r3, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	440b      	add	r3, r1
 8005436:	fbb0 f3f3 	udiv	r3, r0, r3
 800543a:	3301      	adds	r3, #1
 800543c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005440:	2b00      	cmp	r3, #0
 8005442:	bf0c      	ite	eq
 8005444:	2301      	moveq	r3, #1
 8005446:	2300      	movne	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	e012      	b.n	8005472 <HAL_I2C_Init+0x18e>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	1e58      	subs	r0, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6859      	ldr	r1, [r3, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	0099      	lsls	r1, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005462:	3301      	adds	r3, #1
 8005464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005468:	2b00      	cmp	r3, #0
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <HAL_I2C_Init+0x196>
 8005476:	2301      	movs	r3, #1
 8005478:	e022      	b.n	80054c0 <HAL_I2C_Init+0x1dc>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10e      	bne.n	80054a0 <HAL_I2C_Init+0x1bc>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1e58      	subs	r0, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6859      	ldr	r1, [r3, #4]
 800548a:	460b      	mov	r3, r1
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	440b      	add	r3, r1
 8005490:	fbb0 f3f3 	udiv	r3, r0, r3
 8005494:	3301      	adds	r3, #1
 8005496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800549a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800549e:	e00f      	b.n	80054c0 <HAL_I2C_Init+0x1dc>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	1e58      	subs	r0, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6859      	ldr	r1, [r3, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	0099      	lsls	r1, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054b6:	3301      	adds	r3, #1
 80054b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	6809      	ldr	r1, [r1, #0]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69da      	ldr	r2, [r3, #28]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80054ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6911      	ldr	r1, [r2, #16]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	68d2      	ldr	r2, [r2, #12]
 80054fa:	4311      	orrs	r1, r2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	430b      	orrs	r3, r1
 8005502:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695a      	ldr	r2, [r3, #20]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	000186a0 	.word	0x000186a0
 800555c:	001e847f 	.word	0x001e847f
 8005560:	003d08ff 	.word	0x003d08ff
 8005564:	431bde83 	.word	0x431bde83
 8005568:	10624dd3 	.word	0x10624dd3

0800556c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e021      	b.n	80055c2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2224      	movs	r2, #36	@ 0x24
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0201 	bic.w	r2, r2, #1
 8005594:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fc f96a 	bl	8001870 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af02      	add	r7, sp, #8
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	4608      	mov	r0, r1
 80055d6:	4611      	mov	r1, r2
 80055d8:	461a      	mov	r2, r3
 80055da:	4603      	mov	r3, r0
 80055dc:	817b      	strh	r3, [r7, #10]
 80055de:	460b      	mov	r3, r1
 80055e0:	813b      	strh	r3, [r7, #8]
 80055e2:	4613      	mov	r3, r2
 80055e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055e6:	f7fc fcff 	bl	8001fe8 <HAL_GetTick>
 80055ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	f040 80d9 	bne.w	80057ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	2319      	movs	r3, #25
 8005600:	2201      	movs	r2, #1
 8005602:	496d      	ldr	r1, [pc, #436]	@ (80057b8 <HAL_I2C_Mem_Write+0x1ec>)
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 fc99 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005610:	2302      	movs	r3, #2
 8005612:	e0cc      	b.n	80057ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <HAL_I2C_Mem_Write+0x56>
 800561e:	2302      	movs	r3, #2
 8005620:	e0c5      	b.n	80057ae <HAL_I2C_Mem_Write+0x1e2>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b01      	cmp	r3, #1
 8005636:	d007      	beq.n	8005648 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005656:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2221      	movs	r2, #33	@ 0x21
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2240      	movs	r2, #64	@ 0x40
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a3a      	ldr	r2, [r7, #32]
 8005672:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005678:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4a4d      	ldr	r2, [pc, #308]	@ (80057bc <HAL_I2C_Mem_Write+0x1f0>)
 8005688:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800568a:	88f8      	ldrh	r0, [r7, #6]
 800568c:	893a      	ldrh	r2, [r7, #8]
 800568e:	8979      	ldrh	r1, [r7, #10]
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	9301      	str	r3, [sp, #4]
 8005694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	4603      	mov	r3, r0
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 fad0 	bl	8005c40 <I2C_RequestMemoryWrite>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d052      	beq.n	800574c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e081      	b.n	80057ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 fd5e 	bl	8006170 <I2C_WaitOnTXEFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00d      	beq.n	80056d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d107      	bne.n	80056d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e06b      	b.n	80057ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056da:	781a      	ldrb	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b04      	cmp	r3, #4
 8005712:	d11b      	bne.n	800574c <HAL_I2C_Mem_Write+0x180>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005718:	2b00      	cmp	r3, #0
 800571a:	d017      	beq.n	800574c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005720:	781a      	ldrb	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1aa      	bne.n	80056aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 fd51 	bl	8006200 <I2C_WaitOnBTFFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00d      	beq.n	8005780 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005768:	2b04      	cmp	r3, #4
 800576a:	d107      	bne.n	800577c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800577a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e016      	b.n	80057ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800578e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	e000      	b.n	80057ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80057ac:	2302      	movs	r3, #2
  }
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	00100002 	.word	0x00100002
 80057bc:	ffff0000 	.word	0xffff0000

080057c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08c      	sub	sp, #48	@ 0x30
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	4608      	mov	r0, r1
 80057ca:	4611      	mov	r1, r2
 80057cc:	461a      	mov	r2, r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	817b      	strh	r3, [r7, #10]
 80057d2:	460b      	mov	r3, r1
 80057d4:	813b      	strh	r3, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057da:	f7fc fc05 	bl	8001fe8 <HAL_GetTick>
 80057de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	f040 8214 	bne.w	8005c16 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	2319      	movs	r3, #25
 80057f4:	2201      	movs	r2, #1
 80057f6:	497b      	ldr	r1, [pc, #492]	@ (80059e4 <HAL_I2C_Mem_Read+0x224>)
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 fb9f 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005804:	2302      	movs	r3, #2
 8005806:	e207      	b.n	8005c18 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_I2C_Mem_Read+0x56>
 8005812:	2302      	movs	r3, #2
 8005814:	e200      	b.n	8005c18 <HAL_I2C_Mem_Read+0x458>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b01      	cmp	r3, #1
 800582a:	d007      	beq.n	800583c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0201 	orr.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800584a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2222      	movs	r2, #34	@ 0x22
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2240      	movs	r2, #64	@ 0x40
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005866:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800586c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4a5b      	ldr	r2, [pc, #364]	@ (80059e8 <HAL_I2C_Mem_Read+0x228>)
 800587c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800587e:	88f8      	ldrh	r0, [r7, #6]
 8005880:	893a      	ldrh	r2, [r7, #8]
 8005882:	8979      	ldrh	r1, [r7, #10]
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	4603      	mov	r3, r0
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 fa6c 	bl	8005d6c <I2C_RequestMemoryRead>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e1bc      	b.n	8005c18 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d113      	bne.n	80058ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a6:	2300      	movs	r3, #0
 80058a8:	623b      	str	r3, [r7, #32]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	623b      	str	r3, [r7, #32]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	623b      	str	r3, [r7, #32]
 80058ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	e190      	b.n	8005bf0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d11b      	bne.n	800590e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058e6:	2300      	movs	r3, #0
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	61fb      	str	r3, [r7, #28]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	61fb      	str	r3, [r7, #28]
 80058fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e170      	b.n	8005bf0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005912:	2b02      	cmp	r3, #2
 8005914:	d11b      	bne.n	800594e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005924:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005934:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005936:	2300      	movs	r3, #0
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	61bb      	str	r3, [r7, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	e150      	b.n	8005bf0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005964:	e144      	b.n	8005bf0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800596a:	2b03      	cmp	r3, #3
 800596c:	f200 80f1 	bhi.w	8005b52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005974:	2b01      	cmp	r3, #1
 8005976:	d123      	bne.n	80059c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800597a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 fc87 	bl	8006290 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e145      	b.n	8005c18 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059be:	e117      	b.n	8005bf0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d14e      	bne.n	8005a66 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ce:	2200      	movs	r2, #0
 80059d0:	4906      	ldr	r1, [pc, #24]	@ (80059ec <HAL_I2C_Mem_Read+0x22c>)
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 fab2 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d008      	beq.n	80059f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e11a      	b.n	8005c18 <HAL_I2C_Mem_Read+0x458>
 80059e2:	bf00      	nop
 80059e4:	00100002 	.word	0x00100002
 80059e8:	ffff0000 	.word	0xffff0000
 80059ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a64:	e0c4      	b.n	8005bf0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	496c      	ldr	r1, [pc, #432]	@ (8005c20 <HAL_I2C_Mem_Read+0x460>)
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 fa63 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0cb      	b.n	8005c18 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac8:	2200      	movs	r2, #0
 8005aca:	4955      	ldr	r1, [pc, #340]	@ (8005c20 <HAL_I2C_Mem_Read+0x460>)
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 fa35 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e09d      	b.n	8005c18 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b50:	e04e      	b.n	8005bf0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b54:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fb9a 	bl	8006290 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e058      	b.n	8005c18 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f003 0304 	and.w	r3, r3, #4
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d124      	bne.n	8005bf0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d107      	bne.n	8005bbe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bbc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691a      	ldr	r2, [r3, #16]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f47f aeb6 	bne.w	8005966 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	e000      	b.n	8005c18 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005c16:	2302      	movs	r3, #2
  }
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3728      	adds	r7, #40	@ 0x28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	00010004 	.word	0x00010004

08005c24 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c32:	b2db      	uxtb	r3, r3
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	4608      	mov	r0, r1
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	817b      	strh	r3, [r7, #10]
 8005c52:	460b      	mov	r3, r1
 8005c54:	813b      	strh	r3, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 f960 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00d      	beq.n	8005c9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c90:	d103      	bne.n	8005c9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e05f      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c9e:	897b      	ldrh	r3, [r7, #10]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005cac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	6a3a      	ldr	r2, [r7, #32]
 8005cb2:	492d      	ldr	r1, [pc, #180]	@ (8005d68 <I2C_RequestMemoryWrite+0x128>)
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 f9bb 	bl	8006030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e04c      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cdc:	6a39      	ldr	r1, [r7, #32]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fa46 	bl	8006170 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00d      	beq.n	8005d06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d107      	bne.n	8005d02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e02b      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d06:	88fb      	ldrh	r3, [r7, #6]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d105      	bne.n	8005d18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d0c:	893b      	ldrh	r3, [r7, #8]
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	611a      	str	r2, [r3, #16]
 8005d16:	e021      	b.n	8005d5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d18:	893b      	ldrh	r3, [r7, #8]
 8005d1a:	0a1b      	lsrs	r3, r3, #8
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d28:	6a39      	ldr	r1, [r7, #32]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fa20 	bl	8006170 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00d      	beq.n	8005d52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d107      	bne.n	8005d4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e005      	b.n	8005d5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d52:	893b      	ldrh	r3, [r7, #8]
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	00010002 	.word	0x00010002

08005d6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	4608      	mov	r0, r1
 8005d76:	4611      	mov	r1, r2
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	817b      	strh	r3, [r7, #10]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	813b      	strh	r3, [r7, #8]
 8005d82:	4613      	mov	r3, r2
 8005d84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005da4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f8c2 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dcc:	d103      	bne.n	8005dd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e0aa      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dda:	897b      	ldrh	r3, [r7, #10]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005de8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	6a3a      	ldr	r2, [r7, #32]
 8005dee:	4952      	ldr	r1, [pc, #328]	@ (8005f38 <I2C_RequestMemoryRead+0x1cc>)
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f91d 	bl	8006030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e097      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e18:	6a39      	ldr	r1, [r7, #32]
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 f9a8 	bl	8006170 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00d      	beq.n	8005e42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d107      	bne.n	8005e3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e076      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d105      	bne.n	8005e54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e48:	893b      	ldrh	r3, [r7, #8]
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	611a      	str	r2, [r3, #16]
 8005e52:	e021      	b.n	8005e98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e54:	893b      	ldrh	r3, [r7, #8]
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e64:	6a39      	ldr	r1, [r7, #32]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f982 	bl	8006170 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00d      	beq.n	8005e8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d107      	bne.n	8005e8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e050      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e8e:	893b      	ldrh	r3, [r7, #8]
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e9a:	6a39      	ldr	r1, [r7, #32]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f967 	bl	8006170 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00d      	beq.n	8005ec4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d107      	bne.n	8005ec0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ebe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e035      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ed2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 f82b 	bl	8005f3c <I2C_WaitOnFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00d      	beq.n	8005f08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005efa:	d103      	bne.n	8005f04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e013      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f08:	897b      	ldrh	r3, [r7, #10]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	6a3a      	ldr	r2, [r7, #32]
 8005f1c:	4906      	ldr	r1, [pc, #24]	@ (8005f38 <I2C_RequestMemoryRead+0x1cc>)
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f886 	bl	8006030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	00010002 	.word	0x00010002

08005f3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f4c:	e048      	b.n	8005fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f54:	d044      	beq.n	8005fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f56:	f7fc f847 	bl	8001fe8 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d302      	bcc.n	8005f6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d139      	bne.n	8005fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	0c1b      	lsrs	r3, r3, #16
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d10d      	bne.n	8005f92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	43da      	mvns	r2, r3
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4013      	ands	r3, r2
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	e00c      	b.n	8005fac <I2C_WaitOnFlagUntilTimeout+0x70>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	43da      	mvns	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bf0c      	ite	eq
 8005fa4:	2301      	moveq	r3, #1
 8005fa6:	2300      	movne	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d116      	bne.n	8005fe0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fcc:	f043 0220 	orr.w	r2, r3, #32
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e023      	b.n	8006028 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	0c1b      	lsrs	r3, r3, #16
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d10d      	bne.n	8006006 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	43da      	mvns	r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2301      	moveq	r3, #1
 8005ffe:	2300      	movne	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	e00c      	b.n	8006020 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	43da      	mvns	r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	4013      	ands	r3, r2
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	bf0c      	ite	eq
 8006018:	2301      	moveq	r3, #1
 800601a:	2300      	movne	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	79fb      	ldrb	r3, [r7, #7]
 8006022:	429a      	cmp	r2, r3
 8006024:	d093      	beq.n	8005f4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800603e:	e071      	b.n	8006124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800604a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800604e:	d123      	bne.n	8006098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800605e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006068:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2220      	movs	r2, #32
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006084:	f043 0204 	orr.w	r2, r3, #4
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e067      	b.n	8006168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	d041      	beq.n	8006124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a0:	f7fb ffa2 	bl	8001fe8 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d302      	bcc.n	80060b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d136      	bne.n	8006124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	0c1b      	lsrs	r3, r3, #16
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d10c      	bne.n	80060da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	43da      	mvns	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4013      	ands	r3, r2
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bf14      	ite	ne
 80060d2:	2301      	movne	r3, #1
 80060d4:	2300      	moveq	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	e00b      	b.n	80060f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	43da      	mvns	r2, r3
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4013      	ands	r3, r2
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	bf14      	ite	ne
 80060ec:	2301      	movne	r3, #1
 80060ee:	2300      	moveq	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d016      	beq.n	8006124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006110:	f043 0220 	orr.w	r2, r3, #32
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e021      	b.n	8006168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	0c1b      	lsrs	r3, r3, #16
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	d10c      	bne.n	8006148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	43da      	mvns	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	4013      	ands	r3, r2
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	bf14      	ite	ne
 8006140:	2301      	movne	r3, #1
 8006142:	2300      	moveq	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	e00b      	b.n	8006160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	43da      	mvns	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4013      	ands	r3, r2
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	bf14      	ite	ne
 800615a:	2301      	movne	r3, #1
 800615c:	2300      	moveq	r3, #0
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	f47f af6d 	bne.w	8006040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800617c:	e034      	b.n	80061e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 f8e3 	bl	800634a <I2C_IsAcknowledgeFailed>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e034      	b.n	80061f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006194:	d028      	beq.n	80061e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006196:	f7fb ff27 	bl	8001fe8 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d302      	bcc.n	80061ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d11d      	bne.n	80061e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b6:	2b80      	cmp	r3, #128	@ 0x80
 80061b8:	d016      	beq.n	80061e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d4:	f043 0220 	orr.w	r2, r3, #32
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e007      	b.n	80061f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f2:	2b80      	cmp	r3, #128	@ 0x80
 80061f4:	d1c3      	bne.n	800617e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800620c:	e034      	b.n	8006278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f89b 	bl	800634a <I2C_IsAcknowledgeFailed>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e034      	b.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006224:	d028      	beq.n	8006278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006226:	f7fb fedf 	bl	8001fe8 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	429a      	cmp	r2, r3
 8006234:	d302      	bcc.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d11d      	bne.n	8006278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b04      	cmp	r3, #4
 8006248:	d016      	beq.n	8006278 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006264:	f043 0220 	orr.w	r2, r3, #32
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e007      	b.n	8006288 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b04      	cmp	r3, #4
 8006284:	d1c3      	bne.n	800620e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800629c:	e049      	b.n	8006332 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b10      	cmp	r3, #16
 80062aa:	d119      	bne.n	80062e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0210 	mvn.w	r2, #16
 80062b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e030      	b.n	8006342 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e0:	f7fb fe82 	bl	8001fe8 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d302      	bcc.n	80062f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d11d      	bne.n	8006332 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006300:	2b40      	cmp	r3, #64	@ 0x40
 8006302:	d016      	beq.n	8006332 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2220      	movs	r2, #32
 800630e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631e:	f043 0220 	orr.w	r2, r3, #32
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e007      	b.n	8006342 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633c:	2b40      	cmp	r3, #64	@ 0x40
 800633e:	d1ae      	bne.n	800629e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800635c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006360:	d11b      	bne.n	800639a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800636a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006386:	f043 0204 	orr.w	r2, r3, #4
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e128      	b.n	800660c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d109      	bne.n	80063da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a90      	ldr	r2, [pc, #576]	@ (8006614 <HAL_I2S_Init+0x26c>)
 80063d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fb fa6d 	bl	80018b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2202      	movs	r2, #2
 80063de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	6812      	ldr	r2, [r2, #0]
 80063ec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80063f0:	f023 030f 	bic.w	r3, r3, #15
 80063f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2202      	movs	r2, #2
 80063fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d060      	beq.n	80064c8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d102      	bne.n	8006414 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800640e:	2310      	movs	r3, #16
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	e001      	b.n	8006418 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006414:	2320      	movs	r3, #32
 8006416:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b20      	cmp	r3, #32
 800641e:	d802      	bhi.n	8006426 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006426:	2001      	movs	r0, #1
 8006428:	f001 fdec 	bl	8008004 <HAL_RCCEx_GetPeriphCLKFreq>
 800642c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006436:	d125      	bne.n	8006484 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d010      	beq.n	8006462 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	fbb2 f2f3 	udiv	r2, r2, r3
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	461a      	mov	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	fbb2 f3f3 	udiv	r3, r2, r3
 800645c:	3305      	adds	r3, #5
 800645e:	613b      	str	r3, [r7, #16]
 8006460:	e01f      	b.n	80064a2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	fbb2 f2f3 	udiv	r2, r2, r3
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	461a      	mov	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	fbb2 f3f3 	udiv	r3, r2, r3
 800647e:	3305      	adds	r3, #5
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	e00e      	b.n	80064a2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	fbb2 f2f3 	udiv	r2, r2, r3
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	461a      	mov	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	3305      	adds	r3, #5
 80064a0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	4a5c      	ldr	r2, [pc, #368]	@ (8006618 <HAL_I2S_Init+0x270>)
 80064a6:	fba2 2303 	umull	r2, r3, r2, r3
 80064aa:	08db      	lsrs	r3, r3, #3
 80064ac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	085b      	lsrs	r3, r3, #1
 80064be:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	021b      	lsls	r3, r3, #8
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	e003      	b.n	80064d0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80064c8:	2302      	movs	r3, #2
 80064ca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d902      	bls.n	80064dc <HAL_I2S_Init+0x134>
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	2bff      	cmp	r3, #255	@ 0xff
 80064da:	d907      	bls.n	80064ec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e0:	f043 0210 	orr.w	r2, r3, #16
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e08f      	b.n	800660c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	ea42 0103 	orr.w	r1, r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800650a:	f023 030f 	bic.w	r3, r3, #15
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6851      	ldr	r1, [r2, #4]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6892      	ldr	r2, [r2, #8]
 8006516:	4311      	orrs	r1, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	68d2      	ldr	r2, [r2, #12]
 800651c:	4311      	orrs	r1, r2
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	6992      	ldr	r2, [r2, #24]
 8006522:	430a      	orrs	r2, r1
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800652e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d161      	bne.n	80065fc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a38      	ldr	r2, [pc, #224]	@ (800661c <HAL_I2S_Init+0x274>)
 800653c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a37      	ldr	r2, [pc, #220]	@ (8006620 <HAL_I2S_Init+0x278>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d101      	bne.n	800654c <HAL_I2S_Init+0x1a4>
 8006548:	4b36      	ldr	r3, [pc, #216]	@ (8006624 <HAL_I2S_Init+0x27c>)
 800654a:	e001      	b.n	8006550 <HAL_I2S_Init+0x1a8>
 800654c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6812      	ldr	r2, [r2, #0]
 8006556:	4932      	ldr	r1, [pc, #200]	@ (8006620 <HAL_I2S_Init+0x278>)
 8006558:	428a      	cmp	r2, r1
 800655a:	d101      	bne.n	8006560 <HAL_I2S_Init+0x1b8>
 800655c:	4a31      	ldr	r2, [pc, #196]	@ (8006624 <HAL_I2S_Init+0x27c>)
 800655e:	e001      	b.n	8006564 <HAL_I2S_Init+0x1bc>
 8006560:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006564:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006568:	f023 030f 	bic.w	r3, r3, #15
 800656c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a2b      	ldr	r2, [pc, #172]	@ (8006620 <HAL_I2S_Init+0x278>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d101      	bne.n	800657c <HAL_I2S_Init+0x1d4>
 8006578:	4b2a      	ldr	r3, [pc, #168]	@ (8006624 <HAL_I2S_Init+0x27c>)
 800657a:	e001      	b.n	8006580 <HAL_I2S_Init+0x1d8>
 800657c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006580:	2202      	movs	r2, #2
 8006582:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a25      	ldr	r2, [pc, #148]	@ (8006620 <HAL_I2S_Init+0x278>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d101      	bne.n	8006592 <HAL_I2S_Init+0x1ea>
 800658e:	4b25      	ldr	r3, [pc, #148]	@ (8006624 <HAL_I2S_Init+0x27c>)
 8006590:	e001      	b.n	8006596 <HAL_I2S_Init+0x1ee>
 8006592:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065a2:	d003      	beq.n	80065ac <HAL_I2S_Init+0x204>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80065ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80065b0:	613b      	str	r3, [r7, #16]
 80065b2:	e001      	b.n	80065b8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80065b4:	2300      	movs	r3, #0
 80065b6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065c2:	4313      	orrs	r3, r2
 80065c4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065cc:	4313      	orrs	r3, r2
 80065ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065d6:	4313      	orrs	r3, r2
 80065d8:	b29a      	uxth	r2, r3
 80065da:	897b      	ldrh	r3, [r7, #10]
 80065dc:	4313      	orrs	r3, r2
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80065e4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a0d      	ldr	r2, [pc, #52]	@ (8006620 <HAL_I2S_Init+0x278>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d101      	bne.n	80065f4 <HAL_I2S_Init+0x24c>
 80065f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006624 <HAL_I2S_Init+0x27c>)
 80065f2:	e001      	b.n	80065f8 <HAL_I2S_Init+0x250>
 80065f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065f8:	897a      	ldrh	r2, [r7, #10]
 80065fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3720      	adds	r7, #32
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	08006ea5 	.word	0x08006ea5
 8006618:	cccccccd 	.word	0xcccccccd
 800661c:	0800702d 	.word	0x0800702d
 8006620:	40003800 	.word	0x40003800
 8006624:	40003400 	.word	0x40003400

08006628 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <HAL_I2S_Transmit_DMA+0x1a>
 800663c:	88fb      	ldrh	r3, [r7, #6]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e08a      	b.n	800675c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b01      	cmp	r3, #1
 8006650:	d001      	beq.n	8006656 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8006652:	2302      	movs	r3, #2
 8006654:	e082      	b.n	800675c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b01      	cmp	r3, #1
 8006660:	d101      	bne.n	8006666 <HAL_I2S_Transmit_DMA+0x3e>
 8006662:	2302      	movs	r3, #2
 8006664:	e07a      	b.n	800675c <HAL_I2S_Transmit_DMA+0x134>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2203      	movs	r2, #3
 8006672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b03      	cmp	r3, #3
 8006692:	d002      	beq.n	800669a <HAL_I2S_Transmit_DMA+0x72>
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2b05      	cmp	r3, #5
 8006698:	d10a      	bne.n	80066b0 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80066a4:	88fb      	ldrh	r3, [r7, #6]
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80066ae:	e005      	b.n	80066bc <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	88fa      	ldrh	r2, [r7, #6]
 80066b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	88fa      	ldrh	r2, [r7, #6]
 80066ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c0:	4a28      	ldr	r2, [pc, #160]	@ (8006764 <HAL_I2S_Transmit_DMA+0x13c>)
 80066c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c8:	4a27      	ldr	r2, [pc, #156]	@ (8006768 <HAL_I2S_Transmit_DMA+0x140>)
 80066ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d0:	4a26      	ldr	r2, [pc, #152]	@ (800676c <HAL_I2S_Transmit_DMA+0x144>)
 80066d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80066dc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80066e4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80066ec:	f7fb feca 	bl	8002484 <HAL_DMA_Start_IT>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00f      	beq.n	8006716 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066fa:	f043 0208 	orr.w	r2, r3, #8
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e022      	b.n	800675c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d107      	bne.n	800673c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0202 	orr.w	r2, r2, #2
 800673a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006746:	2b00      	cmp	r3, #0
 8006748:	d107      	bne.n	800675a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69da      	ldr	r2, [r3, #28]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006758:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	08006d83 	.word	0x08006d83
 8006768:	08006d41 	.word	0x08006d41
 800676c:	08006d9f 	.word	0x08006d9f

08006770 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_I2S_DMAPause+0x18>
 8006784:	2302      	movs	r3, #2
 8006786:	e04a      	b.n	800681e <HAL_I2S_DMAPause+0xae>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b03      	cmp	r3, #3
 800679a:	d108      	bne.n	80067ae <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0202 	bic.w	r2, r2, #2
 80067aa:	605a      	str	r2, [r3, #4]
 80067ac:	e032      	b.n	8006814 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d108      	bne.n	80067cc <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0201 	bic.w	r2, r2, #1
 80067c8:	605a      	str	r2, [r3, #4]
 80067ca:	e023      	b.n	8006814 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b05      	cmp	r3, #5
 80067d6:	d11d      	bne.n	8006814 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0203 	bic.w	r2, r2, #3
 80067e6:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a0f      	ldr	r2, [pc, #60]	@ (800682c <HAL_I2S_DMAPause+0xbc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d101      	bne.n	80067f6 <HAL_I2S_DMAPause+0x86>
 80067f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006830 <HAL_I2S_DMAPause+0xc0>)
 80067f4:	e001      	b.n	80067fa <HAL_I2S_DMAPause+0x8a>
 80067f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	490a      	ldr	r1, [pc, #40]	@ (800682c <HAL_I2S_DMAPause+0xbc>)
 8006802:	428b      	cmp	r3, r1
 8006804:	d101      	bne.n	800680a <HAL_I2S_DMAPause+0x9a>
 8006806:	4b0a      	ldr	r3, [pc, #40]	@ (8006830 <HAL_I2S_DMAPause+0xc0>)
 8006808:	e001      	b.n	800680e <HAL_I2S_DMAPause+0x9e>
 800680a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800680e:	f022 0203 	bic.w	r2, r2, #3
 8006812:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	40003800 	.word	0x40003800
 8006830:	40003400 	.word	0x40003400

08006834 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b01      	cmp	r3, #1
 8006846:	d101      	bne.n	800684c <HAL_I2S_DMAResume+0x18>
 8006848:	2302      	movs	r3, #2
 800684a:	e07d      	b.n	8006948 <HAL_I2S_DMAResume+0x114>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b03      	cmp	r3, #3
 800685e:	d108      	bne.n	8006872 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0202 	orr.w	r2, r2, #2
 800686e:	605a      	str	r2, [r3, #4]
 8006870:	e056      	b.n	8006920 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b04      	cmp	r3, #4
 800687c:	d108      	bne.n	8006890 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f042 0201 	orr.w	r2, r2, #1
 800688c:	605a      	str	r2, [r3, #4]
 800688e:	e047      	b.n	8006920 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b05      	cmp	r3, #5
 800689a:	d141      	bne.n	8006920 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0203 	orr.w	r2, r2, #3
 80068aa:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a28      	ldr	r2, [pc, #160]	@ (8006954 <HAL_I2S_DMAResume+0x120>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d101      	bne.n	80068ba <HAL_I2S_DMAResume+0x86>
 80068b6:	4b28      	ldr	r3, [pc, #160]	@ (8006958 <HAL_I2S_DMAResume+0x124>)
 80068b8:	e001      	b.n	80068be <HAL_I2S_DMAResume+0x8a>
 80068ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4923      	ldr	r1, [pc, #140]	@ (8006954 <HAL_I2S_DMAResume+0x120>)
 80068c6:	428b      	cmp	r3, r1
 80068c8:	d101      	bne.n	80068ce <HAL_I2S_DMAResume+0x9a>
 80068ca:	4b23      	ldr	r3, [pc, #140]	@ (8006958 <HAL_I2S_DMAResume+0x124>)
 80068cc:	e001      	b.n	80068d2 <HAL_I2S_DMAResume+0x9e>
 80068ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068d2:	f042 0203 	orr.w	r2, r2, #3
 80068d6:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006954 <HAL_I2S_DMAResume+0x120>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d101      	bne.n	80068e6 <HAL_I2S_DMAResume+0xb2>
 80068e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006958 <HAL_I2S_DMAResume+0x124>)
 80068e4:	e001      	b.n	80068ea <HAL_I2S_DMAResume+0xb6>
 80068e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d115      	bne.n	8006920 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a16      	ldr	r2, [pc, #88]	@ (8006954 <HAL_I2S_DMAResume+0x120>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d101      	bne.n	8006902 <HAL_I2S_DMAResume+0xce>
 80068fe:	4b16      	ldr	r3, [pc, #88]	@ (8006958 <HAL_I2S_DMAResume+0x124>)
 8006900:	e001      	b.n	8006906 <HAL_I2S_DMAResume+0xd2>
 8006902:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4911      	ldr	r1, [pc, #68]	@ (8006954 <HAL_I2S_DMAResume+0x120>)
 800690e:	428b      	cmp	r3, r1
 8006910:	d101      	bne.n	8006916 <HAL_I2S_DMAResume+0xe2>
 8006912:	4b11      	ldr	r3, [pc, #68]	@ (8006958 <HAL_I2S_DMAResume+0x124>)
 8006914:	e001      	b.n	800691a <HAL_I2S_DMAResume+0xe6>
 8006916:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800691a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800691e:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800692a:	2b00      	cmp	r3, #0
 800692c:	d107      	bne.n	800693e <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69da      	ldr	r2, [r3, #28]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800693c:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	40003800 	.word	0x40003800
 8006958:	40003400 	.word	0x40003400

0800695c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006970:	d004      	beq.n	800697c <HAL_I2S_DMAStop+0x20>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f040 80d1 	bne.w	8006b1e <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00f      	beq.n	80069a4 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006988:	4618      	mov	r0, r3
 800698a:	f7fb fdd3 	bl	8002534 <HAL_DMA_Abort>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d007      	beq.n	80069a4 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006998:	f043 0208 	orr.w	r2, r3, #8
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80069a4:	2364      	movs	r3, #100	@ 0x64
 80069a6:	2201      	movs	r2, #1
 80069a8:	2102      	movs	r1, #2
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fb04 	bl	8006fb8 <I2S_WaitFlagStateUntilTimeout>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00b      	beq.n	80069ce <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ba:	f043 0201 	orr.w	r2, r3, #1
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80069ce:	2364      	movs	r3, #100	@ 0x64
 80069d0:	2200      	movs	r2, #0
 80069d2:	2180      	movs	r1, #128	@ 0x80
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 faef 	bl	8006fb8 <I2S_WaitFlagStateUntilTimeout>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00b      	beq.n	80069f8 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e4:	f043 0201 	orr.w	r2, r3, #1
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	69da      	ldr	r2, [r3, #28]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a06:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006a08:	2300      	movs	r3, #0
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0202 	bic.w	r2, r2, #2
 8006a24:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b05      	cmp	r3, #5
 8006a30:	f040 8165 	bne.w	8006cfe <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00f      	beq.n	8006a5c <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fb fd77 	bl	8002534 <HAL_DMA_Abort>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a50:	f043 0208 	orr.w	r2, r3, #8
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a8a      	ldr	r2, [pc, #552]	@ (8006c8c <HAL_I2S_DMAStop+0x330>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d101      	bne.n	8006a6a <HAL_I2S_DMAStop+0x10e>
 8006a66:	4b8a      	ldr	r3, [pc, #552]	@ (8006c90 <HAL_I2S_DMAStop+0x334>)
 8006a68:	e001      	b.n	8006a6e <HAL_I2S_DMAStop+0x112>
 8006a6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4985      	ldr	r1, [pc, #532]	@ (8006c8c <HAL_I2S_DMAStop+0x330>)
 8006a76:	428b      	cmp	r3, r1
 8006a78:	d101      	bne.n	8006a7e <HAL_I2S_DMAStop+0x122>
 8006a7a:	4b85      	ldr	r3, [pc, #532]	@ (8006c90 <HAL_I2S_DMAStop+0x334>)
 8006a7c:	e001      	b.n	8006a82 <HAL_I2S_DMAStop+0x126>
 8006a7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a86:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006a88:	2300      	movs	r3, #0
 8006a8a:	613b      	str	r3, [r7, #16]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a7e      	ldr	r2, [pc, #504]	@ (8006c8c <HAL_I2S_DMAStop+0x330>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d101      	bne.n	8006a9a <HAL_I2S_DMAStop+0x13e>
 8006a96:	4b7e      	ldr	r3, [pc, #504]	@ (8006c90 <HAL_I2S_DMAStop+0x334>)
 8006a98:	e001      	b.n	8006a9e <HAL_I2S_DMAStop+0x142>
 8006a9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a79      	ldr	r2, [pc, #484]	@ (8006c8c <HAL_I2S_DMAStop+0x330>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d101      	bne.n	8006ab0 <HAL_I2S_DMAStop+0x154>
 8006aac:	4b78      	ldr	r3, [pc, #480]	@ (8006c90 <HAL_I2S_DMAStop+0x334>)
 8006aae:	e001      	b.n	8006ab4 <HAL_I2S_DMAStop+0x158>
 8006ab0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	613b      	str	r3, [r7, #16]
 8006ab8:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a73      	ldr	r2, [pc, #460]	@ (8006c8c <HAL_I2S_DMAStop+0x330>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d101      	bne.n	8006ac8 <HAL_I2S_DMAStop+0x16c>
 8006ac4:	4b72      	ldr	r3, [pc, #456]	@ (8006c90 <HAL_I2S_DMAStop+0x334>)
 8006ac6:	e001      	b.n	8006acc <HAL_I2S_DMAStop+0x170>
 8006ac8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	496e      	ldr	r1, [pc, #440]	@ (8006c8c <HAL_I2S_DMAStop+0x330>)
 8006ad4:	428b      	cmp	r3, r1
 8006ad6:	d101      	bne.n	8006adc <HAL_I2S_DMAStop+0x180>
 8006ad8:	4b6d      	ldr	r3, [pc, #436]	@ (8006c90 <HAL_I2S_DMAStop+0x334>)
 8006ada:	e001      	b.n	8006ae0 <HAL_I2S_DMAStop+0x184>
 8006adc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ae0:	f022 0201 	bic.w	r2, r2, #1
 8006ae4:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10c      	bne.n	8006b08 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006af2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006b06:	e0fa      	b.n	8006cfe <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a5f      	ldr	r2, [pc, #380]	@ (8006c8c <HAL_I2S_DMAStop+0x330>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d101      	bne.n	8006b16 <HAL_I2S_DMAStop+0x1ba>
 8006b12:	4b5f      	ldr	r3, [pc, #380]	@ (8006c90 <HAL_I2S_DMAStop+0x334>)
 8006b14:	e001      	b.n	8006b1a <HAL_I2S_DMAStop+0x1be>
 8006b16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b1a:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006b1c:	e0ef      	b.n	8006cfe <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b26:	d005      	beq.n	8006b34 <HAL_I2S_DMAStop+0x1d8>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b30:	f040 80e5 	bne.w	8006cfe <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00f      	beq.n	8006b5c <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fb fcf7 	bl	8002534 <HAL_DMA_Abort>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d007      	beq.n	8006b5c <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b50:	f043 0208 	orr.w	r2, r3, #8
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b05      	cmp	r3, #5
 8006b66:	f040 809a 	bne.w	8006c9e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00f      	beq.n	8006b92 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fb fcdc 	bl	8002534 <HAL_DMA_Abort>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d007      	beq.n	8006b92 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b86:	f043 0208 	orr.w	r2, r3, #8
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8006b92:	f7fb fa29 	bl	8001fe8 <HAL_GetTick>
 8006b96:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006b98:	e012      	b.n	8006bc0 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006b9a:	f7fb fa25 	bl	8001fe8 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b64      	cmp	r3, #100	@ 0x64
 8006ba6:	d90b      	bls.n	8006bc0 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bac:	f043 0201 	orr.w	r2, r3, #1
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a31      	ldr	r2, [pc, #196]	@ (8006c8c <HAL_I2S_DMAStop+0x330>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d101      	bne.n	8006bce <HAL_I2S_DMAStop+0x272>
 8006bca:	4b31      	ldr	r3, [pc, #196]	@ (8006c90 <HAL_I2S_DMAStop+0x334>)
 8006bcc:	e001      	b.n	8006bd2 <HAL_I2S_DMAStop+0x276>
 8006bce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d1de      	bne.n	8006b9a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006bdc:	e012      	b.n	8006c04 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006bde:	f7fb fa03 	bl	8001fe8 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b64      	cmp	r3, #100	@ 0x64
 8006bea:	d90b      	bls.n	8006c04 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bf0:	f043 0201 	orr.w	r2, r3, #1
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a20      	ldr	r2, [pc, #128]	@ (8006c8c <HAL_I2S_DMAStop+0x330>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d101      	bne.n	8006c12 <HAL_I2S_DMAStop+0x2b6>
 8006c0e:	4b20      	ldr	r3, [pc, #128]	@ (8006c90 <HAL_I2S_DMAStop+0x334>)
 8006c10:	e001      	b.n	8006c16 <HAL_I2S_DMAStop+0x2ba>
 8006c12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c1c:	2b80      	cmp	r3, #128	@ 0x80
 8006c1e:	d0de      	beq.n	8006bde <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a19      	ldr	r2, [pc, #100]	@ (8006c8c <HAL_I2S_DMAStop+0x330>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d101      	bne.n	8006c2e <HAL_I2S_DMAStop+0x2d2>
 8006c2a:	4b19      	ldr	r3, [pc, #100]	@ (8006c90 <HAL_I2S_DMAStop+0x334>)
 8006c2c:	e001      	b.n	8006c32 <HAL_I2S_DMAStop+0x2d6>
 8006c2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4914      	ldr	r1, [pc, #80]	@ (8006c8c <HAL_I2S_DMAStop+0x330>)
 8006c3a:	428b      	cmp	r3, r1
 8006c3c:	d101      	bne.n	8006c42 <HAL_I2S_DMAStop+0x2e6>
 8006c3e:	4b14      	ldr	r3, [pc, #80]	@ (8006c90 <HAL_I2S_DMAStop+0x334>)
 8006c40:	e001      	b.n	8006c46 <HAL_I2S_DMAStop+0x2ea>
 8006c42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c4a:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a0d      	ldr	r2, [pc, #52]	@ (8006c8c <HAL_I2S_DMAStop+0x330>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d101      	bne.n	8006c5e <HAL_I2S_DMAStop+0x302>
 8006c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c90 <HAL_I2S_DMAStop+0x334>)
 8006c5c:	e001      	b.n	8006c62 <HAL_I2S_DMAStop+0x306>
 8006c5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a07      	ldr	r2, [pc, #28]	@ (8006c8c <HAL_I2S_DMAStop+0x330>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d101      	bne.n	8006c76 <HAL_I2S_DMAStop+0x31a>
 8006c72:	4b07      	ldr	r3, [pc, #28]	@ (8006c90 <HAL_I2S_DMAStop+0x334>)
 8006c74:	e001      	b.n	8006c7a <HAL_I2S_DMAStop+0x31e>
 8006c76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4902      	ldr	r1, [pc, #8]	@ (8006c8c <HAL_I2S_DMAStop+0x330>)
 8006c82:	428b      	cmp	r3, r1
 8006c84:	d106      	bne.n	8006c94 <HAL_I2S_DMAStop+0x338>
 8006c86:	4b02      	ldr	r3, [pc, #8]	@ (8006c90 <HAL_I2S_DMAStop+0x334>)
 8006c88:	e006      	b.n	8006c98 <HAL_I2S_DMAStop+0x33c>
 8006c8a:	bf00      	nop
 8006c8c:	40003800 	.word	0x40003800
 8006c90:	40003400 	.word	0x40003400
 8006c94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c98:	f022 0202 	bic.w	r2, r2, #2
 8006c9c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69da      	ldr	r2, [r3, #28]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cac:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	60bb      	str	r3, [r7, #8]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	60bb      	str	r3, [r7, #8]
 8006cc2:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0201 	bic.w	r2, r2, #1
 8006cd2:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cdc:	d10c      	bne.n	8006cf8 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	77fb      	strb	r3, [r7, #31]
 8006cf6:	e002      	b.n	8006cfe <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 8006d06:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3720      	adds	r7, #32
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d32:	b2db      	uxtb	r3, r3
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10e      	bne.n	8006d74 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0202 	bic.w	r2, r2, #2
 8006d64:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f7f9 fc83 	bl	8000680 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006d7a:	bf00      	nop
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f7f9 fc87 	bl	80006a4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006d96:	bf00      	nop
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0203 	bic.w	r2, r2, #3
 8006dba:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dd4:	f043 0208 	orr.w	r2, r3, #8
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7f9 fdd1 	bl	8000984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b082      	sub	sp, #8
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df6:	881a      	ldrh	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e02:	1c9a      	adds	r2, r3, #2
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10e      	bne.n	8006e3e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e2e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7f9 fc21 	bl	8000680 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006e3e:	bf00      	nop
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b082      	sub	sp, #8
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e58:	b292      	uxth	r2, r2
 8006e5a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e60:	1c9a      	adds	r2, r3, #2
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10e      	bne.n	8006e9c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7ff ff3a 	bl	8006d10 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d13a      	bne.n	8006f36 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d109      	bne.n	8006ede <I2S_IRQHandler+0x3a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed4:	2b40      	cmp	r3, #64	@ 0x40
 8006ed6:	d102      	bne.n	8006ede <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7ff ffb4 	bl	8006e46 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee4:	2b40      	cmp	r3, #64	@ 0x40
 8006ee6:	d126      	bne.n	8006f36 <I2S_IRQHandler+0x92>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f003 0320 	and.w	r3, r3, #32
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	d11f      	bne.n	8006f36 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006f04:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006f06:	2300      	movs	r3, #0
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	613b      	str	r3, [r7, #16]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f28:	f043 0202 	orr.w	r2, r3, #2
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7f9 fd27 	bl	8000984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d136      	bne.n	8006fb0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d109      	bne.n	8006f60 <I2S_IRQHandler+0xbc>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f56:	2b80      	cmp	r3, #128	@ 0x80
 8006f58:	d102      	bne.n	8006f60 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff ff45 	bl	8006dea <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f003 0308 	and.w	r3, r3, #8
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	d122      	bne.n	8006fb0 <I2S_IRQHandler+0x10c>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f003 0320 	and.w	r3, r3, #32
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	d11b      	bne.n	8006fb0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f86:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa2:	f043 0204 	orr.w	r2, r3, #4
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7f9 fcea 	bl	8000984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fc8:	f7fb f80e 	bl	8001fe8 <HAL_GetTick>
 8006fcc:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006fce:	e018      	b.n	8007002 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd6:	d014      	beq.n	8007002 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006fd8:	f7fb f806 	bl	8001fe8 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d902      	bls.n	8006fee <I2S_WaitFlagStateUntilTimeout+0x36>
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d109      	bne.n	8007002 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e00f      	b.n	8007022 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	4013      	ands	r3, r2
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	429a      	cmp	r2, r3
 8007010:	bf0c      	ite	eq
 8007012:	2301      	moveq	r3, #1
 8007014:	2300      	movne	r3, #0
 8007016:	b2db      	uxtb	r3, r3
 8007018:	461a      	mov	r2, r3
 800701a:	79fb      	ldrb	r3, [r7, #7]
 800701c:	429a      	cmp	r2, r3
 800701e:	d1d7      	bne.n	8006fd0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a92      	ldr	r2, [pc, #584]	@ (800728c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d101      	bne.n	800704a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007046:	4b92      	ldr	r3, [pc, #584]	@ (8007290 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007048:	e001      	b.n	800704e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800704a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a8b      	ldr	r2, [pc, #556]	@ (800728c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d101      	bne.n	8007068 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007064:	4b8a      	ldr	r3, [pc, #552]	@ (8007290 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007066:	e001      	b.n	800706c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007068:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007078:	d004      	beq.n	8007084 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	f040 8099 	bne.w	80071b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b02      	cmp	r3, #2
 800708c:	d107      	bne.n	800709e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f925 	bl	80072e8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d107      	bne.n	80070b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f9c8 	bl	8007448 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070be:	2b40      	cmp	r3, #64	@ 0x40
 80070c0:	d13a      	bne.n	8007138 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f003 0320 	and.w	r3, r3, #32
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d035      	beq.n	8007138 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a6e      	ldr	r2, [pc, #440]	@ (800728c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d101      	bne.n	80070da <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80070d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007290 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80070d8:	e001      	b.n	80070de <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80070da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4969      	ldr	r1, [pc, #420]	@ (800728c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80070e6:	428b      	cmp	r3, r1
 80070e8:	d101      	bne.n	80070ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80070ea:	4b69      	ldr	r3, [pc, #420]	@ (8007290 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80070ec:	e001      	b.n	80070f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80070ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80070f6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007106:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007108:	2300      	movs	r3, #0
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800712a:	f043 0202 	orr.w	r2, r3, #2
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7f9 fc26 	bl	8000984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	f003 0308 	and.w	r3, r3, #8
 800713e:	2b08      	cmp	r3, #8
 8007140:	f040 80c3 	bne.w	80072ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 80bd 	beq.w	80072ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800715e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a49      	ldr	r2, [pc, #292]	@ (800728c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d101      	bne.n	800716e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800716a:	4b49      	ldr	r3, [pc, #292]	@ (8007290 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800716c:	e001      	b.n	8007172 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800716e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4944      	ldr	r1, [pc, #272]	@ (800728c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800717a:	428b      	cmp	r3, r1
 800717c:	d101      	bne.n	8007182 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800717e:	4b44      	ldr	r3, [pc, #272]	@ (8007290 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007180:	e001      	b.n	8007186 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007182:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007186:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800718a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800718c:	2300      	movs	r3, #0
 800718e:	60bb      	str	r3, [r7, #8]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	60bb      	str	r3, [r7, #8]
 8007198:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071a6:	f043 0204 	orr.w	r2, r3, #4
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7f9 fbe8 	bl	8000984 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80071b4:	e089      	b.n	80072ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d107      	bne.n	80071d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f8be 	bl	800734c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d107      	bne.n	80071ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f8fd 	bl	80073e4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f0:	2b40      	cmp	r3, #64	@ 0x40
 80071f2:	d12f      	bne.n	8007254 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d02a      	beq.n	8007254 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800720c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a1e      	ldr	r2, [pc, #120]	@ (800728c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d101      	bne.n	800721c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007218:	4b1d      	ldr	r3, [pc, #116]	@ (8007290 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800721a:	e001      	b.n	8007220 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800721c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4919      	ldr	r1, [pc, #100]	@ (800728c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007228:	428b      	cmp	r3, r1
 800722a:	d101      	bne.n	8007230 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800722c:	4b18      	ldr	r3, [pc, #96]	@ (8007290 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800722e:	e001      	b.n	8007234 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007230:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007234:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007238:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007246:	f043 0202 	orr.w	r2, r3, #2
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7f9 fb98 	bl	8000984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	f003 0308 	and.w	r3, r3, #8
 800725a:	2b08      	cmp	r3, #8
 800725c:	d136      	bne.n	80072cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f003 0320 	and.w	r3, r3, #32
 8007264:	2b00      	cmp	r3, #0
 8007266:	d031      	beq.n	80072cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a07      	ldr	r2, [pc, #28]	@ (800728c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d101      	bne.n	8007276 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007272:	4b07      	ldr	r3, [pc, #28]	@ (8007290 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007274:	e001      	b.n	800727a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007276:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4902      	ldr	r1, [pc, #8]	@ (800728c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007282:	428b      	cmp	r3, r1
 8007284:	d106      	bne.n	8007294 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8007286:	4b02      	ldr	r3, [pc, #8]	@ (8007290 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007288:	e006      	b.n	8007298 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800728a:	bf00      	nop
 800728c:	40003800 	.word	0x40003800
 8007290:	40003400 	.word	0x40003400
 8007294:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007298:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800729c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80072ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ba:	f043 0204 	orr.w	r2, r3, #4
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7f9 fb5e 	bl	8000984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80072c8:	e000      	b.n	80072cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80072ca:	bf00      	nop
}
 80072cc:	bf00      	nop
 80072ce:	3720      	adds	r7, #32
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f4:	1c99      	adds	r1, r3, #2
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	6251      	str	r1, [r2, #36]	@ 0x24
 80072fa:	881a      	ldrh	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007314:	b29b      	uxth	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d113      	bne.n	8007342 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007328:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800732e:	b29b      	uxth	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d106      	bne.n	8007342 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff ffc9 	bl	80072d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007342:	bf00      	nop
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007358:	1c99      	adds	r1, r3, #2
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	6251      	str	r1, [r2, #36]	@ 0x24
 800735e:	8819      	ldrh	r1, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a1d      	ldr	r2, [pc, #116]	@ (80073dc <I2SEx_TxISR_I2SExt+0x90>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d101      	bne.n	800736e <I2SEx_TxISR_I2SExt+0x22>
 800736a:	4b1d      	ldr	r3, [pc, #116]	@ (80073e0 <I2SEx_TxISR_I2SExt+0x94>)
 800736c:	e001      	b.n	8007372 <I2SEx_TxISR_I2SExt+0x26>
 800736e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007372:	460a      	mov	r2, r1
 8007374:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d121      	bne.n	80073d2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a12      	ldr	r2, [pc, #72]	@ (80073dc <I2SEx_TxISR_I2SExt+0x90>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d101      	bne.n	800739c <I2SEx_TxISR_I2SExt+0x50>
 8007398:	4b11      	ldr	r3, [pc, #68]	@ (80073e0 <I2SEx_TxISR_I2SExt+0x94>)
 800739a:	e001      	b.n	80073a0 <I2SEx_TxISR_I2SExt+0x54>
 800739c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	490d      	ldr	r1, [pc, #52]	@ (80073dc <I2SEx_TxISR_I2SExt+0x90>)
 80073a8:	428b      	cmp	r3, r1
 80073aa:	d101      	bne.n	80073b0 <I2SEx_TxISR_I2SExt+0x64>
 80073ac:	4b0c      	ldr	r3, [pc, #48]	@ (80073e0 <I2SEx_TxISR_I2SExt+0x94>)
 80073ae:	e001      	b.n	80073b4 <I2SEx_TxISR_I2SExt+0x68>
 80073b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80073b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80073be:	b29b      	uxth	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d106      	bne.n	80073d2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff ff81 	bl	80072d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073d2:	bf00      	nop
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	40003800 	.word	0x40003800
 80073e0:	40003400 	.word	0x40003400

080073e4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68d8      	ldr	r0, [r3, #12]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f6:	1c99      	adds	r1, r3, #2
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80073fc:	b282      	uxth	r2, r0
 80073fe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007404:	b29b      	uxth	r3, r3
 8007406:	3b01      	subs	r3, #1
 8007408:	b29a      	uxth	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d113      	bne.n	8007440 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007426:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800742c:	b29b      	uxth	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d106      	bne.n	8007440 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7ff ff4a 	bl	80072d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a20      	ldr	r2, [pc, #128]	@ (80074d8 <I2SEx_RxISR_I2SExt+0x90>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d101      	bne.n	800745e <I2SEx_RxISR_I2SExt+0x16>
 800745a:	4b20      	ldr	r3, [pc, #128]	@ (80074dc <I2SEx_RxISR_I2SExt+0x94>)
 800745c:	e001      	b.n	8007462 <I2SEx_RxISR_I2SExt+0x1a>
 800745e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007462:	68d8      	ldr	r0, [r3, #12]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007468:	1c99      	adds	r1, r3, #2
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800746e:	b282      	uxth	r2, r0
 8007470:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007484:	b29b      	uxth	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d121      	bne.n	80074ce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a12      	ldr	r2, [pc, #72]	@ (80074d8 <I2SEx_RxISR_I2SExt+0x90>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d101      	bne.n	8007498 <I2SEx_RxISR_I2SExt+0x50>
 8007494:	4b11      	ldr	r3, [pc, #68]	@ (80074dc <I2SEx_RxISR_I2SExt+0x94>)
 8007496:	e001      	b.n	800749c <I2SEx_RxISR_I2SExt+0x54>
 8007498:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	490d      	ldr	r1, [pc, #52]	@ (80074d8 <I2SEx_RxISR_I2SExt+0x90>)
 80074a4:	428b      	cmp	r3, r1
 80074a6:	d101      	bne.n	80074ac <I2SEx_RxISR_I2SExt+0x64>
 80074a8:	4b0c      	ldr	r3, [pc, #48]	@ (80074dc <I2SEx_RxISR_I2SExt+0x94>)
 80074aa:	e001      	b.n	80074b0 <I2SEx_RxISR_I2SExt+0x68>
 80074ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80074b4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d106      	bne.n	80074ce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff ff03 	bl	80072d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	40003800 	.word	0x40003800
 80074dc:	40003400 	.word	0x40003400

080074e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e267      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d075      	beq.n	80075ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80074fe:	4b88      	ldr	r3, [pc, #544]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f003 030c 	and.w	r3, r3, #12
 8007506:	2b04      	cmp	r3, #4
 8007508:	d00c      	beq.n	8007524 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800750a:	4b85      	ldr	r3, [pc, #532]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007512:	2b08      	cmp	r3, #8
 8007514:	d112      	bne.n	800753c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007516:	4b82      	ldr	r3, [pc, #520]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800751e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007522:	d10b      	bne.n	800753c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007524:	4b7e      	ldr	r3, [pc, #504]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d05b      	beq.n	80075e8 <HAL_RCC_OscConfig+0x108>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d157      	bne.n	80075e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e242      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007544:	d106      	bne.n	8007554 <HAL_RCC_OscConfig+0x74>
 8007546:	4b76      	ldr	r3, [pc, #472]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a75      	ldr	r2, [pc, #468]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 800754c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	e01d      	b.n	8007590 <HAL_RCC_OscConfig+0xb0>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800755c:	d10c      	bne.n	8007578 <HAL_RCC_OscConfig+0x98>
 800755e:	4b70      	ldr	r3, [pc, #448]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a6f      	ldr	r2, [pc, #444]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 8007564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	4b6d      	ldr	r3, [pc, #436]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a6c      	ldr	r2, [pc, #432]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 8007570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	e00b      	b.n	8007590 <HAL_RCC_OscConfig+0xb0>
 8007578:	4b69      	ldr	r3, [pc, #420]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a68      	ldr	r2, [pc, #416]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 800757e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	4b66      	ldr	r3, [pc, #408]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a65      	ldr	r2, [pc, #404]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 800758a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800758e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d013      	beq.n	80075c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007598:	f7fa fd26 	bl	8001fe8 <HAL_GetTick>
 800759c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800759e:	e008      	b.n	80075b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075a0:	f7fa fd22 	bl	8001fe8 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	2b64      	cmp	r3, #100	@ 0x64
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e207      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075b2:	4b5b      	ldr	r3, [pc, #364]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0f0      	beq.n	80075a0 <HAL_RCC_OscConfig+0xc0>
 80075be:	e014      	b.n	80075ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075c0:	f7fa fd12 	bl	8001fe8 <HAL_GetTick>
 80075c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075c6:	e008      	b.n	80075da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075c8:	f7fa fd0e 	bl	8001fe8 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b64      	cmp	r3, #100	@ 0x64
 80075d4:	d901      	bls.n	80075da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e1f3      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075da:	4b51      	ldr	r3, [pc, #324]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1f0      	bne.n	80075c8 <HAL_RCC_OscConfig+0xe8>
 80075e6:	e000      	b.n	80075ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d063      	beq.n	80076be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80075f6:	4b4a      	ldr	r3, [pc, #296]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 030c 	and.w	r3, r3, #12
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00b      	beq.n	800761a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007602:	4b47      	ldr	r3, [pc, #284]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800760a:	2b08      	cmp	r3, #8
 800760c:	d11c      	bne.n	8007648 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800760e:	4b44      	ldr	r3, [pc, #272]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d116      	bne.n	8007648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800761a:	4b41      	ldr	r3, [pc, #260]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <HAL_RCC_OscConfig+0x152>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d001      	beq.n	8007632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e1c7      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007632:	4b3b      	ldr	r3, [pc, #236]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	4937      	ldr	r1, [pc, #220]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 8007642:	4313      	orrs	r3, r2
 8007644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007646:	e03a      	b.n	80076be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d020      	beq.n	8007692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007650:	4b34      	ldr	r3, [pc, #208]	@ (8007724 <HAL_RCC_OscConfig+0x244>)
 8007652:	2201      	movs	r2, #1
 8007654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007656:	f7fa fcc7 	bl	8001fe8 <HAL_GetTick>
 800765a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800765c:	e008      	b.n	8007670 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800765e:	f7fa fcc3 	bl	8001fe8 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d901      	bls.n	8007670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e1a8      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007670:	4b2b      	ldr	r3, [pc, #172]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0f0      	beq.n	800765e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800767c:	4b28      	ldr	r3, [pc, #160]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	4925      	ldr	r1, [pc, #148]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 800768c:	4313      	orrs	r3, r2
 800768e:	600b      	str	r3, [r1, #0]
 8007690:	e015      	b.n	80076be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007692:	4b24      	ldr	r3, [pc, #144]	@ (8007724 <HAL_RCC_OscConfig+0x244>)
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007698:	f7fa fca6 	bl	8001fe8 <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076a0:	f7fa fca2 	bl	8001fe8 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e187      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1f0      	bne.n	80076a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0308 	and.w	r3, r3, #8
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d036      	beq.n	8007738 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d016      	beq.n	8007700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076d2:	4b15      	ldr	r3, [pc, #84]	@ (8007728 <HAL_RCC_OscConfig+0x248>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d8:	f7fa fc86 	bl	8001fe8 <HAL_GetTick>
 80076dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076de:	e008      	b.n	80076f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076e0:	f7fa fc82 	bl	8001fe8 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d901      	bls.n	80076f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e167      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007720 <HAL_RCC_OscConfig+0x240>)
 80076f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0f0      	beq.n	80076e0 <HAL_RCC_OscConfig+0x200>
 80076fe:	e01b      	b.n	8007738 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007700:	4b09      	ldr	r3, [pc, #36]	@ (8007728 <HAL_RCC_OscConfig+0x248>)
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007706:	f7fa fc6f 	bl	8001fe8 <HAL_GetTick>
 800770a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800770c:	e00e      	b.n	800772c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800770e:	f7fa fc6b 	bl	8001fe8 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	2b02      	cmp	r3, #2
 800771a:	d907      	bls.n	800772c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e150      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
 8007720:	40023800 	.word	0x40023800
 8007724:	42470000 	.word	0x42470000
 8007728:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800772c:	4b88      	ldr	r3, [pc, #544]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 800772e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1ea      	bne.n	800770e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0304 	and.w	r3, r3, #4
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 8097 	beq.w	8007874 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007746:	2300      	movs	r3, #0
 8007748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800774a:	4b81      	ldr	r3, [pc, #516]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 800774c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10f      	bne.n	8007776 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007756:	2300      	movs	r3, #0
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	4b7d      	ldr	r3, [pc, #500]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 800775c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775e:	4a7c      	ldr	r2, [pc, #496]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 8007760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007764:	6413      	str	r3, [r2, #64]	@ 0x40
 8007766:	4b7a      	ldr	r3, [pc, #488]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 8007768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800776e:	60bb      	str	r3, [r7, #8]
 8007770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007772:	2301      	movs	r3, #1
 8007774:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007776:	4b77      	ldr	r3, [pc, #476]	@ (8007954 <HAL_RCC_OscConfig+0x474>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800777e:	2b00      	cmp	r3, #0
 8007780:	d118      	bne.n	80077b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007782:	4b74      	ldr	r3, [pc, #464]	@ (8007954 <HAL_RCC_OscConfig+0x474>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a73      	ldr	r2, [pc, #460]	@ (8007954 <HAL_RCC_OscConfig+0x474>)
 8007788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800778c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800778e:	f7fa fc2b 	bl	8001fe8 <HAL_GetTick>
 8007792:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007794:	e008      	b.n	80077a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007796:	f7fa fc27 	bl	8001fe8 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d901      	bls.n	80077a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e10c      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077a8:	4b6a      	ldr	r3, [pc, #424]	@ (8007954 <HAL_RCC_OscConfig+0x474>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0f0      	beq.n	8007796 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d106      	bne.n	80077ca <HAL_RCC_OscConfig+0x2ea>
 80077bc:	4b64      	ldr	r3, [pc, #400]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 80077be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c0:	4a63      	ldr	r2, [pc, #396]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 80077c2:	f043 0301 	orr.w	r3, r3, #1
 80077c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80077c8:	e01c      	b.n	8007804 <HAL_RCC_OscConfig+0x324>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	2b05      	cmp	r3, #5
 80077d0:	d10c      	bne.n	80077ec <HAL_RCC_OscConfig+0x30c>
 80077d2:	4b5f      	ldr	r3, [pc, #380]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 80077d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d6:	4a5e      	ldr	r2, [pc, #376]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 80077d8:	f043 0304 	orr.w	r3, r3, #4
 80077dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80077de:	4b5c      	ldr	r3, [pc, #368]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 80077e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e2:	4a5b      	ldr	r2, [pc, #364]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 80077e4:	f043 0301 	orr.w	r3, r3, #1
 80077e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80077ea:	e00b      	b.n	8007804 <HAL_RCC_OscConfig+0x324>
 80077ec:	4b58      	ldr	r3, [pc, #352]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 80077ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077f0:	4a57      	ldr	r2, [pc, #348]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 80077f2:	f023 0301 	bic.w	r3, r3, #1
 80077f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80077f8:	4b55      	ldr	r3, [pc, #340]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 80077fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077fc:	4a54      	ldr	r2, [pc, #336]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 80077fe:	f023 0304 	bic.w	r3, r3, #4
 8007802:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d015      	beq.n	8007838 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800780c:	f7fa fbec 	bl	8001fe8 <HAL_GetTick>
 8007810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007812:	e00a      	b.n	800782a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007814:	f7fa fbe8 	bl	8001fe8 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007822:	4293      	cmp	r3, r2
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e0cb      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800782a:	4b49      	ldr	r3, [pc, #292]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 800782c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0ee      	beq.n	8007814 <HAL_RCC_OscConfig+0x334>
 8007836:	e014      	b.n	8007862 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007838:	f7fa fbd6 	bl	8001fe8 <HAL_GetTick>
 800783c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800783e:	e00a      	b.n	8007856 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007840:	f7fa fbd2 	bl	8001fe8 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800784e:	4293      	cmp	r3, r2
 8007850:	d901      	bls.n	8007856 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e0b5      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007856:	4b3e      	ldr	r3, [pc, #248]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 8007858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800785a:	f003 0302 	and.w	r3, r3, #2
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1ee      	bne.n	8007840 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007862:	7dfb      	ldrb	r3, [r7, #23]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d105      	bne.n	8007874 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007868:	4b39      	ldr	r3, [pc, #228]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 800786a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800786c:	4a38      	ldr	r2, [pc, #224]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 800786e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007872:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 80a1 	beq.w	80079c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800787e:	4b34      	ldr	r3, [pc, #208]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 030c 	and.w	r3, r3, #12
 8007886:	2b08      	cmp	r3, #8
 8007888:	d05c      	beq.n	8007944 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	2b02      	cmp	r3, #2
 8007890:	d141      	bne.n	8007916 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007892:	4b31      	ldr	r3, [pc, #196]	@ (8007958 <HAL_RCC_OscConfig+0x478>)
 8007894:	2200      	movs	r2, #0
 8007896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007898:	f7fa fba6 	bl	8001fe8 <HAL_GetTick>
 800789c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800789e:	e008      	b.n	80078b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078a0:	f7fa fba2 	bl	8001fe8 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d901      	bls.n	80078b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e087      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078b2:	4b27      	ldr	r3, [pc, #156]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1f0      	bne.n	80078a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	69da      	ldr	r2, [r3, #28]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	431a      	orrs	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078cc:	019b      	lsls	r3, r3, #6
 80078ce:	431a      	orrs	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d4:	085b      	lsrs	r3, r3, #1
 80078d6:	3b01      	subs	r3, #1
 80078d8:	041b      	lsls	r3, r3, #16
 80078da:	431a      	orrs	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e0:	061b      	lsls	r3, r3, #24
 80078e2:	491b      	ldr	r1, [pc, #108]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007958 <HAL_RCC_OscConfig+0x478>)
 80078ea:	2201      	movs	r2, #1
 80078ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ee:	f7fa fb7b 	bl	8001fe8 <HAL_GetTick>
 80078f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078f4:	e008      	b.n	8007908 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078f6:	f7fa fb77 	bl	8001fe8 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e05c      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007908:	4b11      	ldr	r3, [pc, #68]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d0f0      	beq.n	80078f6 <HAL_RCC_OscConfig+0x416>
 8007914:	e054      	b.n	80079c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007916:	4b10      	ldr	r3, [pc, #64]	@ (8007958 <HAL_RCC_OscConfig+0x478>)
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800791c:	f7fa fb64 	bl	8001fe8 <HAL_GetTick>
 8007920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007924:	f7fa fb60 	bl	8001fe8 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b02      	cmp	r3, #2
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e045      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007936:	4b06      	ldr	r3, [pc, #24]	@ (8007950 <HAL_RCC_OscConfig+0x470>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f0      	bne.n	8007924 <HAL_RCC_OscConfig+0x444>
 8007942:	e03d      	b.n	80079c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d107      	bne.n	800795c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e038      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
 8007950:	40023800 	.word	0x40023800
 8007954:	40007000 	.word	0x40007000
 8007958:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800795c:	4b1b      	ldr	r3, [pc, #108]	@ (80079cc <HAL_RCC_OscConfig+0x4ec>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d028      	beq.n	80079bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007974:	429a      	cmp	r2, r3
 8007976:	d121      	bne.n	80079bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007982:	429a      	cmp	r2, r3
 8007984:	d11a      	bne.n	80079bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800798c:	4013      	ands	r3, r2
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007992:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007994:	4293      	cmp	r3, r2
 8007996:	d111      	bne.n	80079bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a2:	085b      	lsrs	r3, r3, #1
 80079a4:	3b01      	subs	r3, #1
 80079a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d107      	bne.n	80079bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d001      	beq.n	80079c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e000      	b.n	80079c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	40023800 	.word	0x40023800

080079d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e0cc      	b.n	8007b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079e4:	4b68      	ldr	r3, [pc, #416]	@ (8007b88 <HAL_RCC_ClockConfig+0x1b8>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0307 	and.w	r3, r3, #7
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d90c      	bls.n	8007a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079f2:	4b65      	ldr	r3, [pc, #404]	@ (8007b88 <HAL_RCC_ClockConfig+0x1b8>)
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	b2d2      	uxtb	r2, r2
 80079f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079fa:	4b63      	ldr	r3, [pc, #396]	@ (8007b88 <HAL_RCC_ClockConfig+0x1b8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d001      	beq.n	8007a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e0b8      	b.n	8007b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d020      	beq.n	8007a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d005      	beq.n	8007a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a24:	4b59      	ldr	r3, [pc, #356]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	4a58      	ldr	r2, [pc, #352]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007a2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007a2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0308 	and.w	r3, r3, #8
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d005      	beq.n	8007a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a3c:	4b53      	ldr	r3, [pc, #332]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	4a52      	ldr	r2, [pc, #328]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007a42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a48:	4b50      	ldr	r3, [pc, #320]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	494d      	ldr	r1, [pc, #308]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d044      	beq.n	8007af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d107      	bne.n	8007a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a6e:	4b47      	ldr	r3, [pc, #284]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d119      	bne.n	8007aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e07f      	b.n	8007b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d003      	beq.n	8007a8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d107      	bne.n	8007a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d109      	bne.n	8007aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e06f      	b.n	8007b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e067      	b.n	8007b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007aae:	4b37      	ldr	r3, [pc, #220]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f023 0203 	bic.w	r2, r3, #3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	4934      	ldr	r1, [pc, #208]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ac0:	f7fa fa92 	bl	8001fe8 <HAL_GetTick>
 8007ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ac6:	e00a      	b.n	8007ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ac8:	f7fa fa8e 	bl	8001fe8 <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d901      	bls.n	8007ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e04f      	b.n	8007b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ade:	4b2b      	ldr	r3, [pc, #172]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f003 020c 	and.w	r2, r3, #12
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d1eb      	bne.n	8007ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007af0:	4b25      	ldr	r3, [pc, #148]	@ (8007b88 <HAL_RCC_ClockConfig+0x1b8>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0307 	and.w	r3, r3, #7
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d20c      	bcs.n	8007b18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007afe:	4b22      	ldr	r3, [pc, #136]	@ (8007b88 <HAL_RCC_ClockConfig+0x1b8>)
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b06:	4b20      	ldr	r3, [pc, #128]	@ (8007b88 <HAL_RCC_ClockConfig+0x1b8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0307 	and.w	r3, r3, #7
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d001      	beq.n	8007b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e032      	b.n	8007b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d008      	beq.n	8007b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b24:	4b19      	ldr	r3, [pc, #100]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	4916      	ldr	r1, [pc, #88]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0308 	and.w	r3, r3, #8
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d009      	beq.n	8007b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b42:	4b12      	ldr	r3, [pc, #72]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	490e      	ldr	r1, [pc, #56]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b56:	f000 f821 	bl	8007b9c <HAL_RCC_GetSysClockFreq>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b8c <HAL_RCC_ClockConfig+0x1bc>)
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	091b      	lsrs	r3, r3, #4
 8007b62:	f003 030f 	and.w	r3, r3, #15
 8007b66:	490a      	ldr	r1, [pc, #40]	@ (8007b90 <HAL_RCC_ClockConfig+0x1c0>)
 8007b68:	5ccb      	ldrb	r3, [r1, r3]
 8007b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6e:	4a09      	ldr	r2, [pc, #36]	@ (8007b94 <HAL_RCC_ClockConfig+0x1c4>)
 8007b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007b72:	4b09      	ldr	r3, [pc, #36]	@ (8007b98 <HAL_RCC_ClockConfig+0x1c8>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fa f9f2 	bl	8001f60 <HAL_InitTick>

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	40023c00 	.word	0x40023c00
 8007b8c:	40023800 	.word	0x40023800
 8007b90:	080107c8 	.word	0x080107c8
 8007b94:	20000038 	.word	0x20000038
 8007b98:	20000040 	.word	0x20000040

08007b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ba0:	b094      	sub	sp, #80	@ 0x50
 8007ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bb4:	4b79      	ldr	r3, [pc, #484]	@ (8007d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f003 030c 	and.w	r3, r3, #12
 8007bbc:	2b08      	cmp	r3, #8
 8007bbe:	d00d      	beq.n	8007bdc <HAL_RCC_GetSysClockFreq+0x40>
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	f200 80e1 	bhi.w	8007d88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	d003      	beq.n	8007bd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007bce:	e0db      	b.n	8007d88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007bd0:	4b73      	ldr	r3, [pc, #460]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007bd4:	e0db      	b.n	8007d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007bd6:	4b73      	ldr	r3, [pc, #460]	@ (8007da4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007bda:	e0d8      	b.n	8007d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8007d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007be4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007be6:	4b6d      	ldr	r3, [pc, #436]	@ (8007d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d063      	beq.n	8007cba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8007d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	099b      	lsrs	r3, r3, #6
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c06:	2300      	movs	r3, #0
 8007c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007c0e:	4622      	mov	r2, r4
 8007c10:	462b      	mov	r3, r5
 8007c12:	f04f 0000 	mov.w	r0, #0
 8007c16:	f04f 0100 	mov.w	r1, #0
 8007c1a:	0159      	lsls	r1, r3, #5
 8007c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c20:	0150      	lsls	r0, r2, #5
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4621      	mov	r1, r4
 8007c28:	1a51      	subs	r1, r2, r1
 8007c2a:	6139      	str	r1, [r7, #16]
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8007c32:	617b      	str	r3, [r7, #20]
 8007c34:	f04f 0200 	mov.w	r2, #0
 8007c38:	f04f 0300 	mov.w	r3, #0
 8007c3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c40:	4659      	mov	r1, fp
 8007c42:	018b      	lsls	r3, r1, #6
 8007c44:	4651      	mov	r1, sl
 8007c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c4a:	4651      	mov	r1, sl
 8007c4c:	018a      	lsls	r2, r1, #6
 8007c4e:	4651      	mov	r1, sl
 8007c50:	ebb2 0801 	subs.w	r8, r2, r1
 8007c54:	4659      	mov	r1, fp
 8007c56:	eb63 0901 	sbc.w	r9, r3, r1
 8007c5a:	f04f 0200 	mov.w	r2, #0
 8007c5e:	f04f 0300 	mov.w	r3, #0
 8007c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c6e:	4690      	mov	r8, r2
 8007c70:	4699      	mov	r9, r3
 8007c72:	4623      	mov	r3, r4
 8007c74:	eb18 0303 	adds.w	r3, r8, r3
 8007c78:	60bb      	str	r3, [r7, #8]
 8007c7a:	462b      	mov	r3, r5
 8007c7c:	eb49 0303 	adc.w	r3, r9, r3
 8007c80:	60fb      	str	r3, [r7, #12]
 8007c82:	f04f 0200 	mov.w	r2, #0
 8007c86:	f04f 0300 	mov.w	r3, #0
 8007c8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007c8e:	4629      	mov	r1, r5
 8007c90:	024b      	lsls	r3, r1, #9
 8007c92:	4621      	mov	r1, r4
 8007c94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007c98:	4621      	mov	r1, r4
 8007c9a:	024a      	lsls	r2, r1, #9
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ca8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007cac:	f7f8 fa8c 	bl	80001c8 <__aeabi_uldivmod>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cb8:	e058      	b.n	8007d6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cba:	4b38      	ldr	r3, [pc, #224]	@ (8007d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	099b      	lsrs	r3, r3, #6
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007cca:	623b      	str	r3, [r7, #32]
 8007ccc:	2300      	movs	r3, #0
 8007cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007cd4:	4642      	mov	r2, r8
 8007cd6:	464b      	mov	r3, r9
 8007cd8:	f04f 0000 	mov.w	r0, #0
 8007cdc:	f04f 0100 	mov.w	r1, #0
 8007ce0:	0159      	lsls	r1, r3, #5
 8007ce2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ce6:	0150      	lsls	r0, r2, #5
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	4641      	mov	r1, r8
 8007cee:	ebb2 0a01 	subs.w	sl, r2, r1
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007d04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007d08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007d0c:	ebb2 040a 	subs.w	r4, r2, sl
 8007d10:	eb63 050b 	sbc.w	r5, r3, fp
 8007d14:	f04f 0200 	mov.w	r2, #0
 8007d18:	f04f 0300 	mov.w	r3, #0
 8007d1c:	00eb      	lsls	r3, r5, #3
 8007d1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d22:	00e2      	lsls	r2, r4, #3
 8007d24:	4614      	mov	r4, r2
 8007d26:	461d      	mov	r5, r3
 8007d28:	4643      	mov	r3, r8
 8007d2a:	18e3      	adds	r3, r4, r3
 8007d2c:	603b      	str	r3, [r7, #0]
 8007d2e:	464b      	mov	r3, r9
 8007d30:	eb45 0303 	adc.w	r3, r5, r3
 8007d34:	607b      	str	r3, [r7, #4]
 8007d36:	f04f 0200 	mov.w	r2, #0
 8007d3a:	f04f 0300 	mov.w	r3, #0
 8007d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d42:	4629      	mov	r1, r5
 8007d44:	028b      	lsls	r3, r1, #10
 8007d46:	4621      	mov	r1, r4
 8007d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	028a      	lsls	r2, r1, #10
 8007d50:	4610      	mov	r0, r2
 8007d52:	4619      	mov	r1, r3
 8007d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d56:	2200      	movs	r2, #0
 8007d58:	61bb      	str	r3, [r7, #24]
 8007d5a:	61fa      	str	r2, [r7, #28]
 8007d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d60:	f7f8 fa32 	bl	80001c8 <__aeabi_uldivmod>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	4613      	mov	r3, r2
 8007d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d9c <HAL_RCC_GetSysClockFreq+0x200>)
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	0c1b      	lsrs	r3, r3, #16
 8007d72:	f003 0303 	and.w	r3, r3, #3
 8007d76:	3301      	adds	r3, #1
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007d7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007d86:	e002      	b.n	8007d8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d88:	4b05      	ldr	r3, [pc, #20]	@ (8007da0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3750      	adds	r7, #80	@ 0x50
 8007d94:	46bd      	mov	sp, r7
 8007d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d9a:	bf00      	nop
 8007d9c:	40023800 	.word	0x40023800
 8007da0:	00f42400 	.word	0x00f42400
 8007da4:	007a1200 	.word	0x007a1200

08007da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007da8:	b480      	push	{r7}
 8007daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dac:	4b03      	ldr	r3, [pc, #12]	@ (8007dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8007dae:	681b      	ldr	r3, [r3, #0]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	20000038 	.word	0x20000038

08007dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007dc4:	f7ff fff0 	bl	8007da8 <HAL_RCC_GetHCLKFreq>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	4b05      	ldr	r3, [pc, #20]	@ (8007de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	0a9b      	lsrs	r3, r3, #10
 8007dd0:	f003 0307 	and.w	r3, r3, #7
 8007dd4:	4903      	ldr	r1, [pc, #12]	@ (8007de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dd6:	5ccb      	ldrb	r3, [r1, r3]
 8007dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	40023800 	.word	0x40023800
 8007de4:	080107d8 	.word	0x080107d8

08007de8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d105      	bne.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d035      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e10:	4b62      	ldr	r3, [pc, #392]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e16:	f7fa f8e7 	bl	8001fe8 <HAL_GetTick>
 8007e1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e1c:	e008      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e1e:	f7fa f8e3 	bl	8001fe8 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e0b0      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e30:	4b5b      	ldr	r3, [pc, #364]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1f0      	bne.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	019a      	lsls	r2, r3, #6
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	071b      	lsls	r3, r3, #28
 8007e48:	4955      	ldr	r1, [pc, #340]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e50:	4b52      	ldr	r3, [pc, #328]	@ (8007f9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007e52:	2201      	movs	r2, #1
 8007e54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e56:	f7fa f8c7 	bl	8001fe8 <HAL_GetTick>
 8007e5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e5c:	e008      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e5e:	f7fa f8c3 	bl	8001fe8 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d901      	bls.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e090      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e70:	4b4b      	ldr	r3, [pc, #300]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d0f0      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 8083 	beq.w	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	4b44      	ldr	r3, [pc, #272]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e92:	4a43      	ldr	r2, [pc, #268]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e9a:	4b41      	ldr	r3, [pc, #260]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a3e      	ldr	r2, [pc, #248]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eb0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007eb2:	f7fa f899 	bl	8001fe8 <HAL_GetTick>
 8007eb6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007eb8:	e008      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eba:	f7fa f895 	bl	8001fe8 <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d901      	bls.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e062      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007ecc:	4b35      	ldr	r3, [pc, #212]	@ (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0f0      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ed8:	4b31      	ldr	r3, [pc, #196]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007edc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ee0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d02f      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d028      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007efa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007efe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f00:	4b29      	ldr	r3, [pc, #164]	@ (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007f02:	2201      	movs	r2, #1
 8007f04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f06:	4b28      	ldr	r3, [pc, #160]	@ (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007f0c:	4a24      	ldr	r2, [pc, #144]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007f12:	4b23      	ldr	r3, [pc, #140]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d114      	bne.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007f1e:	f7fa f863 	bl	8001fe8 <HAL_GetTick>
 8007f22:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f24:	e00a      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f26:	f7fa f85f 	bl	8001fe8 <HAL_GetTick>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d901      	bls.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e02a      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f3c:	4b18      	ldr	r3, [pc, #96]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f40:	f003 0302 	and.w	r3, r3, #2
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d0ee      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f54:	d10d      	bne.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007f56:	4b12      	ldr	r3, [pc, #72]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007f66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f6a:	490d      	ldr	r1, [pc, #52]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	608b      	str	r3, [r1, #8]
 8007f70:	e005      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007f72:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	4a0a      	ldr	r2, [pc, #40]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f78:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007f7c:	6093      	str	r3, [r2, #8]
 8007f7e:	4b08      	ldr	r3, [pc, #32]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f80:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f8a:	4905      	ldr	r1, [pc, #20]	@ (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	42470068 	.word	0x42470068
 8007fa0:	40023800 	.word	0x40023800
 8007fa4:	40007000 	.word	0x40007000
 8007fa8:	42470e40 	.word	0x42470e40

08007fac <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2203      	movs	r2, #3
 8007fb8:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007fba:	4b11      	ldr	r3, [pc, #68]	@ (8008000 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fc0:	099b      	lsrs	r3, r3, #6
 8007fc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007fca:	4b0d      	ldr	r3, [pc, #52]	@ (8008000 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fd0:	0f1b      	lsrs	r3, r3, #28
 8007fd2:	f003 0207 	and.w	r2, r3, #7
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007fda:	4b09      	ldr	r3, [pc, #36]	@ (8008000 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007fe2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007fe4:	4b06      	ldr	r3, [pc, #24]	@ (8008000 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fe8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8007ff4:	bf00      	nop
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	40023800 	.word	0x40023800

08008004 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008004:	b480      	push	{r7}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008014:	2300      	movs	r3, #0
 8008016:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d13f      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008022:	4b24      	ldr	r3, [pc, #144]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d006      	beq.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008038:	d12f      	bne.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800803a:	4b1f      	ldr	r3, [pc, #124]	@ (80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800803c:	617b      	str	r3, [r7, #20]
          break;
 800803e:	e02f      	b.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008040:	4b1c      	ldr	r3, [pc, #112]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008048:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800804c:	d108      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800804e:	4b19      	ldr	r3, [pc, #100]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008056:	4a19      	ldr	r2, [pc, #100]	@ (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008058:	fbb2 f3f3 	udiv	r3, r2, r3
 800805c:	613b      	str	r3, [r7, #16]
 800805e:	e007      	b.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008060:	4b14      	ldr	r3, [pc, #80]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008068:	4a15      	ldr	r2, [pc, #84]	@ (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800806a:	fbb2 f3f3 	udiv	r3, r2, r3
 800806e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008070:	4b10      	ldr	r3, [pc, #64]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008076:	099b      	lsrs	r3, r3, #6
 8008078:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	fb02 f303 	mul.w	r3, r2, r3
 8008082:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008084:	4b0b      	ldr	r3, [pc, #44]	@ (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800808a:	0f1b      	lsrs	r3, r3, #28
 800808c:	f003 0307 	and.w	r3, r3, #7
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	fbb2 f3f3 	udiv	r3, r2, r3
 8008096:	617b      	str	r3, [r7, #20]
          break;
 8008098:	e002      	b.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	617b      	str	r3, [r7, #20]
          break;
 800809e:	bf00      	nop
        }
      }
      break;
 80080a0:	e000      	b.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80080a2:	bf00      	nop
    }
  }
  return frequency;
 80080a4:	697b      	ldr	r3, [r7, #20]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	371c      	adds	r7, #28
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	40023800 	.word	0x40023800
 80080b8:	00bb8000 	.word	0x00bb8000
 80080bc:	007a1200 	.word	0x007a1200
 80080c0:	00f42400 	.word	0x00f42400

080080c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080c4:	b084      	sub	sp, #16
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b084      	sub	sp, #16
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	f107 001c 	add.w	r0, r7, #28
 80080d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080d6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d123      	bne.n	8008126 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80080f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008106:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800810a:	2b01      	cmp	r3, #1
 800810c:	d105      	bne.n	800811a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f9dc 	bl	80084d8 <USB_CoreReset>
 8008120:	4603      	mov	r3, r0
 8008122:	73fb      	strb	r3, [r7, #15]
 8008124:	e01b      	b.n	800815e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f9d0 	bl	80084d8 <USB_CoreReset>
 8008138:	4603      	mov	r3, r0
 800813a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800813c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008140:	2b00      	cmp	r3, #0
 8008142:	d106      	bne.n	8008152 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008148:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008150:	e005      	b.n	800815e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008156:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800815e:	7fbb      	ldrb	r3, [r7, #30]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d10b      	bne.n	800817c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f043 0206 	orr.w	r2, r3, #6
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f043 0220 	orr.w	r2, r3, #32
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008188:	b004      	add	sp, #16
 800818a:	4770      	bx	lr

0800818c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f043 0201 	orr.w	r2, r3, #1
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b083      	sub	sp, #12
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f023 0201 	bic.w	r2, r3, #1
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80081ec:	78fb      	ldrb	r3, [r7, #3]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d115      	bne.n	800821e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80081fe:	200a      	movs	r0, #10
 8008200:	f7f9 fefe 	bl	8002000 <HAL_Delay>
      ms += 10U;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	330a      	adds	r3, #10
 8008208:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f956 	bl	80084bc <USB_GetMode>
 8008210:	4603      	mov	r3, r0
 8008212:	2b01      	cmp	r3, #1
 8008214:	d01e      	beq.n	8008254 <USB_SetCurrentMode+0x84>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2bc7      	cmp	r3, #199	@ 0xc7
 800821a:	d9f0      	bls.n	80081fe <USB_SetCurrentMode+0x2e>
 800821c:	e01a      	b.n	8008254 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800821e:	78fb      	ldrb	r3, [r7, #3]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d115      	bne.n	8008250 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008230:	200a      	movs	r0, #10
 8008232:	f7f9 fee5 	bl	8002000 <HAL_Delay>
      ms += 10U;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	330a      	adds	r3, #10
 800823a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f93d 	bl	80084bc <USB_GetMode>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d005      	beq.n	8008254 <USB_SetCurrentMode+0x84>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2bc7      	cmp	r3, #199	@ 0xc7
 800824c:	d9f0      	bls.n	8008230 <USB_SetCurrentMode+0x60>
 800824e:	e001      	b.n	8008254 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e005      	b.n	8008260 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2bc8      	cmp	r3, #200	@ 0xc8
 8008258:	d101      	bne.n	800825e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e000      	b.n	8008260 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3301      	adds	r3, #1
 800827a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008282:	d901      	bls.n	8008288 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e01b      	b.n	80082c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	2b00      	cmp	r3, #0
 800828e:	daf2      	bge.n	8008276 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	019b      	lsls	r3, r3, #6
 8008298:	f043 0220 	orr.w	r2, r3, #32
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3301      	adds	r3, #1
 80082a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082ac:	d901      	bls.n	80082b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e006      	b.n	80082c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	f003 0320 	and.w	r3, r3, #32
 80082ba:	2b20      	cmp	r3, #32
 80082bc:	d0f0      	beq.n	80082a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	3301      	adds	r3, #1
 80082dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082e4:	d901      	bls.n	80082ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e018      	b.n	800831c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	daf2      	bge.n	80082d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2210      	movs	r2, #16
 80082fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3301      	adds	r3, #1
 8008300:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008308:	d901      	bls.n	800830e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e006      	b.n	800831c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	f003 0310 	and.w	r3, r3, #16
 8008316:	2b10      	cmp	r3, #16
 8008318:	d0f0      	beq.n	80082fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008328:	b480      	push	{r7}
 800832a:	b089      	sub	sp, #36	@ 0x24
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	4611      	mov	r1, r2
 8008334:	461a      	mov	r2, r3
 8008336:	460b      	mov	r3, r1
 8008338:	71fb      	strb	r3, [r7, #7]
 800833a:	4613      	mov	r3, r2
 800833c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008346:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800834a:	2b00      	cmp	r3, #0
 800834c:	d123      	bne.n	8008396 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800834e:	88bb      	ldrh	r3, [r7, #4]
 8008350:	3303      	adds	r3, #3
 8008352:	089b      	lsrs	r3, r3, #2
 8008354:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008356:	2300      	movs	r3, #0
 8008358:	61bb      	str	r3, [r7, #24]
 800835a:	e018      	b.n	800838e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800835c:	79fb      	ldrb	r3, [r7, #7]
 800835e:	031a      	lsls	r2, r3, #12
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	4413      	add	r3, r2
 8008364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008368:	461a      	mov	r2, r3
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	3301      	adds	r3, #1
 8008374:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	3301      	adds	r3, #1
 800837a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	3301      	adds	r3, #1
 8008380:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	3301      	adds	r3, #1
 8008386:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	3301      	adds	r3, #1
 800838c:	61bb      	str	r3, [r7, #24]
 800838e:	69ba      	ldr	r2, [r7, #24]
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	429a      	cmp	r2, r3
 8008394:	d3e2      	bcc.n	800835c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3724      	adds	r7, #36	@ 0x24
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b08b      	sub	sp, #44	@ 0x2c
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	4613      	mov	r3, r2
 80083b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80083ba:	88fb      	ldrh	r3, [r7, #6]
 80083bc:	089b      	lsrs	r3, r3, #2
 80083be:	b29b      	uxth	r3, r3
 80083c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80083c2:	88fb      	ldrh	r3, [r7, #6]
 80083c4:	f003 0303 	and.w	r3, r3, #3
 80083c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80083ca:	2300      	movs	r3, #0
 80083cc:	623b      	str	r3, [r7, #32]
 80083ce:	e014      	b.n	80083fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083da:	601a      	str	r2, [r3, #0]
    pDest++;
 80083dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083de:	3301      	adds	r3, #1
 80083e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80083e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e4:	3301      	adds	r3, #1
 80083e6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80083e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ea:	3301      	adds	r3, #1
 80083ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f0:	3301      	adds	r3, #1
 80083f2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	3301      	adds	r3, #1
 80083f8:	623b      	str	r3, [r7, #32]
 80083fa:	6a3a      	ldr	r2, [r7, #32]
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d3e6      	bcc.n	80083d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008402:	8bfb      	ldrh	r3, [r7, #30]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d01e      	beq.n	8008446 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008412:	461a      	mov	r2, r3
 8008414:	f107 0310 	add.w	r3, r7, #16
 8008418:	6812      	ldr	r2, [r2, #0]
 800841a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	b2db      	uxtb	r3, r3
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	fa22 f303 	lsr.w	r3, r2, r3
 8008428:	b2da      	uxtb	r2, r3
 800842a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842c:	701a      	strb	r2, [r3, #0]
      i++;
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	3301      	adds	r3, #1
 8008432:	623b      	str	r3, [r7, #32]
      pDest++;
 8008434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008436:	3301      	adds	r3, #1
 8008438:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800843a:	8bfb      	ldrh	r3, [r7, #30]
 800843c:	3b01      	subs	r3, #1
 800843e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008440:	8bfb      	ldrh	r3, [r7, #30]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1ea      	bne.n	800841c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008448:	4618      	mov	r0, r3
 800844a:	372c      	adds	r7, #44	@ 0x2c
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4013      	ands	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800846c:	68fb      	ldr	r3, [r7, #12]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800847a:	b480      	push	{r7}
 800847c:	b085      	sub	sp, #20
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800848a:	78fb      	ldrb	r3, [r7, #3]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4413      	add	r3, r2
 8008492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800849a:	78fb      	ldrb	r3, [r7, #3]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	4013      	ands	r3, r2
 80084ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084ae:	68bb      	ldr	r3, [r7, #8]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	f003 0301 	and.w	r3, r3, #1
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3301      	adds	r3, #1
 80084e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084f0:	d901      	bls.n	80084f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e01b      	b.n	800852e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	daf2      	bge.n	80084e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	f043 0201 	orr.w	r2, r3, #1
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3301      	adds	r3, #1
 8008512:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800851a:	d901      	bls.n	8008520 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e006      	b.n	800852e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b01      	cmp	r3, #1
 800852a:	d0f0      	beq.n	800850e <USB_CoreReset+0x36>

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
	...

0800853c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800853c:	b084      	sub	sp, #16
 800853e:	b580      	push	{r7, lr}
 8008540:	b086      	sub	sp, #24
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800854a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800855c:	461a      	mov	r2, r3
 800855e:	2300      	movs	r3, #0
 8008560:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008566:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008572:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800857e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800858e:	2b00      	cmp	r3, #0
 8008590:	d119      	bne.n	80085c6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008592:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008596:	2b01      	cmp	r3, #1
 8008598:	d10a      	bne.n	80085b0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80085a8:	f043 0304 	orr.w	r3, r3, #4
 80085ac:	6013      	str	r3, [r2, #0]
 80085ae:	e014      	b.n	80085da <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80085be:	f023 0304 	bic.w	r3, r3, #4
 80085c2:	6013      	str	r3, [r2, #0]
 80085c4:	e009      	b.n	80085da <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80085d4:	f023 0304 	bic.w	r3, r3, #4
 80085d8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80085da:	2110      	movs	r1, #16
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff fe43 	bl	8008268 <USB_FlushTxFifo>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff fe6d 	bl	80082cc <USB_FlushRxFifo>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80085fc:	2300      	movs	r3, #0
 80085fe:	613b      	str	r3, [r7, #16]
 8008600:	e015      	b.n	800862e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	015a      	lsls	r2, r3, #5
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4413      	add	r3, r2
 800860a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800860e:	461a      	mov	r2, r3
 8008610:	f04f 33ff 	mov.w	r3, #4294967295
 8008614:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	4413      	add	r3, r2
 800861e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008622:	461a      	mov	r2, r3
 8008624:	2300      	movs	r3, #0
 8008626:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	3301      	adds	r3, #1
 800862c:	613b      	str	r3, [r7, #16]
 800862e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008632:	461a      	mov	r2, r3
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	4293      	cmp	r3, r2
 8008638:	d3e3      	bcc.n	8008602 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f04f 32ff 	mov.w	r2, #4294967295
 8008646:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a18      	ldr	r2, [pc, #96]	@ (80086ac <USB_HostInit+0x170>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d10b      	bne.n	8008668 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008656:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a15      	ldr	r2, [pc, #84]	@ (80086b0 <USB_HostInit+0x174>)
 800865c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a14      	ldr	r2, [pc, #80]	@ (80086b4 <USB_HostInit+0x178>)
 8008662:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008666:	e009      	b.n	800867c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2280      	movs	r2, #128	@ 0x80
 800866c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a11      	ldr	r2, [pc, #68]	@ (80086b8 <USB_HostInit+0x17c>)
 8008672:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a11      	ldr	r2, [pc, #68]	@ (80086bc <USB_HostInit+0x180>)
 8008678:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800867c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008680:	2b00      	cmp	r3, #0
 8008682:	d105      	bne.n	8008690 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	f043 0210 	orr.w	r2, r3, #16
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	699a      	ldr	r2, [r3, #24]
 8008694:	4b0a      	ldr	r3, [pc, #40]	@ (80086c0 <USB_HostInit+0x184>)
 8008696:	4313      	orrs	r3, r2
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800869c:	7dfb      	ldrb	r3, [r7, #23]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086a8:	b004      	add	sp, #16
 80086aa:	4770      	bx	lr
 80086ac:	40040000 	.word	0x40040000
 80086b0:	01000200 	.word	0x01000200
 80086b4:	00e00300 	.word	0x00e00300
 80086b8:	00600080 	.word	0x00600080
 80086bc:	004000e0 	.word	0x004000e0
 80086c0:	a3200008 	.word	0xa3200008

080086c4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80086e2:	f023 0303 	bic.w	r3, r3, #3
 80086e6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	68f9      	ldr	r1, [r7, #12]
 80086f8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80086fc:	4313      	orrs	r3, r2
 80086fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d107      	bne.n	8008716 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800870c:	461a      	mov	r2, r3
 800870e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008712:	6053      	str	r3, [r2, #4]
 8008714:	e00c      	b.n	8008730 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008716:	78fb      	ldrb	r3, [r7, #3]
 8008718:	2b02      	cmp	r3, #2
 800871a:	d107      	bne.n	800872c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008722:	461a      	mov	r2, r3
 8008724:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008728:	6053      	str	r3, [r2, #4]
 800872a:	e001      	b.n	8008730 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e000      	b.n	8008732 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800875e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800876c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800876e:	2064      	movs	r0, #100	@ 0x64
 8008770:	f7f9 fc46 	bl	8002000 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800877c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008780:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008782:	200a      	movs	r0, #10
 8008784:	f7f9 fc3c 	bl	8002000 <HAL_Delay>

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008792:	b480      	push	{r7}
 8008794:	b085      	sub	sp, #20
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	460b      	mov	r3, r1
 800879c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80087b6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d109      	bne.n	80087d6 <USB_DriveVbus+0x44>
 80087c2:	78fb      	ldrb	r3, [r7, #3]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d106      	bne.n	80087d6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80087d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80087d4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80087dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087e0:	d109      	bne.n	80087f6 <USB_DriveVbus+0x64>
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d106      	bne.n	80087f6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80087f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087f4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	0c5b      	lsrs	r3, r3, #17
 8008822:	f003 0303 	and.w	r3, r3, #3
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	b29b      	uxth	r3, r3
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b088      	sub	sp, #32
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	4608      	mov	r0, r1
 800885e:	4611      	mov	r1, r2
 8008860:	461a      	mov	r2, r3
 8008862:	4603      	mov	r3, r0
 8008864:	70fb      	strb	r3, [r7, #3]
 8008866:	460b      	mov	r3, r1
 8008868:	70bb      	strb	r3, [r7, #2]
 800886a:	4613      	mov	r3, r2
 800886c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008876:	78fb      	ldrb	r3, [r7, #3]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	4413      	add	r3, r2
 800887e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008882:	461a      	mov	r2, r3
 8008884:	f04f 33ff 	mov.w	r3, #4294967295
 8008888:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800888a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800888e:	2b03      	cmp	r3, #3
 8008890:	d87c      	bhi.n	800898c <USB_HC_Init+0x138>
 8008892:	a201      	add	r2, pc, #4	@ (adr r2, 8008898 <USB_HC_Init+0x44>)
 8008894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008898:	080088a9 	.word	0x080088a9
 800889c:	0800894f 	.word	0x0800894f
 80088a0:	080088a9 	.word	0x080088a9
 80088a4:	08008911 	.word	0x08008911
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088b4:	461a      	mov	r2, r3
 80088b6:	f240 439d 	movw	r3, #1181	@ 0x49d
 80088ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80088bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	da10      	bge.n	80088e6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	78fa      	ldrb	r2, [r7, #3]
 80088d4:	0151      	lsls	r1, r2, #5
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	440a      	add	r2, r1
 80088da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088e2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80088e4:	e055      	b.n	8008992 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a6f      	ldr	r2, [pc, #444]	@ (8008aa8 <USB_HC_Init+0x254>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d151      	bne.n	8008992 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80088ee:	78fb      	ldrb	r3, [r7, #3]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	0151      	lsls	r1, r2, #5
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	440a      	add	r2, r1
 8008904:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008908:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800890c:	60d3      	str	r3, [r2, #12]
      break;
 800890e:	e040      	b.n	8008992 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008910:	78fb      	ldrb	r3, [r7, #3]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	4413      	add	r3, r2
 8008918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800891c:	461a      	mov	r2, r3
 800891e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008922:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008924:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008928:	2b00      	cmp	r3, #0
 800892a:	da34      	bge.n	8008996 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800892c:	78fb      	ldrb	r3, [r7, #3]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	4413      	add	r3, r2
 8008934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	78fa      	ldrb	r2, [r7, #3]
 800893c:	0151      	lsls	r1, r2, #5
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	440a      	add	r2, r1
 8008942:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800894a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800894c:	e023      	b.n	8008996 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800894e:	78fb      	ldrb	r3, [r7, #3]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	4413      	add	r3, r2
 8008956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800895a:	461a      	mov	r2, r3
 800895c:	f240 2325 	movw	r3, #549	@ 0x225
 8008960:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008962:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008966:	2b00      	cmp	r3, #0
 8008968:	da17      	bge.n	800899a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800896a:	78fb      	ldrb	r3, [r7, #3]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	4413      	add	r3, r2
 8008972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	78fa      	ldrb	r2, [r7, #3]
 800897a:	0151      	lsls	r1, r2, #5
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	440a      	add	r2, r1
 8008980:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008984:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008988:	60d3      	str	r3, [r2, #12]
      }
      break;
 800898a:	e006      	b.n	800899a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	77fb      	strb	r3, [r7, #31]
      break;
 8008990:	e004      	b.n	800899c <USB_HC_Init+0x148>
      break;
 8008992:	bf00      	nop
 8008994:	e002      	b.n	800899c <USB_HC_Init+0x148>
      break;
 8008996:	bf00      	nop
 8008998:	e000      	b.n	800899c <USB_HC_Init+0x148>
      break;
 800899a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800899c:	78fb      	ldrb	r3, [r7, #3]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089a8:	461a      	mov	r2, r3
 80089aa:	2300      	movs	r3, #0
 80089ac:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80089ae:	78fb      	ldrb	r3, [r7, #3]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	78fa      	ldrb	r2, [r7, #3]
 80089be:	0151      	lsls	r1, r2, #5
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	440a      	add	r2, r1
 80089c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089c8:	f043 0302 	orr.w	r3, r3, #2
 80089cc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80089d4:	699a      	ldr	r2, [r3, #24]
 80089d6:	78fb      	ldrb	r3, [r7, #3]
 80089d8:	f003 030f 	and.w	r3, r3, #15
 80089dc:	2101      	movs	r1, #1
 80089de:	fa01 f303 	lsl.w	r3, r1, r3
 80089e2:	6939      	ldr	r1, [r7, #16]
 80089e4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80089e8:	4313      	orrs	r3, r2
 80089ea:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80089f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	da03      	bge.n	8008a08 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008a00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a04:	61bb      	str	r3, [r7, #24]
 8008a06:	e001      	b.n	8008a0c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7ff fef9 	bl	8008804 <USB_GetHostSpeed>
 8008a12:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008a14:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d106      	bne.n	8008a2a <USB_HC_Init+0x1d6>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d003      	beq.n	8008a2a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008a22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	e001      	b.n	8008a2e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a2e:	787b      	ldrb	r3, [r7, #1]
 8008a30:	059b      	lsls	r3, r3, #22
 8008a32:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008a36:	78bb      	ldrb	r3, [r7, #2]
 8008a38:	02db      	lsls	r3, r3, #11
 8008a3a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a3e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008a40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a44:	049b      	lsls	r3, r3, #18
 8008a46:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008a4a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008a4c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008a52:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	431a      	orrs	r2, r3
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a5c:	78fa      	ldrb	r2, [r7, #3]
 8008a5e:	0151      	lsls	r1, r2, #5
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	440a      	add	r2, r1
 8008a64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008a68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a6c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008a6e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d003      	beq.n	8008a7e <USB_HC_Init+0x22a>
 8008a76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d10f      	bne.n	8008a9e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008a7e:	78fb      	ldrb	r3, [r7, #3]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	78fa      	ldrb	r2, [r7, #3]
 8008a8e:	0151      	lsls	r1, r2, #5
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	440a      	add	r2, r1
 8008a94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a9c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008a9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3720      	adds	r7, #32
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	40040000 	.word	0x40040000

08008aac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b08c      	sub	sp, #48	@ 0x30
 8008ab0:	af02      	add	r7, sp, #8
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	785b      	ldrb	r3, [r3, #1]
 8008ac2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008ac4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ac8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	4a5d      	ldr	r2, [pc, #372]	@ (8008c44 <USB_HC_StartXfer+0x198>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d12f      	bne.n	8008b32 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d11c      	bne.n	8008b12 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	7c9b      	ldrb	r3, [r3, #18]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d003      	beq.n	8008ae8 <USB_HC_StartXfer+0x3c>
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	7c9b      	ldrb	r3, [r3, #18]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d124      	bne.n	8008b32 <USB_HC_StartXfer+0x86>
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	799b      	ldrb	r3, [r3, #6]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d120      	bne.n	8008b32 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	69fa      	ldr	r2, [r7, #28]
 8008b00:	0151      	lsls	r1, r2, #5
 8008b02:	6a3a      	ldr	r2, [r7, #32]
 8008b04:	440a      	add	r2, r1
 8008b06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b0e:	60d3      	str	r3, [r2, #12]
 8008b10:	e00f      	b.n	8008b32 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	791b      	ldrb	r3, [r3, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10b      	bne.n	8008b32 <USB_HC_StartXfer+0x86>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	795b      	ldrb	r3, [r3, #5]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d107      	bne.n	8008b32 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	785b      	ldrb	r3, [r3, #1]
 8008b26:	4619      	mov	r1, r3
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 fb6b 	bl	8009204 <USB_DoPing>
        return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	e232      	b.n	8008f98 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	799b      	ldrb	r3, [r3, #6]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d158      	bne.n	8008bec <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	78db      	ldrb	r3, [r3, #3]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d007      	beq.n	8008b56 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008b46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	8a92      	ldrh	r2, [r2, #20]
 8008b4c:	fb03 f202 	mul.w	r2, r3, r2
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	61da      	str	r2, [r3, #28]
 8008b54:	e07c      	b.n	8008c50 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	7c9b      	ldrb	r3, [r3, #18]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d130      	bne.n	8008bc0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	2bbc      	cmp	r3, #188	@ 0xbc
 8008b64:	d918      	bls.n	8008b98 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	8a9b      	ldrh	r3, [r3, #20]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	69da      	ldr	r2, [r3, #28]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d003      	beq.n	8008b88 <USB_HC_StartXfer+0xdc>
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d103      	bne.n	8008b90 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	60da      	str	r2, [r3, #12]
 8008b8e:	e05f      	b.n	8008c50 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2201      	movs	r2, #1
 8008b94:	60da      	str	r2, [r3, #12]
 8008b96:	e05b      	b.n	8008c50 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	6a1a      	ldr	r2, [r3, #32]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d007      	beq.n	8008bb8 <USB_HC_StartXfer+0x10c>
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d003      	beq.n	8008bb8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2204      	movs	r2, #4
 8008bb4:	60da      	str	r2, [r3, #12]
 8008bb6:	e04b      	b.n	8008c50 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	2203      	movs	r2, #3
 8008bbc:	60da      	str	r2, [r3, #12]
 8008bbe:	e047      	b.n	8008c50 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d10d      	bne.n	8008be2 <USB_HC_StartXfer+0x136>
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	8a92      	ldrh	r2, [r2, #20]
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d907      	bls.n	8008be2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008bd2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	8a92      	ldrh	r2, [r2, #20]
 8008bd8:	fb03 f202 	mul.w	r2, r3, r2
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	61da      	str	r2, [r3, #28]
 8008be0:	e036      	b.n	8008c50 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	6a1a      	ldr	r2, [r3, #32]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	61da      	str	r2, [r3, #28]
 8008bea:	e031      	b.n	8008c50 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	6a1b      	ldr	r3, [r3, #32]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d018      	beq.n	8008c26 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	8a92      	ldrh	r2, [r2, #20]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	8a92      	ldrh	r2, [r2, #20]
 8008c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c08:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008c0a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008c0c:	8b7b      	ldrh	r3, [r7, #26]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d90b      	bls.n	8008c2a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008c12:	8b7b      	ldrh	r3, [r7, #26]
 8008c14:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008c16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	8a92      	ldrh	r2, [r2, #20]
 8008c1c:	fb03 f202 	mul.w	r2, r3, r2
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	61da      	str	r2, [r3, #28]
 8008c24:	e001      	b.n	8008c2a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008c26:	2301      	movs	r3, #1
 8008c28:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	78db      	ldrb	r3, [r3, #3]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008c32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	8a92      	ldrh	r2, [r2, #20]
 8008c38:	fb03 f202 	mul.w	r2, r3, r2
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	61da      	str	r2, [r3, #28]
 8008c40:	e006      	b.n	8008c50 <USB_HC_StartXfer+0x1a4>
 8008c42:	bf00      	nop
 8008c44:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	6a1a      	ldr	r2, [r3, #32]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c5a:	04d9      	lsls	r1, r3, #19
 8008c5c:	4ba3      	ldr	r3, [pc, #652]	@ (8008eec <USB_HC_StartXfer+0x440>)
 8008c5e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c60:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	7d9b      	ldrb	r3, [r3, #22]
 8008c66:	075b      	lsls	r3, r3, #29
 8008c68:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c6c:	69f9      	ldr	r1, [r7, #28]
 8008c6e:	0148      	lsls	r0, r1, #5
 8008c70:	6a39      	ldr	r1, [r7, #32]
 8008c72:	4401      	add	r1, r0
 8008c74:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c78:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c7a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008c7c:	79fb      	ldrb	r3, [r7, #7]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d009      	beq.n	8008c96 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	6999      	ldr	r1, [r3, #24]
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c92:	460a      	mov	r2, r1
 8008c94:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	bf0c      	ite	eq
 8008ca6:	2301      	moveq	r3, #1
 8008ca8:	2300      	movne	r3, #0
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	015a      	lsls	r2, r3, #5
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	69fa      	ldr	r2, [r7, #28]
 8008cbe:	0151      	lsls	r1, r2, #5
 8008cc0:	6a3a      	ldr	r2, [r7, #32]
 8008cc2:	440a      	add	r2, r1
 8008cc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cc8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008ccc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	6a3b      	ldr	r3, [r7, #32]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	7e7b      	ldrb	r3, [r7, #25]
 8008cde:	075b      	lsls	r3, r3, #29
 8008ce0:	69f9      	ldr	r1, [r7, #28]
 8008ce2:	0148      	lsls	r0, r1, #5
 8008ce4:	6a39      	ldr	r1, [r7, #32]
 8008ce6:	4401      	add	r1, r0
 8008ce8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008cec:	4313      	orrs	r3, r2
 8008cee:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	799b      	ldrb	r3, [r3, #6]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	f040 80c3 	bne.w	8008e80 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	7c5b      	ldrb	r3, [r3, #17]
 8008cfe:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008d04:	4313      	orrs	r3, r2
 8008d06:	69fa      	ldr	r2, [r7, #28]
 8008d08:	0151      	lsls	r1, r2, #5
 8008d0a:	6a3a      	ldr	r2, [r7, #32]
 8008d0c:	440a      	add	r2, r1
 8008d0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008d12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008d16:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	69fa      	ldr	r2, [r7, #28]
 8008d28:	0151      	lsls	r1, r2, #5
 8008d2a:	6a3a      	ldr	r2, [r7, #32]
 8008d2c:	440a      	add	r2, r1
 8008d2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d32:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008d36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	79db      	ldrb	r3, [r3, #7]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d123      	bne.n	8008d88 <USB_HC_StartXfer+0x2dc>
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	78db      	ldrb	r3, [r3, #3]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d11f      	bne.n	8008d88 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	69fa      	ldr	r2, [r7, #28]
 8008d58:	0151      	lsls	r1, r2, #5
 8008d5a:	6a3a      	ldr	r2, [r7, #32]
 8008d5c:	440a      	add	r2, r1
 8008d5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d66:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	69fa      	ldr	r2, [r7, #28]
 8008d78:	0151      	lsls	r1, r2, #5
 8008d7a:	6a3a      	ldr	r2, [r7, #32]
 8008d7c:	440a      	add	r2, r1
 8008d7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d86:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	7c9b      	ldrb	r3, [r3, #18]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d003      	beq.n	8008d98 <USB_HC_StartXfer+0x2ec>
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	7c9b      	ldrb	r3, [r3, #18]
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d117      	bne.n	8008dc8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d113      	bne.n	8008dc8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	78db      	ldrb	r3, [r3, #3]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d10f      	bne.n	8008dc8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	69fa      	ldr	r2, [r7, #28]
 8008db8:	0151      	lsls	r1, r2, #5
 8008dba:	6a3a      	ldr	r2, [r7, #32]
 8008dbc:	440a      	add	r2, r1
 8008dbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008dc6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	7c9b      	ldrb	r3, [r3, #18]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d162      	bne.n	8008e96 <USB_HC_StartXfer+0x3ea>
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	78db      	ldrb	r3, [r3, #3]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d15e      	bne.n	8008e96 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d858      	bhi.n	8008e94 <USB_HC_StartXfer+0x3e8>
 8008de2:	a201      	add	r2, pc, #4	@ (adr r2, 8008de8 <USB_HC_StartXfer+0x33c>)
 8008de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de8:	08008df9 	.word	0x08008df9
 8008dec:	08008e1b 	.word	0x08008e1b
 8008df0:	08008e3d 	.word	0x08008e3d
 8008df4:	08008e5f 	.word	0x08008e5f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	69fa      	ldr	r2, [r7, #28]
 8008e08:	0151      	lsls	r1, r2, #5
 8008e0a:	6a3a      	ldr	r2, [r7, #32]
 8008e0c:	440a      	add	r2, r1
 8008e0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e16:	6053      	str	r3, [r2, #4]
          break;
 8008e18:	e03d      	b.n	8008e96 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	015a      	lsls	r2, r3, #5
 8008e1e:	6a3b      	ldr	r3, [r7, #32]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	69fa      	ldr	r2, [r7, #28]
 8008e2a:	0151      	lsls	r1, r2, #5
 8008e2c:	6a3a      	ldr	r2, [r7, #32]
 8008e2e:	440a      	add	r2, r1
 8008e30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e34:	f043 030e 	orr.w	r3, r3, #14
 8008e38:	6053      	str	r3, [r2, #4]
          break;
 8008e3a:	e02c      	b.n	8008e96 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	69fa      	ldr	r2, [r7, #28]
 8008e4c:	0151      	lsls	r1, r2, #5
 8008e4e:	6a3a      	ldr	r2, [r7, #32]
 8008e50:	440a      	add	r2, r1
 8008e52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e5a:	6053      	str	r3, [r2, #4]
          break;
 8008e5c:	e01b      	b.n	8008e96 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	69fa      	ldr	r2, [r7, #28]
 8008e6e:	0151      	lsls	r1, r2, #5
 8008e70:	6a3a      	ldr	r2, [r7, #32]
 8008e72:	440a      	add	r2, r1
 8008e74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e7c:	6053      	str	r3, [r2, #4]
          break;
 8008e7e:	e00a      	b.n	8008e96 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	015a      	lsls	r2, r3, #5
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	2300      	movs	r3, #0
 8008e90:	6053      	str	r3, [r2, #4]
 8008e92:	e000      	b.n	8008e96 <USB_HC_StartXfer+0x3ea>
          break;
 8008e94:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008eac:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	78db      	ldrb	r3, [r3, #3]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d004      	beq.n	8008ec0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ebc:	613b      	str	r3, [r7, #16]
 8008ebe:	e003      	b.n	8008ec8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ec6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ece:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	015a      	lsls	r2, r3, #5
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008edc:	461a      	mov	r2, r3
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008ee2:	79fb      	ldrb	r3, [r7, #7]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d003      	beq.n	8008ef0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	e055      	b.n	8008f98 <USB_HC_StartXfer+0x4ec>
 8008eec:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	78db      	ldrb	r3, [r3, #3]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d14e      	bne.n	8008f96 <USB_HC_StartXfer+0x4ea>
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d04a      	beq.n	8008f96 <USB_HC_StartXfer+0x4ea>
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	79db      	ldrb	r3, [r3, #7]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d146      	bne.n	8008f96 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	7c9b      	ldrb	r3, [r3, #18]
 8008f0c:	2b03      	cmp	r3, #3
 8008f0e:	d831      	bhi.n	8008f74 <USB_HC_StartXfer+0x4c8>
 8008f10:	a201      	add	r2, pc, #4	@ (adr r2, 8008f18 <USB_HC_StartXfer+0x46c>)
 8008f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f16:	bf00      	nop
 8008f18:	08008f29 	.word	0x08008f29
 8008f1c:	08008f4d 	.word	0x08008f4d
 8008f20:	08008f29 	.word	0x08008f29
 8008f24:	08008f4d 	.word	0x08008f4d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	6a1b      	ldr	r3, [r3, #32]
 8008f2c:	3303      	adds	r3, #3
 8008f2e:	089b      	lsrs	r3, r3, #2
 8008f30:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008f32:	8afa      	ldrh	r2, [r7, #22]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d91c      	bls.n	8008f78 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	f043 0220 	orr.w	r2, r3, #32
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	619a      	str	r2, [r3, #24]
        }
        break;
 8008f4a:	e015      	b.n	8008f78 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	3303      	adds	r3, #3
 8008f52:	089b      	lsrs	r3, r3, #2
 8008f54:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008f56:	8afa      	ldrh	r2, [r7, #22]
 8008f58:	6a3b      	ldr	r3, [r7, #32]
 8008f5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d90a      	bls.n	8008f7c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	619a      	str	r2, [r3, #24]
        }
        break;
 8008f72:	e003      	b.n	8008f7c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008f74:	bf00      	nop
 8008f76:	e002      	b.n	8008f7e <USB_HC_StartXfer+0x4d2>
        break;
 8008f78:	bf00      	nop
 8008f7a:	e000      	b.n	8008f7e <USB_HC_StartXfer+0x4d2>
        break;
 8008f7c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	6999      	ldr	r1, [r3, #24]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	785a      	ldrb	r2, [r3, #1]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	9000      	str	r0, [sp, #0]
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f7ff f9c9 	bl	8008328 <USB_WritePacket>
  }

  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3728      	adds	r7, #40	@ 0x28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	b29b      	uxth	r3, r3
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	b089      	sub	sp, #36	@ 0x24
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	460b      	mov	r3, r1
 8008fcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008fd2:	78fb      	ldrb	r3, [r7, #3]
 8008fd4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	015a      	lsls	r2, r3, #5
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	0c9b      	lsrs	r3, r3, #18
 8008fea:	f003 0303 	and.w	r3, r3, #3
 8008fee:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	0fdb      	lsrs	r3, r3, #31
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	4413      	add	r3, r2
 800900e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	0fdb      	lsrs	r3, r3, #31
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f003 0320 	and.w	r3, r3, #32
 8009024:	2b20      	cmp	r3, #32
 8009026:	d10d      	bne.n	8009044 <USB_HC_Halt+0x82>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10a      	bne.n	8009044 <USB_HC_Halt+0x82>
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d005      	beq.n	8009040 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d002      	beq.n	8009040 <USB_HC_Halt+0x7e>
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2b03      	cmp	r3, #3
 800903e:	d101      	bne.n	8009044 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	e0d8      	b.n	80091f6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d002      	beq.n	8009050 <USB_HC_Halt+0x8e>
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2b02      	cmp	r3, #2
 800904e:	d173      	bne.n	8009138 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	4413      	add	r3, r2
 8009058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	0151      	lsls	r1, r2, #5
 8009062:	69fa      	ldr	r2, [r7, #28]
 8009064:	440a      	add	r2, r1
 8009066:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800906a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800906e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f003 0320 	and.w	r3, r3, #32
 8009078:	2b00      	cmp	r3, #0
 800907a:	d14a      	bne.n	8009112 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009080:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d133      	bne.n	80090f0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	015a      	lsls	r2, r3, #5
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	4413      	add	r3, r2
 8009090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	69ba      	ldr	r2, [r7, #24]
 8009098:	0151      	lsls	r1, r2, #5
 800909a:	69fa      	ldr	r2, [r7, #28]
 800909c:	440a      	add	r2, r1
 800909e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80090a6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	69ba      	ldr	r2, [r7, #24]
 80090b8:	0151      	lsls	r1, r2, #5
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	440a      	add	r2, r1
 80090be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090c6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	3301      	adds	r3, #1
 80090cc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090d4:	d82e      	bhi.n	8009134 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090ec:	d0ec      	beq.n	80090c8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80090ee:	e081      	b.n	80091f4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	69ba      	ldr	r2, [r7, #24]
 8009100:	0151      	lsls	r1, r2, #5
 8009102:	69fa      	ldr	r2, [r7, #28]
 8009104:	440a      	add	r2, r1
 8009106:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800910a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800910e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009110:	e070      	b.n	80091f4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	4413      	add	r3, r2
 800911a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	69ba      	ldr	r2, [r7, #24]
 8009122:	0151      	lsls	r1, r2, #5
 8009124:	69fa      	ldr	r2, [r7, #28]
 8009126:	440a      	add	r2, r1
 8009128:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800912c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009130:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009132:	e05f      	b.n	80091f4 <USB_HC_Halt+0x232>
            break;
 8009134:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009136:	e05d      	b.n	80091f4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	015a      	lsls	r2, r3, #5
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	4413      	add	r3, r2
 8009140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	69ba      	ldr	r2, [r7, #24]
 8009148:	0151      	lsls	r1, r2, #5
 800914a:	69fa      	ldr	r2, [r7, #28]
 800914c:	440a      	add	r2, r1
 800914e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009152:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009156:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d133      	bne.n	80091d0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	4413      	add	r3, r2
 8009170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	69ba      	ldr	r2, [r7, #24]
 8009178:	0151      	lsls	r1, r2, #5
 800917a:	69fa      	ldr	r2, [r7, #28]
 800917c:	440a      	add	r2, r1
 800917e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009182:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009186:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	015a      	lsls	r2, r3, #5
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	4413      	add	r3, r2
 8009190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	69ba      	ldr	r2, [r7, #24]
 8009198:	0151      	lsls	r1, r2, #5
 800919a:	69fa      	ldr	r2, [r7, #28]
 800919c:	440a      	add	r2, r1
 800919e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091a6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	3301      	adds	r3, #1
 80091ac:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091b4:	d81d      	bhi.n	80091f2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091cc:	d0ec      	beq.n	80091a8 <USB_HC_Halt+0x1e6>
 80091ce:	e011      	b.n	80091f4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	69ba      	ldr	r2, [r7, #24]
 80091e0:	0151      	lsls	r1, r2, #5
 80091e2:	69fa      	ldr	r2, [r7, #28]
 80091e4:	440a      	add	r2, r1
 80091e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	e000      	b.n	80091f4 <USB_HC_Halt+0x232>
          break;
 80091f2:	bf00      	nop
    }
  }

  return HAL_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3724      	adds	r7, #36	@ 0x24
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
	...

08009204 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009204:	b480      	push	{r7}
 8009206:	b087      	sub	sp, #28
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009214:	78fb      	ldrb	r3, [r7, #3]
 8009216:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009218:	2301      	movs	r3, #1
 800921a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	04da      	lsls	r2, r3, #19
 8009220:	4b15      	ldr	r3, [pc, #84]	@ (8009278 <USB_DoPing+0x74>)
 8009222:	4013      	ands	r3, r2
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	0151      	lsls	r1, r2, #5
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	440a      	add	r2, r1
 800922c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009230:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009234:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	4413      	add	r3, r2
 800923e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800924c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009254:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	015a      	lsls	r2, r3, #5
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	4413      	add	r3, r2
 800925e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009262:	461a      	mov	r2, r3
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	1ff80000 	.word	0x1ff80000

0800927c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b088      	sub	sp, #32
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800928c:	2300      	movs	r3, #0
 800928e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7fe ff8c 	bl	80081ae <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009296:	2110      	movs	r1, #16
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7fe ffe5 	bl	8008268 <USB_FlushTxFifo>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff f80f 	bl	80082cc <USB_FlushRxFifo>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80092b8:	2300      	movs	r3, #0
 80092ba:	61bb      	str	r3, [r7, #24]
 80092bc:	e01f      	b.n	80092fe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80092d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80092dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80092e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092f2:	461a      	mov	r2, r3
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	3301      	adds	r3, #1
 80092fc:	61bb      	str	r3, [r7, #24]
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	2b0f      	cmp	r3, #15
 8009302:	d9dc      	bls.n	80092be <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009304:	2300      	movs	r3, #0
 8009306:	61bb      	str	r3, [r7, #24]
 8009308:	e034      	b.n	8009374 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	4413      	add	r3, r2
 8009312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009320:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009328:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009330:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	015a      	lsls	r2, r3, #5
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	4413      	add	r3, r2
 800933a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800933e:	461a      	mov	r2, r3
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3301      	adds	r3, #1
 8009348:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009350:	d80c      	bhi.n	800936c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	015a      	lsls	r2, r3, #5
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	4413      	add	r3, r2
 800935a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009364:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009368:	d0ec      	beq.n	8009344 <USB_StopHost+0xc8>
 800936a:	e000      	b.n	800936e <USB_StopHost+0xf2>
        break;
 800936c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	3301      	adds	r3, #1
 8009372:	61bb      	str	r3, [r7, #24]
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	2b0f      	cmp	r3, #15
 8009378:	d9c7      	bls.n	800930a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009380:	461a      	mov	r2, r3
 8009382:	f04f 33ff 	mov.w	r3, #4294967295
 8009386:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f04f 32ff 	mov.w	r2, #4294967295
 800938e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7fe fefb 	bl	800818c <USB_EnableGlobalInt>

  return ret;
 8009396:	7ffb      	ldrb	r3, [r7, #31]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3720      	adds	r7, #32
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80093a4:	4904      	ldr	r1, [pc, #16]	@ (80093b8 <MX_FATFS_Init+0x18>)
 80093a6:	4805      	ldr	r0, [pc, #20]	@ (80093bc <MX_FATFS_Init+0x1c>)
 80093a8:	f006 fc10 	bl	800fbcc <FATFS_LinkDriver>
 80093ac:	4603      	mov	r3, r0
 80093ae:	461a      	mov	r2, r3
 80093b0:	4b03      	ldr	r3, [pc, #12]	@ (80093c0 <MX_FATFS_Init+0x20>)
 80093b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80093b4:	bf00      	nop
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	2000192c 	.word	0x2000192c
 80093bc:	080107e8 	.word	0x080107e8
 80093c0:	20001928 	.word	0x20001928

080093c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80093c4:	b480      	push	{r7}
 80093c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80093c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	4603      	mov	r3, r0
 80093f4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	4619      	mov	r1, r3
 80093fe:	4808      	ldr	r0, [pc, #32]	@ (8009420 <USBH_status+0x34>)
 8009400:	f000 fe79 	bl	800a0f6 <USBH_MSC_UnitIsReady>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d002      	beq.n	8009410 <USBH_status+0x24>
  {
    res = RES_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	73fb      	strb	r3, [r7, #15]
 800940e:	e001      	b.n	8009414 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009414:	7bfb      	ldrb	r3, [r7, #15]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	20001d98 	.word	0x20001d98

08009424 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b094      	sub	sp, #80	@ 0x50
 8009428:	af02      	add	r7, sp, #8
 800942a:	60b9      	str	r1, [r7, #8]
 800942c:	607a      	str	r2, [r7, #4]
 800942e:	603b      	str	r3, [r7, #0]
 8009430:	4603      	mov	r3, r0
 8009432:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800943a:	7bf9      	ldrb	r1, [r7, #15]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4813      	ldr	r0, [pc, #76]	@ (8009494 <USBH_read+0x70>)
 8009446:	f000 feaa 	bl	800a19e <USBH_MSC_Read>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d103      	bne.n	8009458 <USBH_read+0x34>
  {
    res = RES_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009456:	e017      	b.n	8009488 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009458:	f107 0210 	add.w	r2, r7, #16
 800945c:	7bfb      	ldrb	r3, [r7, #15]
 800945e:	4619      	mov	r1, r3
 8009460:	480c      	ldr	r0, [pc, #48]	@ (8009494 <USBH_read+0x70>)
 8009462:	f000 fe73 	bl	800a14c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009466:	7f7b      	ldrb	r3, [r7, #29]
 8009468:	2b3a      	cmp	r3, #58	@ 0x3a
 800946a:	d005      	beq.n	8009478 <USBH_read+0x54>
 800946c:	2b3a      	cmp	r3, #58	@ 0x3a
 800946e:	dc07      	bgt.n	8009480 <USBH_read+0x5c>
 8009470:	2b04      	cmp	r3, #4
 8009472:	d001      	beq.n	8009478 <USBH_read+0x54>
 8009474:	2b28      	cmp	r3, #40	@ 0x28
 8009476:	d103      	bne.n	8009480 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009478:	2303      	movs	r3, #3
 800947a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800947e:	e003      	b.n	8009488 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8009486:	bf00      	nop
    }
  }

  return res;
 8009488:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800948c:	4618      	mov	r0, r3
 800948e:	3748      	adds	r7, #72	@ 0x48
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	20001d98 	.word	0x20001d98

08009498 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b094      	sub	sp, #80	@ 0x50
 800949c:	af02      	add	r7, sp, #8
 800949e:	60b9      	str	r1, [r7, #8]
 80094a0:	607a      	str	r2, [r7, #4]
 80094a2:	603b      	str	r3, [r7, #0]
 80094a4:	4603      	mov	r3, r0
 80094a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80094ae:	7bf9      	ldrb	r1, [r7, #15]
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	4817      	ldr	r0, [pc, #92]	@ (8009518 <USBH_write+0x80>)
 80094ba:	f000 fed0 	bl	800a25e <USBH_MSC_Write>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d103      	bne.n	80094cc <USBH_write+0x34>
  {
    res = RES_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80094ca:	e01f      	b.n	800950c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80094cc:	f107 0210 	add.w	r2, r7, #16
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
 80094d2:	4619      	mov	r1, r3
 80094d4:	4810      	ldr	r0, [pc, #64]	@ (8009518 <USBH_write+0x80>)
 80094d6:	f000 fe39 	bl	800a14c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80094da:	7f7b      	ldrb	r3, [r7, #29]
 80094dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80094de:	d00d      	beq.n	80094fc <USBH_write+0x64>
 80094e0:	2b3a      	cmp	r3, #58	@ 0x3a
 80094e2:	dc0f      	bgt.n	8009504 <USBH_write+0x6c>
 80094e4:	2b28      	cmp	r3, #40	@ 0x28
 80094e6:	d009      	beq.n	80094fc <USBH_write+0x64>
 80094e8:	2b28      	cmp	r3, #40	@ 0x28
 80094ea:	dc0b      	bgt.n	8009504 <USBH_write+0x6c>
 80094ec:	2b04      	cmp	r3, #4
 80094ee:	d005      	beq.n	80094fc <USBH_write+0x64>
 80094f0:	2b27      	cmp	r3, #39	@ 0x27
 80094f2:	d107      	bne.n	8009504 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80094f4:	2302      	movs	r3, #2
 80094f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 80094fa:	e007      	b.n	800950c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80094fc:	2303      	movs	r3, #3
 80094fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8009502:	e003      	b.n	800950c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800950a:	bf00      	nop
    }
  }

  return res;
 800950c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009510:	4618      	mov	r0, r3
 8009512:	3748      	adds	r7, #72	@ 0x48
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	20001d98 	.word	0x20001d98

0800951c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b090      	sub	sp, #64	@ 0x40
 8009520:	af00      	add	r7, sp, #0
 8009522:	4603      	mov	r3, r0
 8009524:	603a      	str	r2, [r7, #0]
 8009526:	71fb      	strb	r3, [r7, #7]
 8009528:	460b      	mov	r3, r1
 800952a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009532:	79bb      	ldrb	r3, [r7, #6]
 8009534:	2b03      	cmp	r3, #3
 8009536:	d852      	bhi.n	80095de <USBH_ioctl+0xc2>
 8009538:	a201      	add	r2, pc, #4	@ (adr r2, 8009540 <USBH_ioctl+0x24>)
 800953a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953e:	bf00      	nop
 8009540:	08009551 	.word	0x08009551
 8009544:	08009559 	.word	0x08009559
 8009548:	08009583 	.word	0x08009583
 800954c:	080095af 	.word	0x080095af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8009556:	e045      	b.n	80095e4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009558:	f107 0208 	add.w	r2, r7, #8
 800955c:	79fb      	ldrb	r3, [r7, #7]
 800955e:	4619      	mov	r1, r3
 8009560:	4823      	ldr	r0, [pc, #140]	@ (80095f0 <USBH_ioctl+0xd4>)
 8009562:	f000 fdf3 	bl	800a14c <USBH_MSC_GetLUNInfo>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d106      	bne.n	800957a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009578:	e034      	b.n	80095e4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8009580:	e030      	b.n	80095e4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009582:	f107 0208 	add.w	r2, r7, #8
 8009586:	79fb      	ldrb	r3, [r7, #7]
 8009588:	4619      	mov	r1, r3
 800958a:	4819      	ldr	r0, [pc, #100]	@ (80095f0 <USBH_ioctl+0xd4>)
 800958c:	f000 fdde 	bl	800a14c <USBH_MSC_GetLUNInfo>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d107      	bne.n	80095a6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009596:	8a3b      	ldrh	r3, [r7, #16]
 8009598:	461a      	mov	r2, r3
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80095a4:	e01e      	b.n	80095e4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80095ac:	e01a      	b.n	80095e4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80095ae:	f107 0208 	add.w	r2, r7, #8
 80095b2:	79fb      	ldrb	r3, [r7, #7]
 80095b4:	4619      	mov	r1, r3
 80095b6:	480e      	ldr	r0, [pc, #56]	@ (80095f0 <USBH_ioctl+0xd4>)
 80095b8:	f000 fdc8 	bl	800a14c <USBH_MSC_GetLUNInfo>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d109      	bne.n	80095d6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80095c2:	8a3b      	ldrh	r3, [r7, #16]
 80095c4:	0a5b      	lsrs	r3, r3, #9
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	461a      	mov	r2, r3
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80095d4:	e006      	b.n	80095e4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80095dc:	e002      	b.n	80095e4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80095de:	2304      	movs	r3, #4
 80095e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 80095e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3740      	adds	r7, #64	@ 0x40
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	20001d98 	.word	0x20001d98

080095f4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80095f4:	b590      	push	{r4, r7, lr}
 80095f6:	b089      	sub	sp, #36	@ 0x24
 80095f8:	af04      	add	r7, sp, #16
 80095fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009602:	7919      	ldrb	r1, [r3, #4]
 8009604:	2350      	movs	r3, #80	@ 0x50
 8009606:	2206      	movs	r2, #6
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f001 fcd7 	bl	800afbc <USBH_FindInterface>
 800960e:	4603      	mov	r3, r0
 8009610:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	2bff      	cmp	r3, #255	@ 0xff
 8009616:	d002      	beq.n	800961e <USBH_MSC_InterfaceInit+0x2a>
 8009618:	7bfb      	ldrb	r3, [r7, #15]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d901      	bls.n	8009622 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800961e:	2302      	movs	r3, #2
 8009620:	e106      	b.n	8009830 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f001 fcac 	bl	800af84 <USBH_SelectInterface>
 800962c:	4603      	mov	r3, r0
 800962e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009630:	7bbb      	ldrb	r3, [r7, #14]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d001      	beq.n	800963a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8009636:	2302      	movs	r3, #2
 8009638:	e0fa      	b.n	8009830 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009640:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8009644:	f006 fed6 	bl	80103f4 <malloc>
 8009648:	4603      	mov	r3, r0
 800964a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800965c:	2302      	movs	r3, #2
 800965e:	e0e7      	b.n	8009830 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009660:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009664:	2100      	movs	r1, #0
 8009666:	68b8      	ldr	r0, [r7, #8]
 8009668:	f006 ff82 	bl	8010570 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800966c:	7bfb      	ldrb	r3, [r7, #15]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	211a      	movs	r1, #26
 8009672:	fb01 f303 	mul.w	r3, r1, r3
 8009676:	4413      	add	r3, r2
 8009678:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	b25b      	sxtb	r3, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	da16      	bge.n	80096b2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	211a      	movs	r1, #26
 800968a:	fb01 f303 	mul.w	r3, r1, r3
 800968e:	4413      	add	r3, r2
 8009690:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009694:	781a      	ldrb	r2, [r3, #0]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800969a:	7bfb      	ldrb	r3, [r7, #15]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	211a      	movs	r1, #26
 80096a0:	fb01 f303 	mul.w	r3, r1, r3
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80096aa:	881a      	ldrh	r2, [r3, #0]
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	815a      	strh	r2, [r3, #10]
 80096b0:	e015      	b.n	80096de <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	211a      	movs	r1, #26
 80096b8:	fb01 f303 	mul.w	r3, r1, r3
 80096bc:	4413      	add	r3, r2
 80096be:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80096c2:	781a      	ldrb	r2, [r3, #0]
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	211a      	movs	r1, #26
 80096ce:	fb01 f303 	mul.w	r3, r1, r3
 80096d2:	4413      	add	r3, r2
 80096d4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80096d8:	881a      	ldrh	r2, [r3, #0]
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80096de:	7bfb      	ldrb	r3, [r7, #15]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	211a      	movs	r1, #26
 80096e4:	fb01 f303 	mul.w	r3, r1, r3
 80096e8:	4413      	add	r3, r2
 80096ea:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	b25b      	sxtb	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	da16      	bge.n	8009724 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	211a      	movs	r1, #26
 80096fc:	fb01 f303 	mul.w	r3, r1, r3
 8009700:	4413      	add	r3, r2
 8009702:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009706:	781a      	ldrb	r2, [r3, #0]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	211a      	movs	r1, #26
 8009712:	fb01 f303 	mul.w	r3, r1, r3
 8009716:	4413      	add	r3, r2
 8009718:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800971c:	881a      	ldrh	r2, [r3, #0]
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	815a      	strh	r2, [r3, #10]
 8009722:	e015      	b.n	8009750 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	211a      	movs	r1, #26
 800972a:	fb01 f303 	mul.w	r3, r1, r3
 800972e:	4413      	add	r3, r2
 8009730:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009734:	781a      	ldrb	r2, [r3, #0]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800973a:	7bfb      	ldrb	r3, [r7, #15]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	211a      	movs	r1, #26
 8009740:	fb01 f303 	mul.w	r3, r1, r3
 8009744:	4413      	add	r3, r2
 8009746:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800974a:	881a      	ldrh	r2, [r3, #0]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2200      	movs	r2, #0
 8009754:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2200      	movs	r2, #0
 800975a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	2200      	movs	r2, #0
 8009760:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	799b      	ldrb	r3, [r3, #6]
 8009766:	4619      	mov	r1, r3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f002 ffb4 	bl	800c6d6 <USBH_AllocPipe>
 800976e:	4603      	mov	r3, r0
 8009770:	461a      	mov	r2, r3
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	79db      	ldrb	r3, [r3, #7]
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f002 ffaa 	bl	800c6d6 <USBH_AllocPipe>
 8009782:	4603      	mov	r3, r0
 8009784:	461a      	mov	r2, r3
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fe02 	bl	800a394 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	799b      	ldrb	r3, [r3, #6]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01e      	beq.n	80097d6 <USBH_MSC_InterfaceInit+0x1e2>
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	891b      	ldrh	r3, [r3, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d01a      	beq.n	80097d6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	7959      	ldrb	r1, [r3, #5]
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	7998      	ldrb	r0, [r3, #6]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	8912      	ldrh	r2, [r2, #8]
 80097b8:	9202      	str	r2, [sp, #8]
 80097ba:	2202      	movs	r2, #2
 80097bc:	9201      	str	r2, [sp, #4]
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	4623      	mov	r3, r4
 80097c2:	4602      	mov	r2, r0
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f002 ff57 	bl	800c678 <USBH_OpenPipe>
 80097ca:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	79db      	ldrb	r3, [r3, #7]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d02c      	beq.n	800982e <USBH_MSC_InterfaceInit+0x23a>
 80097d4:	e001      	b.n	80097da <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e02a      	b.n	8009830 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	895b      	ldrh	r3, [r3, #10]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d025      	beq.n	800982e <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	7919      	ldrb	r1, [r3, #4]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	79d8      	ldrb	r0, [r3, #7]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	8952      	ldrh	r2, [r2, #10]
 80097fa:	9202      	str	r2, [sp, #8]
 80097fc:	2202      	movs	r2, #2
 80097fe:	9201      	str	r2, [sp, #4]
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	4623      	mov	r3, r4
 8009804:	4602      	mov	r2, r0
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f002 ff36 	bl	800c678 <USBH_OpenPipe>
 800980c:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	791b      	ldrb	r3, [r3, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	4619      	mov	r1, r3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f006 fd32 	bl	8010280 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	795b      	ldrb	r3, [r3, #5]
 8009820:	2200      	movs	r2, #0
 8009822:	4619      	mov	r1, r3
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f006 fd2b 	bl	8010280 <USBH_LL_SetToggle>

  return USBH_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	e000      	b.n	8009830 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800982e:	2303      	movs	r3, #3
}
 8009830:	4618      	mov	r0, r3
 8009832:	3714      	adds	r7, #20
 8009834:	46bd      	mov	sp, r7
 8009836:	bd90      	pop	{r4, r7, pc}

08009838 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009846:	69db      	ldr	r3, [r3, #28]
 8009848:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	795b      	ldrb	r3, [r3, #5]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00e      	beq.n	8009870 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	795b      	ldrb	r3, [r3, #5]
 8009856:	4619      	mov	r1, r3
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f002 ff2c 	bl	800c6b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	795b      	ldrb	r3, [r3, #5]
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f002 ff57 	bl	800c718 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	791b      	ldrb	r3, [r3, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00e      	beq.n	8009896 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	791b      	ldrb	r3, [r3, #4]
 800987c:	4619      	mov	r1, r3
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f002 ff19 	bl	800c6b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	791b      	ldrb	r3, [r3, #4]
 8009888:	4619      	mov	r1, r3
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f002 ff44 	bl	800c718 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00b      	beq.n	80098ba <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80098a8:	69db      	ldr	r3, [r3, #28]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f006 fdaa 	bl	8010404 <free>
    phost->pActiveClass->pData = 0U;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80098b6:	2200      	movs	r2, #0
 80098b8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80098d2:	69db      	ldr	r3, [r3, #28]
 80098d4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80098d6:	2301      	movs	r3, #1
 80098d8:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	7b9b      	ldrb	r3, [r3, #14]
 80098de:	2b03      	cmp	r3, #3
 80098e0:	d041      	beq.n	8009966 <USBH_MSC_ClassRequest+0xa2>
 80098e2:	2b03      	cmp	r3, #3
 80098e4:	dc4b      	bgt.n	800997e <USBH_MSC_ClassRequest+0xba>
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <USBH_MSC_ClassRequest+0x2a>
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d147      	bne.n	800997e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	4619      	mov	r1, r3
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fd30 	bl	800a358 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80098f8:	4603      	mov	r3, r0
 80098fa:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d104      	bne.n	800990c <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2200      	movs	r2, #0
 8009906:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800990c:	7bfb      	ldrb	r3, [r7, #15]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d137      	bne.n	8009982 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	2b02      	cmp	r3, #2
 8009918:	d804      	bhi.n	8009924 <USBH_MSC_ClassRequest+0x60>
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	3301      	adds	r3, #1
 8009920:	b2da      	uxtb	r2, r3
 8009922:	e000      	b.n	8009926 <USBH_MSC_ClassRequest+0x62>
 8009924:	2202      	movs	r2, #2
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 800992a:	2300      	movs	r3, #0
 800992c:	73bb      	strb	r3, [r7, #14]
 800992e:	e014      	b.n	800995a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 8009930:	7bbb      	ldrb	r3, [r7, #14]
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	2134      	movs	r1, #52	@ 0x34
 8009936:	fb01 f303 	mul.w	r3, r1, r3
 800993a:	4413      	add	r3, r2
 800993c:	3392      	adds	r3, #146	@ 0x92
 800993e:	2202      	movs	r2, #2
 8009940:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 8009942:	7bbb      	ldrb	r3, [r7, #14]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	2134      	movs	r1, #52	@ 0x34
 8009948:	fb01 f303 	mul.w	r3, r1, r3
 800994c:	4413      	add	r3, r2
 800994e:	33c1      	adds	r3, #193	@ 0xc1
 8009950:	2200      	movs	r2, #0
 8009952:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8009954:	7bbb      	ldrb	r3, [r7, #14]
 8009956:	3301      	adds	r3, #1
 8009958:	73bb      	strb	r3, [r7, #14]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	7bba      	ldrb	r2, [r7, #14]
 8009960:	429a      	cmp	r2, r3
 8009962:	d3e5      	bcc.n	8009930 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009964:	e00d      	b.n	8009982 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009966:	2100      	movs	r1, #0
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f002 f8ff 	bl	800bb6c <USBH_ClrFeature>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d108      	bne.n	8009986 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	7bda      	ldrb	r2, [r3, #15]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	739a      	strb	r2, [r3, #14]
      }
      break;
 800997c:	e003      	b.n	8009986 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800997e:	bf00      	nop
 8009980:	e002      	b.n	8009988 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009982:	bf00      	nop
 8009984:	e000      	b.n	8009988 <USBH_MSC_ClassRequest+0xc4>
      break;
 8009986:	bf00      	nop
  }

  return status;
 8009988:	7bfb      	ldrb	r3, [r7, #15]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
	...

08009994 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80099a6:	2301      	movs	r3, #1
 80099a8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80099aa:	2301      	movs	r3, #1
 80099ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80099ae:	2301      	movs	r3, #1
 80099b0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	7b1b      	ldrb	r3, [r3, #12]
 80099b6:	2b0a      	cmp	r3, #10
 80099b8:	f000 8280 	beq.w	8009ebc <USBH_MSC_Process+0x528>
 80099bc:	2b0a      	cmp	r3, #10
 80099be:	f300 82b8 	bgt.w	8009f32 <USBH_MSC_Process+0x59e>
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <USBH_MSC_Process+0x3a>
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	f000 82b0 	beq.w	8009f2c <USBH_MSC_Process+0x598>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80099cc:	e2b1      	b.n	8009f32 <USBH_MSC_Process+0x59e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	7812      	ldrb	r2, [r2, #0]
 80099d8:	4293      	cmp	r3, r2
 80099da:	f080 825d 	bcs.w	8009e98 <USBH_MSC_Process+0x504>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80099e4:	4619      	mov	r1, r3
 80099e6:	693a      	ldr	r2, [r7, #16]
 80099e8:	2334      	movs	r3, #52	@ 0x34
 80099ea:	fb01 f303 	mul.w	r3, r1, r3
 80099ee:	4413      	add	r3, r2
 80099f0:	3391      	adds	r3, #145	@ 0x91
 80099f2:	2201      	movs	r2, #1
 80099f4:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80099fc:	4619      	mov	r1, r3
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	2334      	movs	r3, #52	@ 0x34
 8009a02:	fb01 f303 	mul.w	r3, r1, r3
 8009a06:	4413      	add	r3, r2
 8009a08:	3390      	adds	r3, #144	@ 0x90
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	2b08      	cmp	r3, #8
 8009a0e:	f200 824b 	bhi.w	8009ea8 <USBH_MSC_Process+0x514>
 8009a12:	a201      	add	r2, pc, #4	@ (adr r2, 8009a18 <USBH_MSC_Process+0x84>)
 8009a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a18:	08009a3d 	.word	0x08009a3d
 8009a1c:	08009ea9 	.word	0x08009ea9
 8009a20:	08009b07 	.word	0x08009b07
 8009a24:	08009c8d 	.word	0x08009c8d
 8009a28:	08009a63 	.word	0x08009a63
 8009a2c:	08009d59 	.word	0x08009d59
 8009a30:	08009ea9 	.word	0x08009ea9
 8009a34:	08009ea9 	.word	0x08009ea9
 8009a38:	08009e87 	.word	0x08009e87
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a42:	4619      	mov	r1, r3
 8009a44:	693a      	ldr	r2, [r7, #16]
 8009a46:	2334      	movs	r3, #52	@ 0x34
 8009a48:	fb01 f303 	mul.w	r3, r1, r3
 8009a4c:	4413      	add	r3, r2
 8009a4e:	3390      	adds	r3, #144	@ 0x90
 8009a50:	2204      	movs	r2, #4
 8009a52:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 8009a60:	e22b      	b.n	8009eba <USBH_MSC_Process+0x526>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a68:	b2d9      	uxtb	r1, r3
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a70:	461a      	mov	r2, r3
 8009a72:	2334      	movs	r3, #52	@ 0x34
 8009a74:	fb02 f303 	mul.w	r3, r2, r3
 8009a78:	3398      	adds	r3, #152	@ 0x98
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	3307      	adds	r3, #7
 8009a80:	461a      	mov	r2, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 ffa3 	bl	800a9ce <USBH_MSC_SCSI_Inquiry>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10c      	bne.n	8009aac <USBH_MSC_Process+0x118>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a98:	4619      	mov	r1, r3
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	2334      	movs	r3, #52	@ 0x34
 8009a9e:	fb01 f303 	mul.w	r3, r1, r3
 8009aa2:	4413      	add	r3, r2
 8009aa4:	3390      	adds	r3, #144	@ 0x90
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	701a      	strb	r2, [r3, #0]
            break;
 8009aaa:	e1ff      	b.n	8009eac <USBH_MSC_Process+0x518>
            else if (scsi_status == USBH_FAIL)
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d10c      	bne.n	8009acc <USBH_MSC_Process+0x138>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ab8:	4619      	mov	r1, r3
 8009aba:	693a      	ldr	r2, [r7, #16]
 8009abc:	2334      	movs	r3, #52	@ 0x34
 8009abe:	fb01 f303 	mul.w	r3, r1, r3
 8009ac2:	4413      	add	r3, r2
 8009ac4:	3390      	adds	r3, #144	@ 0x90
 8009ac6:	2205      	movs	r2, #5
 8009ac8:	701a      	strb	r2, [r3, #0]
            break;
 8009aca:	e1ef      	b.n	8009eac <USBH_MSC_Process+0x518>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
 8009ace:	2b04      	cmp	r3, #4
 8009ad0:	f040 81ec 	bne.w	8009eac <USBH_MSC_Process+0x518>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ada:	4619      	mov	r1, r3
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	2334      	movs	r3, #52	@ 0x34
 8009ae0:	fb01 f303 	mul.w	r3, r1, r3
 8009ae4:	4413      	add	r3, r2
 8009ae6:	3390      	adds	r3, #144	@ 0x90
 8009ae8:	2208      	movs	r2, #8
 8009aea:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009af2:	4619      	mov	r1, r3
 8009af4:	693a      	ldr	r2, [r7, #16]
 8009af6:	2334      	movs	r3, #52	@ 0x34
 8009af8:	fb01 f303 	mul.w	r3, r1, r3
 8009afc:	4413      	add	r3, r2
 8009afe:	3391      	adds	r3, #145	@ 0x91
 8009b00:	2202      	movs	r2, #2
 8009b02:	701a      	strb	r2, [r3, #0]
            break;
 8009b04:	e1d2      	b.n	8009eac <USBH_MSC_Process+0x518>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	4619      	mov	r1, r3
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fe9f 	bl	800a854 <USBH_MSC_SCSI_TestUnitReady>
 8009b16:	4603      	mov	r3, r0
 8009b18:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d14a      	bne.n	8009bb6 <USBH_MSC_Process+0x222>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b26:	4619      	mov	r1, r3
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	2334      	movs	r3, #52	@ 0x34
 8009b2c:	fb01 f303 	mul.w	r3, r1, r3
 8009b30:	4413      	add	r3, r2
 8009b32:	3392      	adds	r3, #146	@ 0x92
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00c      	beq.n	8009b54 <USBH_MSC_Process+0x1c0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b40:	4619      	mov	r1, r3
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	2334      	movs	r3, #52	@ 0x34
 8009b46:	fb01 f303 	mul.w	r3, r1, r3
 8009b4a:	4413      	add	r3, r2
 8009b4c:	33c1      	adds	r3, #193	@ 0xc1
 8009b4e:	2201      	movs	r2, #1
 8009b50:	701a      	strb	r2, [r3, #0]
 8009b52:	e00b      	b.n	8009b6c <USBH_MSC_Process+0x1d8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	2334      	movs	r3, #52	@ 0x34
 8009b60:	fb01 f303 	mul.w	r3, r1, r3
 8009b64:	4413      	add	r3, r2
 8009b66:	33c1      	adds	r3, #193	@ 0xc1
 8009b68:	2200      	movs	r2, #0
 8009b6a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b72:	4619      	mov	r1, r3
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	2334      	movs	r3, #52	@ 0x34
 8009b78:	fb01 f303 	mul.w	r3, r1, r3
 8009b7c:	4413      	add	r3, r2
 8009b7e:	3390      	adds	r3, #144	@ 0x90
 8009b80:	2203      	movs	r2, #3
 8009b82:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	2334      	movs	r3, #52	@ 0x34
 8009b90:	fb01 f303 	mul.w	r3, r1, r3
 8009b94:	4413      	add	r3, r2
 8009b96:	3391      	adds	r3, #145	@ 0x91
 8009b98:	2200      	movs	r2, #0
 8009b9a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	2334      	movs	r3, #52	@ 0x34
 8009ba8:	fb01 f303 	mul.w	r3, r1, r3
 8009bac:	4413      	add	r3, r2
 8009bae:	3392      	adds	r3, #146	@ 0x92
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	701a      	strb	r2, [r3, #0]
            break;
 8009bb4:	e17c      	b.n	8009eb0 <USBH_MSC_Process+0x51c>
            else if (ready_status == USBH_FAIL)
 8009bb6:	7bbb      	ldrb	r3, [r7, #14]
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d14a      	bne.n	8009c52 <USBH_MSC_Process+0x2be>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	2334      	movs	r3, #52	@ 0x34
 8009bc8:	fb01 f303 	mul.w	r3, r1, r3
 8009bcc:	4413      	add	r3, r2
 8009bce:	3392      	adds	r3, #146	@ 0x92
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d00c      	beq.n	8009bf0 <USBH_MSC_Process+0x25c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009bdc:	4619      	mov	r1, r3
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	2334      	movs	r3, #52	@ 0x34
 8009be2:	fb01 f303 	mul.w	r3, r1, r3
 8009be6:	4413      	add	r3, r2
 8009be8:	33c1      	adds	r3, #193	@ 0xc1
 8009bea:	2201      	movs	r2, #1
 8009bec:	701a      	strb	r2, [r3, #0]
 8009bee:	e00b      	b.n	8009c08 <USBH_MSC_Process+0x274>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	2334      	movs	r3, #52	@ 0x34
 8009bfc:	fb01 f303 	mul.w	r3, r1, r3
 8009c00:	4413      	add	r3, r2
 8009c02:	33c1      	adds	r3, #193	@ 0xc1
 8009c04:	2200      	movs	r2, #0
 8009c06:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c0e:	4619      	mov	r1, r3
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	2334      	movs	r3, #52	@ 0x34
 8009c14:	fb01 f303 	mul.w	r3, r1, r3
 8009c18:	4413      	add	r3, r2
 8009c1a:	3390      	adds	r3, #144	@ 0x90
 8009c1c:	2205      	movs	r2, #5
 8009c1e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c26:	4619      	mov	r1, r3
 8009c28:	693a      	ldr	r2, [r7, #16]
 8009c2a:	2334      	movs	r3, #52	@ 0x34
 8009c2c:	fb01 f303 	mul.w	r3, r1, r3
 8009c30:	4413      	add	r3, r2
 8009c32:	3391      	adds	r3, #145	@ 0x91
 8009c34:	2201      	movs	r2, #1
 8009c36:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c3e:	4619      	mov	r1, r3
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	2334      	movs	r3, #52	@ 0x34
 8009c44:	fb01 f303 	mul.w	r3, r1, r3
 8009c48:	4413      	add	r3, r2
 8009c4a:	3392      	adds	r3, #146	@ 0x92
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	701a      	strb	r2, [r3, #0]
            break;
 8009c50:	e12e      	b.n	8009eb0 <USBH_MSC_Process+0x51c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	2b04      	cmp	r3, #4
 8009c56:	f040 812b 	bne.w	8009eb0 <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c60:	4619      	mov	r1, r3
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	2334      	movs	r3, #52	@ 0x34
 8009c66:	fb01 f303 	mul.w	r3, r1, r3
 8009c6a:	4413      	add	r3, r2
 8009c6c:	3390      	adds	r3, #144	@ 0x90
 8009c6e:	2208      	movs	r2, #8
 8009c70:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c78:	4619      	mov	r1, r3
 8009c7a:	693a      	ldr	r2, [r7, #16]
 8009c7c:	2334      	movs	r3, #52	@ 0x34
 8009c7e:	fb01 f303 	mul.w	r3, r1, r3
 8009c82:	4413      	add	r3, r2
 8009c84:	3391      	adds	r3, #145	@ 0x91
 8009c86:	2202      	movs	r2, #2
 8009c88:	701a      	strb	r2, [r3, #0]
            break;
 8009c8a:	e111      	b.n	8009eb0 <USBH_MSC_Process+0x51c>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c92:	b2d9      	uxtb	r1, r3
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	2334      	movs	r3, #52	@ 0x34
 8009c9e:	fb02 f303 	mul.w	r3, r2, r3
 8009ca2:	3390      	adds	r3, #144	@ 0x90
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	3304      	adds	r3, #4
 8009caa:	461a      	mov	r2, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fe14 	bl	800a8da <USBH_MSC_SCSI_ReadCapacity>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d120      	bne.n	8009cfe <USBH_MSC_Process+0x36a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	2334      	movs	r3, #52	@ 0x34
 8009cc8:	fb01 f303 	mul.w	r3, r1, r3
 8009ccc:	4413      	add	r3, r2
 8009cce:	3390      	adds	r3, #144	@ 0x90
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009cda:	4619      	mov	r1, r3
 8009cdc:	693a      	ldr	r2, [r7, #16]
 8009cde:	2334      	movs	r3, #52	@ 0x34
 8009ce0:	fb01 f303 	mul.w	r3, r1, r3
 8009ce4:	4413      	add	r3, r2
 8009ce6:	3391      	adds	r3, #145	@ 0x91
 8009ce8:	2200      	movs	r2, #0
 8009cea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8009cfc:	e0da      	b.n	8009eb4 <USBH_MSC_Process+0x520>
            else if (scsi_status == USBH_FAIL)
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d10c      	bne.n	8009d1e <USBH_MSC_Process+0x38a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	693a      	ldr	r2, [r7, #16]
 8009d0e:	2334      	movs	r3, #52	@ 0x34
 8009d10:	fb01 f303 	mul.w	r3, r1, r3
 8009d14:	4413      	add	r3, r2
 8009d16:	3390      	adds	r3, #144	@ 0x90
 8009d18:	2205      	movs	r2, #5
 8009d1a:	701a      	strb	r2, [r3, #0]
            break;
 8009d1c:	e0ca      	b.n	8009eb4 <USBH_MSC_Process+0x520>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
 8009d20:	2b04      	cmp	r3, #4
 8009d22:	f040 80c7 	bne.w	8009eb4 <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	693a      	ldr	r2, [r7, #16]
 8009d30:	2334      	movs	r3, #52	@ 0x34
 8009d32:	fb01 f303 	mul.w	r3, r1, r3
 8009d36:	4413      	add	r3, r2
 8009d38:	3390      	adds	r3, #144	@ 0x90
 8009d3a:	2208      	movs	r2, #8
 8009d3c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d44:	4619      	mov	r1, r3
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	2334      	movs	r3, #52	@ 0x34
 8009d4a:	fb01 f303 	mul.w	r3, r1, r3
 8009d4e:	4413      	add	r3, r2
 8009d50:	3391      	adds	r3, #145	@ 0x91
 8009d52:	2202      	movs	r2, #2
 8009d54:	701a      	strb	r2, [r3, #0]
            break;
 8009d56:	e0ad      	b.n	8009eb4 <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d5e:	b2d9      	uxtb	r1, r3
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d66:	461a      	mov	r2, r3
 8009d68:	2334      	movs	r3, #52	@ 0x34
 8009d6a:	fb02 f303 	mul.w	r3, r2, r3
 8009d6e:	3398      	adds	r3, #152	@ 0x98
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	4413      	add	r3, r2
 8009d74:	3304      	adds	r3, #4
 8009d76:	461a      	mov	r2, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fecd 	bl	800ab18 <USBH_MSC_SCSI_RequestSense>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d146      	bne.n	8009e16 <USBH_MSC_Process+0x482>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d8e:	4619      	mov	r1, r3
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	2334      	movs	r3, #52	@ 0x34
 8009d94:	fb01 f303 	mul.w	r3, r1, r3
 8009d98:	4413      	add	r3, r2
 8009d9a:	339c      	adds	r3, #156	@ 0x9c
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b06      	cmp	r3, #6
 8009da0:	d00c      	beq.n	8009dbc <USBH_MSC_Process+0x428>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009da8:	4619      	mov	r1, r3
 8009daa:	693a      	ldr	r2, [r7, #16]
 8009dac:	2334      	movs	r3, #52	@ 0x34
 8009dae:	fb01 f303 	mul.w	r3, r1, r3
 8009db2:	4413      	add	r3, r2
 8009db4:	339c      	adds	r3, #156	@ 0x9c
 8009db6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d117      	bne.n	8009dec <USBH_MSC_Process+0x458>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009dc8:	1ad3      	subs	r3, r2, r3
 8009dca:	f242 720f 	movw	r2, #9999	@ 0x270f
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d80c      	bhi.n	8009dec <USBH_MSC_Process+0x458>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009dd8:	4619      	mov	r1, r3
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	2334      	movs	r3, #52	@ 0x34
 8009dde:	fb01 f303 	mul.w	r3, r1, r3
 8009de2:	4413      	add	r3, r2
 8009de4:	3390      	adds	r3, #144	@ 0x90
 8009de6:	2202      	movs	r2, #2
 8009de8:	701a      	strb	r2, [r3, #0]
                  break;
 8009dea:	e066      	b.n	8009eba <USBH_MSC_Process+0x526>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009df2:	4619      	mov	r1, r3
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	2334      	movs	r3, #52	@ 0x34
 8009df8:	fb01 f303 	mul.w	r3, r1, r3
 8009dfc:	4413      	add	r3, r2
 8009dfe:	3390      	adds	r3, #144	@ 0x90
 8009e00:	2201      	movs	r2, #1
 8009e02:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8009e14:	e050      	b.n	8009eb8 <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d118      	bne.n	8009e4e <USBH_MSC_Process+0x4ba>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009e22:	4619      	mov	r1, r3
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	2334      	movs	r3, #52	@ 0x34
 8009e28:	fb01 f303 	mul.w	r3, r1, r3
 8009e2c:	4413      	add	r3, r2
 8009e2e:	3390      	adds	r3, #144	@ 0x90
 8009e30:	2208      	movs	r2, #8
 8009e32:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	693a      	ldr	r2, [r7, #16]
 8009e3e:	2334      	movs	r3, #52	@ 0x34
 8009e40:	fb01 f303 	mul.w	r3, r1, r3
 8009e44:	4413      	add	r3, r2
 8009e46:	3391      	adds	r3, #145	@ 0x91
 8009e48:	2202      	movs	r2, #2
 8009e4a:	701a      	strb	r2, [r3, #0]
            break;
 8009e4c:	e034      	b.n	8009eb8 <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009e4e:	7bfb      	ldrb	r3, [r7, #15]
 8009e50:	2b04      	cmp	r3, #4
 8009e52:	d131      	bne.n	8009eb8 <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	693a      	ldr	r2, [r7, #16]
 8009e5e:	2334      	movs	r3, #52	@ 0x34
 8009e60:	fb01 f303 	mul.w	r3, r1, r3
 8009e64:	4413      	add	r3, r2
 8009e66:	3390      	adds	r3, #144	@ 0x90
 8009e68:	2208      	movs	r2, #8
 8009e6a:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009e72:	4619      	mov	r1, r3
 8009e74:	693a      	ldr	r2, [r7, #16]
 8009e76:	2334      	movs	r3, #52	@ 0x34
 8009e78:	fb01 f303 	mul.w	r3, r1, r3
 8009e7c:	4413      	add	r3, r2
 8009e7e:	3391      	adds	r3, #145	@ 0x91
 8009e80:	2202      	movs	r2, #2
 8009e82:	701a      	strb	r2, [r3, #0]
            break;
 8009e84:	e018      	b.n	8009eb8 <USBH_MSC_Process+0x524>
            MSC_Handle->current_lun++;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8009e96:	e010      	b.n	8009eba <USBH_MSC_Process+0x526>
        MSC_Handle->current_lun = 0U;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	220a      	movs	r2, #10
 8009ea4:	731a      	strb	r2, [r3, #12]
      break;
 8009ea6:	e045      	b.n	8009f34 <USBH_MSC_Process+0x5a0>
            break;
 8009ea8:	bf00      	nop
 8009eaa:	e043      	b.n	8009f34 <USBH_MSC_Process+0x5a0>
            break;
 8009eac:	bf00      	nop
 8009eae:	e041      	b.n	8009f34 <USBH_MSC_Process+0x5a0>
            break;
 8009eb0:	bf00      	nop
 8009eb2:	e03f      	b.n	8009f34 <USBH_MSC_Process+0x5a0>
            break;
 8009eb4:	bf00      	nop
 8009eb6:	e03d      	b.n	8009f34 <USBH_MSC_Process+0x5a0>
            break;
 8009eb8:	bf00      	nop
      break;
 8009eba:	e03b      	b.n	8009f34 <USBH_MSC_Process+0x5a0>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	7812      	ldrb	r2, [r2, #0]
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d228      	bcs.n	8009f1c <USBH_MSC_Process+0x588>
        MSC_Handle->current_lun = MSC_Handle->lun;
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009edc:	4619      	mov	r1, r3
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	2334      	movs	r3, #52	@ 0x34
 8009ee2:	fb01 f303 	mul.w	r3, r1, r3
 8009ee6:	4413      	add	r3, r2
 8009ee8:	3391      	adds	r3, #145	@ 0x91
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d106      	bne.n	8009efe <USBH_MSC_Process+0x56a>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ef6:	2102      	movs	r1, #2
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	4798      	blx	r3
 8009efc:	e005      	b.n	8009f0a <USBH_MSC_Process+0x576>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f04:	2106      	movs	r1, #6
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	4798      	blx	r3
        MSC_Handle->lun++;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8009f10:	3301      	adds	r3, #1
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 8009f1a:	e00b      	b.n	8009f34 <USBH_MSC_Process+0x5a0>
        MSC_Handle->lun = 0U;
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	2201      	movs	r2, #1
 8009f28:	731a      	strb	r2, [r3, #12]
      break;
 8009f2a:	e003      	b.n	8009f34 <USBH_MSC_Process+0x5a0>
      error = USBH_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8009f30:	e000      	b.n	8009f34 <USBH_MSC_Process+0x5a0>
      break;
 8009f32:	bf00      	nop
  }
  return error;
 8009f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3718      	adds	r7, #24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop

08009f40 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	370c      	adds	r7, #12
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b088      	sub	sp, #32
 8009f5a:	af02      	add	r7, sp, #8
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	460b      	mov	r3, r1
 8009f60:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009f70:	2301      	movs	r3, #1
 8009f72:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009f74:	78fb      	ldrb	r3, [r7, #3]
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	2134      	movs	r1, #52	@ 0x34
 8009f7a:	fb01 f303 	mul.w	r3, r1, r3
 8009f7e:	4413      	add	r3, r2
 8009f80:	3390      	adds	r3, #144	@ 0x90
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	2b07      	cmp	r3, #7
 8009f86:	d03c      	beq.n	800a002 <USBH_MSC_RdWrProcess+0xac>
 8009f88:	2b07      	cmp	r3, #7
 8009f8a:	f300 80a8 	bgt.w	800a0de <USBH_MSC_RdWrProcess+0x188>
 8009f8e:	2b05      	cmp	r3, #5
 8009f90:	d06c      	beq.n	800a06c <USBH_MSC_RdWrProcess+0x116>
 8009f92:	2b06      	cmp	r3, #6
 8009f94:	f040 80a3 	bne.w	800a0de <USBH_MSC_RdWrProcess+0x188>
  {
    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009f98:	78f9      	ldrb	r1, [r7, #3]
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fea7 	bl	800acf6 <USBH_MSC_SCSI_Read>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10b      	bne.n	8009fca <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009fb2:	78fb      	ldrb	r3, [r7, #3]
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	2134      	movs	r1, #52	@ 0x34
 8009fb8:	fb01 f303 	mul.w	r3, r1, r3
 8009fbc:	4413      	add	r3, r2
 8009fbe:	3390      	adds	r3, #144	@ 0x90
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009fc8:	e08b      	b.n	800a0e2 <USBH_MSC_RdWrProcess+0x18c>
      else if (scsi_status == USBH_FAIL)
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d109      	bne.n	8009fe4 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009fd0:	78fb      	ldrb	r3, [r7, #3]
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	2134      	movs	r1, #52	@ 0x34
 8009fd6:	fb01 f303 	mul.w	r3, r1, r3
 8009fda:	4413      	add	r3, r2
 8009fdc:	3390      	adds	r3, #144	@ 0x90
 8009fde:	2205      	movs	r2, #5
 8009fe0:	701a      	strb	r2, [r3, #0]
      break;
 8009fe2:	e07e      	b.n	800a0e2 <USBH_MSC_RdWrProcess+0x18c>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009fe4:	7bfb      	ldrb	r3, [r7, #15]
 8009fe6:	2b04      	cmp	r3, #4
 8009fe8:	d17b      	bne.n	800a0e2 <USBH_MSC_RdWrProcess+0x18c>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009fea:	78fb      	ldrb	r3, [r7, #3]
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	2134      	movs	r1, #52	@ 0x34
 8009ff0:	fb01 f303 	mul.w	r3, r1, r3
 8009ff4:	4413      	add	r3, r2
 8009ff6:	3390      	adds	r3, #144	@ 0x90
 8009ff8:	2208      	movs	r2, #8
 8009ffa:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	75fb      	strb	r3, [r7, #23]
      break;
 800a000:	e06f      	b.n	800a0e2 <USBH_MSC_RdWrProcess+0x18c>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a002:	78f9      	ldrb	r1, [r7, #3]
 800a004:	2300      	movs	r3, #0
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	2300      	movs	r3, #0
 800a00a:	2200      	movs	r2, #0
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fe02 	bl	800ac16 <USBH_MSC_SCSI_Write>
 800a012:	4603      	mov	r3, r0
 800a014:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a016:	7bfb      	ldrb	r3, [r7, #15]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10b      	bne.n	800a034 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a01c:	78fb      	ldrb	r3, [r7, #3]
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	2134      	movs	r1, #52	@ 0x34
 800a022:	fb01 f303 	mul.w	r3, r1, r3
 800a026:	4413      	add	r3, r2
 800a028:	3390      	adds	r3, #144	@ 0x90
 800a02a:	2201      	movs	r2, #1
 800a02c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a032:	e058      	b.n	800a0e6 <USBH_MSC_RdWrProcess+0x190>
      else if (scsi_status == USBH_FAIL)
 800a034:	7bfb      	ldrb	r3, [r7, #15]
 800a036:	2b02      	cmp	r3, #2
 800a038:	d109      	bne.n	800a04e <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a03a:	78fb      	ldrb	r3, [r7, #3]
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	2134      	movs	r1, #52	@ 0x34
 800a040:	fb01 f303 	mul.w	r3, r1, r3
 800a044:	4413      	add	r3, r2
 800a046:	3390      	adds	r3, #144	@ 0x90
 800a048:	2205      	movs	r2, #5
 800a04a:	701a      	strb	r2, [r3, #0]
      break;
 800a04c:	e04b      	b.n	800a0e6 <USBH_MSC_RdWrProcess+0x190>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a04e:	7bfb      	ldrb	r3, [r7, #15]
 800a050:	2b04      	cmp	r3, #4
 800a052:	d148      	bne.n	800a0e6 <USBH_MSC_RdWrProcess+0x190>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a054:	78fb      	ldrb	r3, [r7, #3]
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	2134      	movs	r1, #52	@ 0x34
 800a05a:	fb01 f303 	mul.w	r3, r1, r3
 800a05e:	4413      	add	r3, r2
 800a060:	3390      	adds	r3, #144	@ 0x90
 800a062:	2208      	movs	r2, #8
 800a064:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a066:	2302      	movs	r3, #2
 800a068:	75fb      	strb	r3, [r7, #23]
      break;
 800a06a:	e03c      	b.n	800a0e6 <USBH_MSC_RdWrProcess+0x190>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a06c:	78fb      	ldrb	r3, [r7, #3]
 800a06e:	2234      	movs	r2, #52	@ 0x34
 800a070:	fb02 f303 	mul.w	r3, r2, r3
 800a074:	3398      	adds	r3, #152	@ 0x98
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	4413      	add	r3, r2
 800a07a:	1d1a      	adds	r2, r3, #4
 800a07c:	78fb      	ldrb	r3, [r7, #3]
 800a07e:	4619      	mov	r1, r3
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fd49 	bl	800ab18 <USBH_MSC_SCSI_RequestSense>
 800a086:	4603      	mov	r3, r0
 800a088:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a08a:	7bfb      	ldrb	r3, [r7, #15]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d114      	bne.n	800a0ba <USBH_MSC_RdWrProcess+0x164>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	2134      	movs	r1, #52	@ 0x34
 800a096:	fb01 f303 	mul.w	r3, r1, r3
 800a09a:	4413      	add	r3, r2
 800a09c:	3390      	adds	r3, #144	@ 0x90
 800a09e:	2201      	movs	r2, #1
 800a0a0:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a0a2:	78fb      	ldrb	r3, [r7, #3]
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	2134      	movs	r1, #52	@ 0x34
 800a0a8:	fb01 f303 	mul.w	r3, r1, r3
 800a0ac:	4413      	add	r3, r2
 800a0ae:	3391      	adds	r3, #145	@ 0x91
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a0b8:	e017      	b.n	800a0ea <USBH_MSC_RdWrProcess+0x194>
      else if (scsi_status == USBH_FAIL)
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d014      	beq.n	800a0ea <USBH_MSC_RdWrProcess+0x194>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
 800a0c2:	2b04      	cmp	r3, #4
 800a0c4:	d111      	bne.n	800a0ea <USBH_MSC_RdWrProcess+0x194>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a0c6:	78fb      	ldrb	r3, [r7, #3]
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	2134      	movs	r1, #52	@ 0x34
 800a0cc:	fb01 f303 	mul.w	r3, r1, r3
 800a0d0:	4413      	add	r3, r2
 800a0d2:	3390      	adds	r3, #144	@ 0x90
 800a0d4:	2208      	movs	r2, #8
 800a0d6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a0d8:	2302      	movs	r3, #2
 800a0da:	75fb      	strb	r3, [r7, #23]
      break;
 800a0dc:	e005      	b.n	800a0ea <USBH_MSC_RdWrProcess+0x194>

    default:
      break;
 800a0de:	bf00      	nop
 800a0e0:	e004      	b.n	800a0ec <USBH_MSC_RdWrProcess+0x196>
      break;
 800a0e2:	bf00      	nop
 800a0e4:	e002      	b.n	800a0ec <USBH_MSC_RdWrProcess+0x196>
      break;
 800a0e6:	bf00      	nop
 800a0e8:	e000      	b.n	800a0ec <USBH_MSC_RdWrProcess+0x196>
      break;
 800a0ea:	bf00      	nop

  }
  return error;
 800a0ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3718      	adds	r7, #24
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b085      	sub	sp, #20
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	460b      	mov	r3, r1
 800a100:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a108:	69db      	ldr	r3, [r3, #28]
 800a10a:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800a10c:	78fb      	ldrb	r3, [r7, #3]
 800a10e:	b29a      	uxth	r2, r3
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	2b0b      	cmp	r3, #11
 800a11e:	d10c      	bne.n	800a13a <USBH_MSC_UnitIsReady+0x44>
 800a120:	78fb      	ldrb	r3, [r7, #3]
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	2134      	movs	r1, #52	@ 0x34
 800a126:	fb01 f303 	mul.w	r3, r1, r3
 800a12a:	4413      	add	r3, r2
 800a12c:	3391      	adds	r3, #145	@ 0x91
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d102      	bne.n	800a13a <USBH_MSC_UnitIsReady+0x44>
  {
    res = 1U;
 800a134:	2301      	movs	r3, #1
 800a136:	73fb      	strb	r3, [r7, #15]
 800a138:	e001      	b.n	800a13e <USBH_MSC_UnitIsReady+0x48>
  }
  else
  {
    res = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	460b      	mov	r3, r1
 800a156:	607a      	str	r2, [r7, #4]
 800a158:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800a164:	7afb      	ldrb	r3, [r7, #11]
 800a166:	b29a      	uxth	r2, r3
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if (phost->gState == HOST_CLASS)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	b2db      	uxtb	r3, r3
 800a174:	2b0b      	cmp	r3, #11
 800a176:	d10d      	bne.n	800a194 <USBH_MSC_GetLUNInfo+0x48>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a178:	7afb      	ldrb	r3, [r7, #11]
 800a17a:	2234      	movs	r2, #52	@ 0x34
 800a17c:	fb02 f303 	mul.w	r3, r2, r3
 800a180:	3390      	adds	r3, #144	@ 0x90
 800a182:	697a      	ldr	r2, [r7, #20]
 800a184:	4413      	add	r3, r2
 800a186:	2234      	movs	r2, #52	@ 0x34
 800a188:	4619      	mov	r1, r3
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f006 fa5e 	bl	801064c <memcpy>
    return USBH_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	e000      	b.n	800a196 <USBH_MSC_GetLUNInfo+0x4a>
  }
  else
  {
    return USBH_FAIL;
 800a194:	2302      	movs	r3, #2
  }
}
 800a196:	4618      	mov	r0, r3
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b088      	sub	sp, #32
 800a1a2:	af02      	add	r7, sp, #8
 800a1a4:	60f8      	str	r0, [r7, #12]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	603b      	str	r3, [r7, #0]
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800a1b8:	7afb      	ldrb	r3, [r7, #11]
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00e      	beq.n	800a1ec <USBH_MSC_Read+0x4e>
      (phost->gState != HOST_CLASS) ||
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a1d4:	2b0b      	cmp	r3, #11
 800a1d6:	d109      	bne.n	800a1ec <USBH_MSC_Read+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a1d8:	7afb      	ldrb	r3, [r7, #11]
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	2134      	movs	r1, #52	@ 0x34
 800a1de:	fb01 f303 	mul.w	r3, r1, r3
 800a1e2:	4413      	add	r3, r2
 800a1e4:	3390      	adds	r3, #144	@ 0x90
 800a1e6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d001      	beq.n	800a1f0 <USBH_MSC_Read+0x52>
  {
    return  USBH_FAIL;
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	e032      	b.n	800a256 <USBH_MSC_Read+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_READ;
 800a1f0:	7afb      	ldrb	r3, [r7, #11]
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	2134      	movs	r1, #52	@ 0x34
 800a1f6:	fb01 f303 	mul.w	r3, r1, r3
 800a1fa:	4413      	add	r3, r2
 800a1fc:	3390      	adds	r3, #144	@ 0x90
 800a1fe:	2206      	movs	r2, #6
 800a200:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a202:	7af9      	ldrb	r1, [r7, #11]
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f000 fd72 	bl	800acf6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a218:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a21a:	e013      	b.n	800a244 <USBH_MSC_Read+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	1ad2      	subs	r2, r2, r3
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	f242 7110 	movw	r1, #10000	@ 0x2710
 800a22c:	fb01 f303 	mul.w	r3, r1, r3
 800a230:	429a      	cmp	r2, r3
 800a232:	d805      	bhi.n	800a240 <USBH_MSC_Read+0xa2>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <USBH_MSC_Read+0xa6>
    {
      return USBH_FAIL;
 800a240:	2302      	movs	r3, #2
 800a242:	e008      	b.n	800a256 <USBH_MSC_Read+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a244:	7afb      	ldrb	r3, [r7, #11]
 800a246:	4619      	mov	r1, r3
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7ff fe84 	bl	8009f56 <USBH_MSC_RdWrProcess>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b01      	cmp	r3, #1
 800a252:	d0e3      	beq.n	800a21c <USBH_MSC_Read+0x7e>
    }
  }

  return USBH_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b088      	sub	sp, #32
 800a262:	af02      	add	r7, sp, #8
 800a264:	60f8      	str	r0, [r7, #12]
 800a266:	607a      	str	r2, [r7, #4]
 800a268:	603b      	str	r3, [r7, #0]
 800a26a:	460b      	mov	r3, r1
 800a26c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 800a278:	7afb      	ldrb	r3, [r7, #11]
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00e      	beq.n	800a2ac <USBH_MSC_Write+0x4e>
      (phost->gState != HOST_CLASS) ||
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a294:	2b0b      	cmp	r3, #11
 800a296:	d109      	bne.n	800a2ac <USBH_MSC_Write+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a298:	7afb      	ldrb	r3, [r7, #11]
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	2134      	movs	r1, #52	@ 0x34
 800a29e:	fb01 f303 	mul.w	r3, r1, r3
 800a2a2:	4413      	add	r3, r2
 800a2a4:	3390      	adds	r3, #144	@ 0x90
 800a2a6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d001      	beq.n	800a2b0 <USBH_MSC_Write+0x52>
  {
    return  USBH_FAIL;
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	e032      	b.n	800a316 <USBH_MSC_Write+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a2b0:	7afb      	ldrb	r3, [r7, #11]
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	2134      	movs	r1, #52	@ 0x34
 800a2b6:	fb01 f303 	mul.w	r3, r1, r3
 800a2ba:	4413      	add	r3, r2
 800a2bc:	3390      	adds	r3, #144	@ 0x90
 800a2be:	2207      	movs	r2, #7
 800a2c0:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a2c2:	7af9      	ldrb	r1, [r7, #11]
 800a2c4:	6a3b      	ldr	r3, [r7, #32]
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f000 fca2 	bl	800ac16 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a2d8:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a2da:	e013      	b.n	800a304 <USBH_MSC_Write+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	1ad2      	subs	r2, r2, r3
 800a2e6:	6a3b      	ldr	r3, [r7, #32]
 800a2e8:	f242 7110 	movw	r1, #10000	@ 0x2710
 800a2ec:	fb01 f303 	mul.w	r3, r1, r3
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d805      	bhi.n	800a300 <USBH_MSC_Write+0xa2>
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <USBH_MSC_Write+0xa6>
    {
      return USBH_FAIL;
 800a300:	2302      	movs	r3, #2
 800a302:	e008      	b.n	800a316 <USBH_MSC_Write+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a304:	7afb      	ldrb	r3, [r7, #11]
 800a306:	4619      	mov	r1, r3
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f7ff fe24 	bl	8009f56 <USBH_MSC_RdWrProcess>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b01      	cmp	r3, #1
 800a312:	d0e3      	beq.n	800a2dc <USBH_MSC_Write+0x7e>
    }
  }

  return USBH_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3718      	adds	r7, #24
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b082      	sub	sp, #8
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2221      	movs	r2, #33	@ 0x21
 800a32a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	22ff      	movs	r2, #255	@ 0xff
 800a330:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a344:	2200      	movs	r2, #0
 800a346:	2100      	movs	r1, #0
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f001 ff44 	bl	800c1d6 <USBH_CtlReq>
 800a34e:	4603      	mov	r3, r0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	22a1      	movs	r2, #161	@ 0xa1
 800a366:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	22fe      	movs	r2, #254	@ 0xfe
 800a36c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2201      	movs	r2, #1
 800a37e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a380:	2201      	movs	r2, #1
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f001 ff26 	bl	800c1d6 <USBH_CtlReq>
 800a38a:	4603      	mov	r3, r0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a3a2:	69db      	ldr	r3, [r3, #28]
 800a3a4:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	4a09      	ldr	r2, [pc, #36]	@ (800a3d0 <USBH_MSC_BOT_Init+0x3c>)
 800a3aa:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	4a09      	ldr	r2, [pc, #36]	@ (800a3d4 <USBH_MSC_BOT_Init+0x40>)
 800a3b0:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3714      	adds	r7, #20
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	43425355 	.word	0x43425355
 800a3d4:	20304050 	.word	0x20304050

0800a3d8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b088      	sub	sp, #32
 800a3dc:	af02      	add	r7, sp, #8
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a3fa:	69db      	ldr	r3, [r3, #28]
 800a3fc:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a3fe:	2300      	movs	r3, #0
 800a400:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a408:	3b01      	subs	r3, #1
 800a40a:	2b0a      	cmp	r3, #10
 800a40c:	f200 819e 	bhi.w	800a74c <USBH_MSC_BOT_Process+0x374>
 800a410:	a201      	add	r2, pc, #4	@ (adr r2, 800a418 <USBH_MSC_BOT_Process+0x40>)
 800a412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a416:	bf00      	nop
 800a418:	0800a445 	.word	0x0800a445
 800a41c:	0800a46d 	.word	0x0800a46d
 800a420:	0800a4d7 	.word	0x0800a4d7
 800a424:	0800a4f5 	.word	0x0800a4f5
 800a428:	0800a579 	.word	0x0800a579
 800a42c:	0800a59b 	.word	0x0800a59b
 800a430:	0800a633 	.word	0x0800a633
 800a434:	0800a64f 	.word	0x0800a64f
 800a438:	0800a6a1 	.word	0x0800a6a1
 800a43c:	0800a6d1 	.word	0x0800a6d1
 800a440:	0800a733 	.word	0x0800a733
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	78fa      	ldrb	r2, [r7, #3]
 800a448:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	2202      	movs	r2, #2
 800a450:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	795b      	ldrb	r3, [r3, #5]
 800a45e:	2201      	movs	r2, #1
 800a460:	9200      	str	r2, [sp, #0]
 800a462:	221f      	movs	r2, #31
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f002 f8c4 	bl	800c5f2 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a46a:	e17e      	b.n	800a76a <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	795b      	ldrb	r3, [r3, #5]
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f005 feda 	bl	801022c <USBH_LL_GetURBState>
 800a478:	4603      	mov	r3, r0
 800a47a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a47c:	7d3b      	ldrb	r3, [r7, #20]
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d118      	bne.n	800a4b4 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00f      	beq.n	800a4aa <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800a490:	b25b      	sxtb	r3, r3
 800a492:	2b00      	cmp	r3, #0
 800a494:	da04      	bge.n	800a4a0 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	2203      	movs	r2, #3
 800a49a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a49e:	e157      	b.n	800a750 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	2205      	movs	r2, #5
 800a4a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a4a8:	e152      	b.n	800a750 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	2207      	movs	r2, #7
 800a4ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a4b2:	e14d      	b.n	800a750 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a4b4:	7d3b      	ldrb	r3, [r7, #20]
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d104      	bne.n	800a4c4 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a4c2:	e145      	b.n	800a750 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a4c4:	7d3b      	ldrb	r3, [r7, #20]
 800a4c6:	2b05      	cmp	r3, #5
 800a4c8:	f040 8142 	bne.w	800a750 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	220a      	movs	r2, #10
 800a4d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a4d4:	e13c      	b.n	800a750 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	895a      	ldrh	r2, [r3, #10]
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	791b      	ldrb	r3, [r3, #4]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f002 f8a9 	bl	800c63c <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	2204      	movs	r2, #4
 800a4ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 800a4f2:	e13a      	b.n	800a76a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	791b      	ldrb	r3, [r3, #4]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f005 fe96 	bl	801022c <USBH_LL_GetURBState>
 800a500:	4603      	mov	r3, r0
 800a502:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a504:	7d3b      	ldrb	r3, [r7, #20]
 800a506:	2b01      	cmp	r3, #1
 800a508:	d12d      	bne.n	800a566 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	8952      	ldrh	r2, [r2, #10]
 800a512:	4293      	cmp	r3, r2
 800a514:	d910      	bls.n	800a538 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	8952      	ldrh	r2, [r2, #10]
 800a520:	441a      	add	r2, r3
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	8952      	ldrh	r2, [r2, #10]
 800a530:	1a9a      	subs	r2, r3, r2
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a536:	e002      	b.n	800a53e <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	2200      	movs	r2, #0
 800a53c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00a      	beq.n	800a55c <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	895a      	ldrh	r2, [r3, #10]
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	791b      	ldrb	r3, [r3, #4]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f002 f871 	bl	800c63c <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a55a:	e0fb      	b.n	800a754 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	2207      	movs	r2, #7
 800a560:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a564:	e0f6      	b.n	800a754 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a566:	7d3b      	ldrb	r3, [r7, #20]
 800a568:	2b05      	cmp	r3, #5
 800a56a:	f040 80f3 	bne.w	800a754 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	2209      	movs	r2, #9
 800a572:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a576:	e0ed      	b.n	800a754 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	891a      	ldrh	r2, [r3, #8]
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	795b      	ldrb	r3, [r3, #5]
 800a586:	2001      	movs	r0, #1
 800a588:	9000      	str	r0, [sp, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f002 f831 	bl	800c5f2 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	2206      	movs	r2, #6
 800a594:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a598:	e0e7      	b.n	800a76a <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	795b      	ldrb	r3, [r3, #5]
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f005 fe43 	bl	801022c <USBH_LL_GetURBState>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a5aa:	7d3b      	ldrb	r3, [r7, #20]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d12f      	bne.n	800a610 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5b4:	693a      	ldr	r2, [r7, #16]
 800a5b6:	8912      	ldrh	r2, [r2, #8]
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d910      	bls.n	800a5de <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5c2:	693a      	ldr	r2, [r7, #16]
 800a5c4:	8912      	ldrh	r2, [r2, #8]
 800a5c6:	441a      	add	r2, r3
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5d2:	693a      	ldr	r2, [r7, #16]
 800a5d4:	8912      	ldrh	r2, [r2, #8]
 800a5d6:	1a9a      	subs	r2, r3, r2
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a5dc:	e002      	b.n	800a5e4 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00c      	beq.n	800a606 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	891a      	ldrh	r2, [r3, #8]
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	795b      	ldrb	r3, [r3, #5]
 800a5fa:	2001      	movs	r0, #1
 800a5fc:	9000      	str	r0, [sp, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f001 fff7 	bl	800c5f2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a604:	e0a8      	b.n	800a758 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	2207      	movs	r2, #7
 800a60a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a60e:	e0a3      	b.n	800a758 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a610:	7d3b      	ldrb	r3, [r7, #20]
 800a612:	2b02      	cmp	r3, #2
 800a614:	d104      	bne.n	800a620 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	2205      	movs	r2, #5
 800a61a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a61e:	e09b      	b.n	800a758 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a620:	7d3b      	ldrb	r3, [r7, #20]
 800a622:	2b05      	cmp	r3, #5
 800a624:	f040 8098 	bne.w	800a758 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	220a      	movs	r2, #10
 800a62c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a630:	e092      	b.n	800a758 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	791b      	ldrb	r3, [r3, #4]
 800a63c:	220d      	movs	r2, #13
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f001 fffc 	bl	800c63c <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	2208      	movs	r2, #8
 800a648:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a64c:	e08d      	b.n	800a76a <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	791b      	ldrb	r3, [r3, #4]
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f005 fde9 	bl	801022c <USBH_LL_GetURBState>
 800a65a:	4603      	mov	r3, r0
 800a65c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a65e:	7d3b      	ldrb	r3, [r7, #20]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d115      	bne.n	800a690 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f8a9 	bl	800a7cc <USBH_MSC_DecodeCSW>
 800a67a:	4603      	mov	r3, r0
 800a67c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a67e:	7d7b      	ldrb	r3, [r7, #21]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d102      	bne.n	800a68a <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a688:	e068      	b.n	800a75c <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a68a:	2302      	movs	r3, #2
 800a68c:	75fb      	strb	r3, [r7, #23]
      break;
 800a68e:	e065      	b.n	800a75c <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a690:	7d3b      	ldrb	r3, [r7, #20]
 800a692:	2b05      	cmp	r3, #5
 800a694:	d162      	bne.n	800a75c <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	2209      	movs	r2, #9
 800a69a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a69e:	e05d      	b.n	800a75c <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a6a0:	78fb      	ldrb	r3, [r7, #3]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f864 	bl	800a774 <USBH_MSC_BOT_Abort>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a6b0:	7dbb      	ldrb	r3, [r7, #22]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d104      	bne.n	800a6c0 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	2207      	movs	r2, #7
 800a6ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a6be:	e04f      	b.n	800a760 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a6c0:	7dbb      	ldrb	r3, [r7, #22]
 800a6c2:	2b04      	cmp	r3, #4
 800a6c4:	d14c      	bne.n	800a760 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	220b      	movs	r2, #11
 800a6ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a6ce:	e047      	b.n	800a760 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a6d0:	78fb      	ldrb	r3, [r7, #3]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f84c 	bl	800a774 <USBH_MSC_BOT_Abort>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a6e0:	7dbb      	ldrb	r3, [r7, #22]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d11d      	bne.n	800a722 <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	795b      	ldrb	r3, [r3, #5]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f005 fdfa 	bl	80102e6 <USBH_LL_GetToggle>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	7959      	ldrb	r1, [r3, #5]
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
 800a6fc:	f1c3 0301 	rsb	r3, r3, #1
 800a700:	b2db      	uxtb	r3, r3
 800a702:	461a      	mov	r2, r3
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f005 fdbb 	bl	8010280 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	791b      	ldrb	r3, [r3, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	4619      	mov	r1, r3
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f005 fdb4 	bl	8010280 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	2209      	movs	r2, #9
 800a71c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a720:	e020      	b.n	800a764 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a722:	7dbb      	ldrb	r3, [r7, #22]
 800a724:	2b04      	cmp	r3, #4
 800a726:	d11d      	bne.n	800a764 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	220b      	movs	r2, #11
 800a72c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a730:	e018      	b.n	800a764 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7ff fdf3 	bl	800a31e <USBH_MSC_BOT_REQ_Reset>
 800a738:	4603      	mov	r3, r0
 800a73a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a73c:	7dfb      	ldrb	r3, [r7, #23]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d112      	bne.n	800a768 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 800a74a:	e00d      	b.n	800a768 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a74c:	bf00      	nop
 800a74e:	e00c      	b.n	800a76a <USBH_MSC_BOT_Process+0x392>
      break;
 800a750:	bf00      	nop
 800a752:	e00a      	b.n	800a76a <USBH_MSC_BOT_Process+0x392>
      break;
 800a754:	bf00      	nop
 800a756:	e008      	b.n	800a76a <USBH_MSC_BOT_Process+0x392>
      break;
 800a758:	bf00      	nop
 800a75a:	e006      	b.n	800a76a <USBH_MSC_BOT_Process+0x392>
      break;
 800a75c:	bf00      	nop
 800a75e:	e004      	b.n	800a76a <USBH_MSC_BOT_Process+0x392>
      break;
 800a760:	bf00      	nop
 800a762:	e002      	b.n	800a76a <USBH_MSC_BOT_Process+0x392>
      break;
 800a764:	bf00      	nop
 800a766:	e000      	b.n	800a76a <USBH_MSC_BOT_Process+0x392>
      break;
 800a768:	bf00      	nop
  }
  return status;
 800a76a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	460b      	mov	r3, r1
 800a77e:	70fb      	strb	r3, [r7, #3]
 800a780:	4613      	mov	r3, r2
 800a782:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a784:	2302      	movs	r3, #2
 800a786:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a78e:	69db      	ldr	r3, [r3, #28]
 800a790:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a792:	78bb      	ldrb	r3, [r7, #2]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d002      	beq.n	800a79e <USBH_MSC_BOT_Abort+0x2a>
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d009      	beq.n	800a7b0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a79c:	e011      	b.n	800a7c2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	79db      	ldrb	r3, [r3, #7]
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f001 f9e1 	bl	800bb6c <USBH_ClrFeature>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	73fb      	strb	r3, [r7, #15]
      break;
 800a7ae:	e008      	b.n	800a7c2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	799b      	ldrb	r3, [r3, #6]
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f001 f9d8 	bl	800bb6c <USBH_ClrFeature>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	73fb      	strb	r3, [r7, #15]
      break;
 800a7c0:	bf00      	nop
  }
  return status;
 800a7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7da:	69db      	ldr	r3, [r3, #28]
 800a7dc:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	791b      	ldrb	r3, [r3, #4]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f005 fc8d 	bl	8010108 <USBH_LL_GetLastXferSize>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b0d      	cmp	r3, #13
 800a7f2:	d002      	beq.n	800a7fa <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	73fb      	strb	r3, [r7, #15]
 800a7f8:	e024      	b.n	800a844 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7fe:	4a14      	ldr	r2, [pc, #80]	@ (800a850 <USBH_MSC_DecodeCSW+0x84>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d11d      	bne.n	800a840 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d119      	bne.n	800a844 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a816:	2b00      	cmp	r3, #0
 800a818:	d102      	bne.n	800a820 <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 800a81a:	2300      	movs	r3, #0
 800a81c:	73fb      	strb	r3, [r7, #15]
 800a81e:	e011      	b.n	800a844 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a826:	2b01      	cmp	r3, #1
 800a828:	d102      	bne.n	800a830 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a82a:	2301      	movs	r3, #1
 800a82c:	73fb      	strb	r3, [r7, #15]
 800a82e:	e009      	b.n	800a844 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a836:	2b02      	cmp	r3, #2
 800a838:	d104      	bne.n	800a844 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a83a:	2302      	movs	r3, #2
 800a83c:	73fb      	strb	r3, [r7, #15]
 800a83e:	e001      	b.n	800a844 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a840:	2302      	movs	r3, #2
 800a842:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a844:	7bfb      	ldrb	r3, [r7, #15]
}
 800a846:	4618      	mov	r0, r3
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	53425355 	.word	0x53425355

0800a854 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	460b      	mov	r3, r1
 800a85e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a860:	2302      	movs	r3, #2
 800a862:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a86a:	69db      	ldr	r3, [r3, #28]
 800a86c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a874:	2b01      	cmp	r3, #1
 800a876:	d002      	beq.n	800a87e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d021      	beq.n	800a8c0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a87c:	e028      	b.n	800a8d0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	2200      	movs	r2, #0
 800a882:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	220a      	movs	r2, #10
 800a890:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	3363      	adds	r3, #99	@ 0x63
 800a898:	2210      	movs	r2, #16
 800a89a:	2100      	movs	r1, #0
 800a89c:	4618      	mov	r0, r3
 800a89e:	f005 fe67 	bl	8010570 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	2202      	movs	r2, #2
 800a8b6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a8be:	e007      	b.n	800a8d0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a8c0:	78fb      	ldrb	r3, [r7, #3]
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f7ff fd87 	bl	800a3d8 <USBH_MSC_BOT_Process>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ce:	bf00      	nop
  }

  return error;
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b086      	sub	sp, #24
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	607a      	str	r2, [r7, #4]
 800a8e6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a8f2:	69db      	ldr	r3, [r3, #28]
 800a8f4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d002      	beq.n	800a906 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a900:	2b02      	cmp	r3, #2
 800a902:	d027      	beq.n	800a954 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a904:	e05e      	b.n	800a9c4 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	2208      	movs	r2, #8
 800a90a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	2280      	movs	r2, #128	@ 0x80
 800a910:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	220a      	movs	r2, #10
 800a918:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	3363      	adds	r3, #99	@ 0x63
 800a920:	2210      	movs	r2, #16
 800a922:	2100      	movs	r1, #0
 800a924:	4618      	mov	r0, r3
 800a926:	f005 fe23 	bl	8010570 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	2225      	movs	r2, #37	@ 0x25
 800a92e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	2201      	movs	r2, #1
 800a936:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	2202      	movs	r2, #2
 800a93e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	f103 0210 	add.w	r2, r3, #16
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a94e:	2301      	movs	r3, #1
 800a950:	75fb      	strb	r3, [r7, #23]
      break;
 800a952:	e037      	b.n	800a9c4 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a954:	7afb      	ldrb	r3, [r7, #11]
 800a956:	4619      	mov	r1, r3
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f7ff fd3d 	bl	800a3d8 <USBH_MSC_BOT_Process>
 800a95e:	4603      	mov	r3, r0
 800a960:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a962:	7dfb      	ldrb	r3, [r7, #23]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d12c      	bne.n	800a9c2 <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a96e:	3303      	adds	r3, #3
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a97a:	3302      	adds	r3, #2
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	021b      	lsls	r3, r3, #8
 800a980:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a988:	3301      	adds	r3, #1
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a98e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	061b      	lsls	r3, r3, #24
 800a99a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9a6:	3307      	adds	r3, #7
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9b2:	3306      	adds	r3, #6
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	021b      	lsls	r3, r3, #8
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	809a      	strh	r2, [r3, #4]
      break;
 800a9c2:	bf00      	nop
  }

  return error;
 800a9c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3718      	adds	r7, #24
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b086      	sub	sp, #24
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	60f8      	str	r0, [r7, #12]
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	607a      	str	r2, [r7, #4]
 800a9da:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a9dc:	2302      	movs	r3, #2
 800a9de:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a9e6:	69db      	ldr	r3, [r3, #28]
 800a9e8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d002      	beq.n	800a9fa <USBH_MSC_SCSI_Inquiry+0x2c>
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	d03d      	beq.n	800aa74 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a9f8:	e089      	b.n	800ab0e <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	2224      	movs	r2, #36	@ 0x24
 800a9fe:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	2280      	movs	r2, #128	@ 0x80
 800aa04:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	220a      	movs	r2, #10
 800aa0c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	3363      	adds	r3, #99	@ 0x63
 800aa14:	220a      	movs	r2, #10
 800aa16:	2100      	movs	r1, #0
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f005 fda9 	bl	8010570 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	2212      	movs	r2, #18
 800aa22:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800aa26:	7afb      	ldrb	r3, [r7, #11]
 800aa28:	015b      	lsls	r3, r3, #5
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	2224      	movs	r2, #36	@ 0x24
 800aa46:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	2201      	movs	r2, #1
 800aa56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	2202      	movs	r2, #2
 800aa5e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	f103 0210 	add.w	r2, r3, #16
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	75fb      	strb	r3, [r7, #23]
      break;
 800aa72:	e04c      	b.n	800ab0e <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800aa74:	7afb      	ldrb	r3, [r7, #11]
 800aa76:	4619      	mov	r1, r3
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f7ff fcad 	bl	800a3d8 <USBH_MSC_BOT_Process>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800aa82:	7dfb      	ldrb	r3, [r7, #23]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d141      	bne.n	800ab0c <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800aa88:	2222      	movs	r2, #34	@ 0x22
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f005 fd6f 	bl	8010570 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	f003 031f 	and.w	r3, r3, #31
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	095b      	lsrs	r3, r3, #5
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaba:	3301      	adds	r3, #1
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	b25b      	sxtb	r3, r3
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	da03      	bge.n	800aacc <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	709a      	strb	r2, [r3, #2]
 800aaca:	e002      	b.n	800aad2 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	1cd8      	adds	r0, r3, #3
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aadc:	3308      	adds	r3, #8
 800aade:	2208      	movs	r2, #8
 800aae0:	4619      	mov	r1, r3
 800aae2:	f005 fdb3 	bl	801064c <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f103 000c 	add.w	r0, r3, #12
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaf2:	3310      	adds	r3, #16
 800aaf4:	2210      	movs	r2, #16
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	f005 fda8 	bl	801064c <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	331d      	adds	r3, #29
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800ab06:	3220      	adds	r2, #32
 800ab08:	6812      	ldr	r2, [r2, #0]
 800ab0a:	601a      	str	r2, [r3, #0]
      break;
 800ab0c:	bf00      	nop
  }

  return error;
 800ab0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b086      	sub	sp, #24
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	460b      	mov	r3, r1
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800ab26:	2302      	movs	r3, #2
 800ab28:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab30:	69db      	ldr	r3, [r3, #28]
 800ab32:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d002      	beq.n	800ab44 <USBH_MSC_SCSI_RequestSense+0x2c>
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d03d      	beq.n	800abbe <USBH_MSC_SCSI_RequestSense+0xa6>

      }
      break;

    default:
      break;
 800ab42:	e063      	b.n	800ac0c <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	220e      	movs	r2, #14
 800ab48:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	2280      	movs	r2, #128	@ 0x80
 800ab4e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	220a      	movs	r2, #10
 800ab56:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	3363      	adds	r3, #99	@ 0x63
 800ab5e:	2210      	movs	r2, #16
 800ab60:	2100      	movs	r1, #0
 800ab62:	4618      	mov	r0, r3
 800ab64:	f005 fd04 	bl	8010570 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	2203      	movs	r2, #3
 800ab6c:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800ab70:	7afb      	ldrb	r3, [r7, #11]
 800ab72:	015b      	lsls	r3, r3, #5
 800ab74:	b2da      	uxtb	r2, r3
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	220e      	movs	r2, #14
 800ab90:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	2202      	movs	r2, #2
 800aba8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	f103 0210 	add.w	r2, r3, #16
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800abb8:	2301      	movs	r3, #1
 800abba:	75fb      	strb	r3, [r7, #23]
      break;
 800abbc:	e026      	b.n	800ac0c <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
 800abbe:	7afb      	ldrb	r3, [r7, #11]
 800abc0:	4619      	mov	r1, r3
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f7ff fc08 	bl	800a3d8 <USBH_MSC_BOT_Process>
 800abc8:	4603      	mov	r3, r0
 800abca:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800abcc:	7dfb      	ldrb	r3, [r7, #23]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d11b      	bne.n	800ac0a <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abd8:	3302      	adds	r3, #2
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	f003 030f 	and.w	r3, r3, #15
 800abe0:	b2da      	uxtb	r2, r3
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abec:	7b1a      	ldrb	r2, [r3, #12]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abf8:	7b5a      	ldrb	r2, [r3, #13]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	785b      	ldrb	r3, [r3, #1]
 800ac02:	2b3a      	cmp	r3, #58	@ 0x3a
 800ac04:	d101      	bne.n	800ac0a <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
 800ac06:	2304      	movs	r3, #4
 800ac08:	75fb      	strb	r3, [r7, #23]
      break;
 800ac0a:	bf00      	nop
  }

  return error;
 800ac0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b086      	sub	sp, #24
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	60f8      	str	r0, [r7, #12]
 800ac1e:	607a      	str	r2, [r7, #4]
 800ac20:	603b      	str	r3, [r7, #0]
 800ac22:	460b      	mov	r3, r1
 800ac24:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800ac26:	2302      	movs	r3, #2
 800ac28:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac30:	69db      	ldr	r3, [r3, #28]
 800ac32:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d002      	beq.n	800ac44 <USBH_MSC_SCSI_Write+0x2e>
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d04c      	beq.n	800acdc <USBH_MSC_SCSI_Write+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ac42:	e053      	b.n	800acec <USBH_MSC_SCSI_Write+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 800ac44:	7afb      	ldrb	r3, [r7, #11]
 800ac46:	693a      	ldr	r2, [r7, #16]
 800ac48:	2134      	movs	r1, #52	@ 0x34
 800ac4a:	fb01 f303 	mul.w	r3, r1, r3
 800ac4e:	4413      	add	r3, r2
 800ac50:	3398      	adds	r3, #152	@ 0x98
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	fb03 f202 	mul.w	r2, r3, r2
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	220a      	movs	r2, #10
 800ac6c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	3363      	adds	r3, #99	@ 0x63
 800ac74:	2210      	movs	r2, #16
 800ac76:	2100      	movs	r1, #0
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f005 fc79 	bl	8010570 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_WRITE10;
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	222a      	movs	r2, #42	@ 0x2a
 800ac82:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 800ac86:	79fa      	ldrb	r2, [r7, #7]
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800ac8e:	79ba      	ldrb	r2, [r7, #6]
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 800ac96:	797a      	ldrb	r2, [r7, #5]
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 800ac9e:	1d3b      	adds	r3, r7, #4
 800aca0:	781a      	ldrb	r2, [r3, #0]
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 800aca8:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 800acb2:	f107 0320 	add.w	r3, r7, #32
 800acb6:	781a      	ldrb	r2, [r3, #0]
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	2201      	movs	r2, #1
 800acc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	2202      	movs	r2, #2
 800acca:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800acd6:	2301      	movs	r3, #1
 800acd8:	75fb      	strb	r3, [r7, #23]
      break;
 800acda:	e007      	b.n	800acec <USBH_MSC_SCSI_Write+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 800acdc:	7afb      	ldrb	r3, [r7, #11]
 800acde:	4619      	mov	r1, r3
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f7ff fb79 	bl	800a3d8 <USBH_MSC_BOT_Process>
 800ace6:	4603      	mov	r3, r0
 800ace8:	75fb      	strb	r3, [r7, #23]
      break;
 800acea:	bf00      	nop
  }

  return error;
 800acec:	7dfb      	ldrb	r3, [r7, #23]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3718      	adds	r7, #24
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b086      	sub	sp, #24
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	60f8      	str	r0, [r7, #12]
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	603b      	str	r3, [r7, #0]
 800ad02:	460b      	mov	r3, r1
 800ad04:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800ad06:	2302      	movs	r3, #2
 800ad08:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ad10:	69db      	ldr	r3, [r3, #28]
 800ad12:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d002      	beq.n	800ad24 <USBH_MSC_SCSI_Read+0x2e>
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d04c      	beq.n	800adbc <USBH_MSC_SCSI_Read+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ad22:	e053      	b.n	800adcc <USBH_MSC_SCSI_Read+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 800ad24:	7afb      	ldrb	r3, [r7, #11]
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	2134      	movs	r1, #52	@ 0x34
 800ad2a:	fb01 f303 	mul.w	r3, r1, r3
 800ad2e:	4413      	add	r3, r2
 800ad30:	3398      	adds	r3, #152	@ 0x98
 800ad32:	881b      	ldrh	r3, [r3, #0]
 800ad34:	461a      	mov	r2, r3
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	fb03 f202 	mul.w	r2, r3, r2
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	2280      	movs	r2, #128	@ 0x80
 800ad44:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	220a      	movs	r2, #10
 800ad4c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	3363      	adds	r3, #99	@ 0x63
 800ad54:	2210      	movs	r2, #16
 800ad56:	2100      	movs	r1, #0
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f005 fc09 	bl	8010570 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_READ10;
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	2228      	movs	r2, #40	@ 0x28
 800ad62:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 800ad66:	79fa      	ldrb	r2, [r7, #7]
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 800ad6e:	79ba      	ldrb	r2, [r7, #6]
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 800ad76:	797a      	ldrb	r2, [r7, #5]
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 800ad7e:	1d3b      	adds	r3, r7, #4
 800ad80:	781a      	ldrb	r2, [r3, #0]
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 800ad88:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 800ad92:	f107 0320 	add.w	r3, r7, #32
 800ad96:	781a      	ldrb	r2, [r3, #0]
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	2202      	movs	r2, #2
 800adaa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	683a      	ldr	r2, [r7, #0]
 800adb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800adb6:	2301      	movs	r3, #1
 800adb8:	75fb      	strb	r3, [r7, #23]
      break;
 800adba:	e007      	b.n	800adcc <USBH_MSC_SCSI_Read+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 800adbc:	7afb      	ldrb	r3, [r7, #11]
 800adbe:	4619      	mov	r1, r3
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f7ff fb09 	bl	800a3d8 <USBH_MSC_BOT_Process>
 800adc6:	4603      	mov	r3, r0
 800adc8:	75fb      	strb	r3, [r7, #23]
      break;
 800adca:	bf00      	nop
  }

  return error;
 800adcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3718      	adds	r7, #24
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b084      	sub	sp, #16
 800adda:	af00      	add	r7, sp, #0
 800addc:	60f8      	str	r0, [r7, #12]
 800adde:	60b9      	str	r1, [r7, #8]
 800ade0:	4613      	mov	r3, r2
 800ade2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800adea:	2302      	movs	r3, #2
 800adec:	e029      	b.n	800ae42 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	79fa      	ldrb	r2, [r7, #7]
 800adf2:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f000 f81f 	bl	800ae4a <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d003      	beq.n	800ae3a <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f005 f8b0 	bl	800ffa0 <USBH_LL_Init>

  return USBH_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b084      	sub	sp, #16
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ae52:	2300      	movs	r3, #0
 800ae54:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ae56:	2300      	movs	r3, #0
 800ae58:	60fb      	str	r3, [r7, #12]
 800ae5a:	e009      	b.n	800ae70 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	33e0      	adds	r3, #224	@ 0xe0
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4413      	add	r3, r2
 800ae66:	2200      	movs	r2, #0
 800ae68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	60fb      	str	r3, [r7, #12]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b0f      	cmp	r3, #15
 800ae74:	d9f2      	bls.n	800ae5c <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ae76:	2300      	movs	r3, #0
 800ae78:	60fb      	str	r3, [r7, #12]
 800ae7a:	e009      	b.n	800ae90 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	4413      	add	r3, r2
 800ae82:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ae86:	2200      	movs	r2, #0
 800ae88:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	60fb      	str	r3, [r7, #12]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae96:	d3f1      	bcc.n	800ae7c <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2240      	movs	r2, #64	@ 0x40
 800aebc:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	331c      	adds	r3, #28
 800aee8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aeec:	2100      	movs	r1, #0
 800aeee:	4618      	mov	r0, r3
 800aef0:	f005 fb3e 	bl	8010570 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800aefa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aefe:	2100      	movs	r1, #0
 800af00:	4618      	mov	r0, r3
 800af02:	f005 fb35 	bl	8010570 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800af0c:	2212      	movs	r2, #18
 800af0e:	2100      	movs	r1, #0
 800af10:	4618      	mov	r0, r3
 800af12:	f005 fb2d 	bl	8010570 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800af1c:	223e      	movs	r2, #62	@ 0x3e
 800af1e:	2100      	movs	r1, #0
 800af20:	4618      	mov	r0, r3
 800af22:	f005 fb25 	bl	8010570 <memset>

  return USBH_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d016      	beq.n	800af72 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10e      	bne.n	800af6c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800af54:	1c59      	adds	r1, r3, #1
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	33de      	adds	r3, #222	@ 0xde
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800af66:	2300      	movs	r3, #0
 800af68:	73fb      	strb	r3, [r7, #15]
 800af6a:	e004      	b.n	800af76 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800af6c:	2302      	movs	r3, #2
 800af6e:	73fb      	strb	r3, [r7, #15]
 800af70:	e001      	b.n	800af76 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800af72:	2302      	movs	r3, #2
 800af74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800af76:	7bfb      	ldrb	r3, [r7, #15]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	460b      	mov	r3, r1
 800af8e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800af90:	2300      	movs	r3, #0
 800af92:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800af9a:	78fa      	ldrb	r2, [r7, #3]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d204      	bcs.n	800afaa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	78fa      	ldrb	r2, [r7, #3]
 800afa4:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800afa8:	e001      	b.n	800afae <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800afaa:	2302      	movs	r3, #2
 800afac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800afae:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3714      	adds	r7, #20
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b087      	sub	sp, #28
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	4608      	mov	r0, r1
 800afc6:	4611      	mov	r1, r2
 800afc8:	461a      	mov	r2, r3
 800afca:	4603      	mov	r3, r0
 800afcc:	70fb      	strb	r3, [r7, #3]
 800afce:	460b      	mov	r3, r1
 800afd0:	70bb      	strb	r3, [r7, #2]
 800afd2:	4613      	mov	r3, r2
 800afd4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800afd6:	2300      	movs	r3, #0
 800afd8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800afda:	2300      	movs	r3, #0
 800afdc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800afe4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800afe6:	e025      	b.n	800b034 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800afe8:	7dfb      	ldrb	r3, [r7, #23]
 800afea:	221a      	movs	r2, #26
 800afec:	fb02 f303 	mul.w	r3, r2, r3
 800aff0:	3308      	adds	r3, #8
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	4413      	add	r3, r2
 800aff6:	3302      	adds	r3, #2
 800aff8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	795b      	ldrb	r3, [r3, #5]
 800affe:	78fa      	ldrb	r2, [r7, #3]
 800b000:	429a      	cmp	r2, r3
 800b002:	d002      	beq.n	800b00a <USBH_FindInterface+0x4e>
 800b004:	78fb      	ldrb	r3, [r7, #3]
 800b006:	2bff      	cmp	r3, #255	@ 0xff
 800b008:	d111      	bne.n	800b02e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b00e:	78ba      	ldrb	r2, [r7, #2]
 800b010:	429a      	cmp	r2, r3
 800b012:	d002      	beq.n	800b01a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b014:	78bb      	ldrb	r3, [r7, #2]
 800b016:	2bff      	cmp	r3, #255	@ 0xff
 800b018:	d109      	bne.n	800b02e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b01e:	787a      	ldrb	r2, [r7, #1]
 800b020:	429a      	cmp	r2, r3
 800b022:	d002      	beq.n	800b02a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b024:	787b      	ldrb	r3, [r7, #1]
 800b026:	2bff      	cmp	r3, #255	@ 0xff
 800b028:	d101      	bne.n	800b02e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b02a:	7dfb      	ldrb	r3, [r7, #23]
 800b02c:	e006      	b.n	800b03c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b02e:	7dfb      	ldrb	r3, [r7, #23]
 800b030:	3301      	adds	r3, #1
 800b032:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b034:	7dfb      	ldrb	r3, [r7, #23]
 800b036:	2b01      	cmp	r3, #1
 800b038:	d9d6      	bls.n	800afe8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b03a:	23ff      	movs	r3, #255	@ 0xff
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	371c      	adds	r7, #28
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f004 ffe1 	bl	8010018 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b056:	2101      	movs	r1, #1
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f005 f8fa 	bl	8010252 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b088      	sub	sp, #32
 800b06c:	af04      	add	r7, sp, #16
 800b06e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b070:	2302      	movs	r3, #2
 800b072:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b074:	2300      	movs	r3, #0
 800b076:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	2b01      	cmp	r3, #1
 800b082:	d102      	bne.n	800b08a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2203      	movs	r2, #3
 800b088:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	2b0b      	cmp	r3, #11
 800b092:	f200 81bb 	bhi.w	800b40c <USBH_Process+0x3a4>
 800b096:	a201      	add	r2, pc, #4	@ (adr r2, 800b09c <USBH_Process+0x34>)
 800b098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09c:	0800b0cd 	.word	0x0800b0cd
 800b0a0:	0800b0ff 	.word	0x0800b0ff
 800b0a4:	0800b167 	.word	0x0800b167
 800b0a8:	0800b3a7 	.word	0x0800b3a7
 800b0ac:	0800b40d 	.word	0x0800b40d
 800b0b0:	0800b207 	.word	0x0800b207
 800b0b4:	0800b34d 	.word	0x0800b34d
 800b0b8:	0800b23d 	.word	0x0800b23d
 800b0bc:	0800b25d 	.word	0x0800b25d
 800b0c0:	0800b27b 	.word	0x0800b27b
 800b0c4:	0800b2bf 	.word	0x0800b2bf
 800b0c8:	0800b38f 	.word	0x0800b38f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f000 819b 	beq.w	800b410 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b0e0:	20c8      	movs	r0, #200	@ 0xc8
 800b0e2:	f005 f933 	bl	801034c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f004 fff3 	bl	80100d2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b0fc:	e188      	b.n	800b410 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800b104:	2b01      	cmp	r3, #1
 800b106:	d107      	bne.n	800b118 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2202      	movs	r2, #2
 800b114:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b116:	e18a      	b.n	800b42e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b11e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b122:	d914      	bls.n	800b14e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b12a:	3301      	adds	r3, #1
 800b12c:	b2da      	uxtb	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	d903      	bls.n	800b146 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	220d      	movs	r2, #13
 800b142:	701a      	strb	r2, [r3, #0]
      break;
 800b144:	e173      	b.n	800b42e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	701a      	strb	r2, [r3, #0]
      break;
 800b14c:	e16f      	b.n	800b42e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b154:	f103 020a 	add.w	r2, r3, #10
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800b15e:	200a      	movs	r0, #10
 800b160:	f005 f8f4 	bl	801034c <USBH_Delay>
      break;
 800b164:	e163      	b.n	800b42e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d005      	beq.n	800b17c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b176:	2104      	movs	r1, #4
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b17c:	2064      	movs	r0, #100	@ 0x64
 800b17e:	f005 f8e5 	bl	801034c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f004 ff7e 	bl	8010084 <USBH_LL_GetSpeed>
 800b188:	4603      	mov	r3, r0
 800b18a:	461a      	mov	r2, r3
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2205      	movs	r2, #5
 800b196:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b198:	2100      	movs	r1, #0
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f001 fa9b 	bl	800c6d6 <USBH_AllocPipe>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b1a8:	2180      	movs	r1, #128	@ 0x80
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f001 fa93 	bl	800c6d6 <USBH_AllocPipe>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	7919      	ldrb	r1, [r3, #4]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b1cc:	9202      	str	r2, [sp, #8]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	9201      	str	r2, [sp, #4]
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2280      	movs	r2, #128	@ 0x80
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f001 fa4d 	bl	800c678 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	7959      	ldrb	r1, [r3, #5]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b1f2:	9202      	str	r2, [sp, #8]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	9201      	str	r2, [sp, #4]
 800b1f8:	9300      	str	r3, [sp, #0]
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f001 fa3a 	bl	800c678 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b204:	e113      	b.n	800b42e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 f916 	bl	800b438 <USBH_HandleEnum>
 800b20c:	4603      	mov	r3, r0
 800b20e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b210:	7bbb      	ldrb	r3, [r7, #14]
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b00      	cmp	r3, #0
 800b216:	f040 80fd 	bne.w	800b414 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d103      	bne.n	800b234 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2208      	movs	r2, #8
 800b230:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b232:	e0ef      	b.n	800b414 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2207      	movs	r2, #7
 800b238:	701a      	strb	r2, [r3, #0]
      break;
 800b23a:	e0eb      	b.n	800b414 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b242:	2b00      	cmp	r3, #0
 800b244:	f000 80e8 	beq.w	800b418 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b24e:	2101      	movs	r1, #1
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2208      	movs	r2, #8
 800b258:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b25a:	e0dd      	b.n	800b418 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800b262:	4619      	mov	r1, r3
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 fc3a 	bl	800bade <USBH_SetCfg>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f040 80d5 	bne.w	800b41c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2209      	movs	r2, #9
 800b276:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b278:	e0d0      	b.n	800b41c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800b280:	f003 0320 	and.w	r3, r3, #32
 800b284:	2b00      	cmp	r3, #0
 800b286:	d016      	beq.n	800b2b6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b288:	2101      	movs	r1, #1
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fc4a 	bl	800bb24 <USBH_SetFeature>
 800b290:	4603      	mov	r3, r0
 800b292:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d103      	bne.n	800b2a4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	220a      	movs	r2, #10
 800b2a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b2a2:	e0bd      	b.n	800b420 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800b2a4:	7bbb      	ldrb	r3, [r7, #14]
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b03      	cmp	r3, #3
 800b2aa:	f040 80b9 	bne.w	800b420 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	220a      	movs	r2, #10
 800b2b2:	701a      	strb	r2, [r3, #0]
      break;
 800b2b4:	e0b4      	b.n	800b420 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	220a      	movs	r2, #10
 800b2ba:	701a      	strb	r2, [r3, #0]
      break;
 800b2bc:	e0b0      	b.n	800b420 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f000 80ad 	beq.w	800b424 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]
 800b2d6:	e016      	b.n	800b306 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b2d8:	7bfa      	ldrb	r2, [r7, #15]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	32de      	adds	r2, #222	@ 0xde
 800b2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2e2:	791a      	ldrb	r2, [r3, #4]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d108      	bne.n	800b300 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b2ee:	7bfa      	ldrb	r2, [r7, #15]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	32de      	adds	r2, #222	@ 0xde
 800b2f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800b2fe:	e005      	b.n	800b30c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b300:	7bfb      	ldrb	r3, [r7, #15]
 800b302:	3301      	adds	r3, #1
 800b304:	73fb      	strb	r3, [r7, #15]
 800b306:	7bfb      	ldrb	r3, [r7, #15]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d0e5      	beq.n	800b2d8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b312:	2b00      	cmp	r3, #0
 800b314:	d016      	beq.n	800b344 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	4798      	blx	r3
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d109      	bne.n	800b33c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2206      	movs	r2, #6
 800b32c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b334:	2103      	movs	r1, #3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b33a:	e073      	b.n	800b424 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	220d      	movs	r2, #13
 800b340:	701a      	strb	r2, [r3, #0]
      break;
 800b342:	e06f      	b.n	800b424 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	220d      	movs	r2, #13
 800b348:	701a      	strb	r2, [r3, #0]
      break;
 800b34a:	e06b      	b.n	800b424 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b352:	2b00      	cmp	r3, #0
 800b354:	d017      	beq.n	800b386 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	4798      	blx	r3
 800b362:	4603      	mov	r3, r0
 800b364:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b366:	7bbb      	ldrb	r3, [r7, #14]
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d103      	bne.n	800b376 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	220b      	movs	r2, #11
 800b372:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b374:	e058      	b.n	800b428 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800b376:	7bbb      	ldrb	r3, [r7, #14]
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d154      	bne.n	800b428 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	220d      	movs	r2, #13
 800b382:	701a      	strb	r2, [r3, #0]
      break;
 800b384:	e050      	b.n	800b428 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	220d      	movs	r2, #13
 800b38a:	701a      	strb	r2, [r3, #0]
      break;
 800b38c:	e04c      	b.n	800b428 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b394:	2b00      	cmp	r3, #0
 800b396:	d049      	beq.n	800b42c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b39e:	695b      	ldr	r3, [r3, #20]
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	4798      	blx	r3
      }
      break;
 800b3a4:	e042      	b.n	800b42c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7ff fd4b 	bl	800ae4a <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d009      	beq.n	800b3d2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d005      	beq.n	800b3e8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b3e2:	2105      	movs	r1, #5
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d107      	bne.n	800b404 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7ff fe23 	bl	800b048 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b402:	e014      	b.n	800b42e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f004 fe07 	bl	8010018 <USBH_LL_Start>
      break;
 800b40a:	e010      	b.n	800b42e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b40c:	bf00      	nop
 800b40e:	e00e      	b.n	800b42e <USBH_Process+0x3c6>
      break;
 800b410:	bf00      	nop
 800b412:	e00c      	b.n	800b42e <USBH_Process+0x3c6>
      break;
 800b414:	bf00      	nop
 800b416:	e00a      	b.n	800b42e <USBH_Process+0x3c6>
    break;
 800b418:	bf00      	nop
 800b41a:	e008      	b.n	800b42e <USBH_Process+0x3c6>
      break;
 800b41c:	bf00      	nop
 800b41e:	e006      	b.n	800b42e <USBH_Process+0x3c6>
      break;
 800b420:	bf00      	nop
 800b422:	e004      	b.n	800b42e <USBH_Process+0x3c6>
      break;
 800b424:	bf00      	nop
 800b426:	e002      	b.n	800b42e <USBH_Process+0x3c6>
      break;
 800b428:	bf00      	nop
 800b42a:	e000      	b.n	800b42e <USBH_Process+0x3c6>
      break;
 800b42c:	bf00      	nop
  }
  return USBH_OK;
 800b42e:	2300      	movs	r3, #0
}
 800b430:	4618      	mov	r0, r3
 800b432:	3710      	adds	r7, #16
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b088      	sub	sp, #32
 800b43c:	af04      	add	r7, sp, #16
 800b43e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b440:	2301      	movs	r3, #1
 800b442:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b444:	2301      	movs	r3, #1
 800b446:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	785b      	ldrb	r3, [r3, #1]
 800b44c:	2b07      	cmp	r3, #7
 800b44e:	f200 81bd 	bhi.w	800b7cc <USBH_HandleEnum+0x394>
 800b452:	a201      	add	r2, pc, #4	@ (adr r2, 800b458 <USBH_HandleEnum+0x20>)
 800b454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b458:	0800b479 	.word	0x0800b479
 800b45c:	0800b533 	.word	0x0800b533
 800b460:	0800b59d 	.word	0x0800b59d
 800b464:	0800b627 	.word	0x0800b627
 800b468:	0800b691 	.word	0x0800b691
 800b46c:	0800b701 	.word	0x0800b701
 800b470:	0800b747 	.word	0x0800b747
 800b474:	0800b78d 	.word	0x0800b78d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b478:	2108      	movs	r1, #8
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fa4c 	bl	800b918 <USBH_Get_DevDesc>
 800b480:	4603      	mov	r3, r0
 800b482:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b484:	7bbb      	ldrb	r3, [r7, #14]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d12e      	bne.n	800b4e8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	7919      	ldrb	r1, [r3, #4]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b4ae:	9202      	str	r2, [sp, #8]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	9201      	str	r2, [sp, #4]
 800b4b4:	9300      	str	r3, [sp, #0]
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2280      	movs	r2, #128	@ 0x80
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f001 f8dc 	bl	800c678 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	7959      	ldrb	r1, [r3, #5]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b4d4:	9202      	str	r2, [sp, #8]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	9201      	str	r2, [sp, #4]
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2200      	movs	r2, #0
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f001 f8c9 	bl	800c678 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b4e6:	e173      	b.n	800b7d0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b4e8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ea:	2b03      	cmp	r3, #3
 800b4ec:	f040 8170 	bne.w	800b7d0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	b2da      	uxtb	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b506:	2b03      	cmp	r3, #3
 800b508:	d903      	bls.n	800b512 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	220d      	movs	r2, #13
 800b50e:	701a      	strb	r2, [r3, #0]
      break;
 800b510:	e15e      	b.n	800b7d0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	795b      	ldrb	r3, [r3, #5]
 800b516:	4619      	mov	r1, r3
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f001 f8fd 	bl	800c718 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	791b      	ldrb	r3, [r3, #4]
 800b522:	4619      	mov	r1, r3
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f001 f8f7 	bl	800c718 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	701a      	strb	r2, [r3, #0]
      break;
 800b530:	e14e      	b.n	800b7d0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b532:	2112      	movs	r1, #18
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f9ef 	bl	800b918 <USBH_Get_DevDesc>
 800b53a:	4603      	mov	r3, r0
 800b53c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d103      	bne.n	800b54c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2202      	movs	r2, #2
 800b548:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b54a:	e143      	b.n	800b7d4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b54c:	7bbb      	ldrb	r3, [r7, #14]
 800b54e:	2b03      	cmp	r3, #3
 800b550:	f040 8140 	bne.w	800b7d4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b55a:	3301      	adds	r3, #1
 800b55c:	b2da      	uxtb	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b56a:	2b03      	cmp	r3, #3
 800b56c:	d903      	bls.n	800b576 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	220d      	movs	r2, #13
 800b572:	701a      	strb	r2, [r3, #0]
      break;
 800b574:	e12e      	b.n	800b7d4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	795b      	ldrb	r3, [r3, #5]
 800b57a:	4619      	mov	r1, r3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f001 f8cb 	bl	800c718 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	791b      	ldrb	r3, [r3, #4]
 800b586:	4619      	mov	r1, r3
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f001 f8c5 	bl	800c718 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2200      	movs	r2, #0
 800b592:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	701a      	strb	r2, [r3, #0]
      break;
 800b59a:	e11b      	b.n	800b7d4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b59c:	2101      	movs	r1, #1
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fa79 	bl	800ba96 <USBH_SetAddress>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b5a8:	7bbb      	ldrb	r3, [r7, #14]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d130      	bne.n	800b610 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800b5ae:	2002      	movs	r0, #2
 800b5b0:	f004 fecc 	bl	801034c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2203      	movs	r2, #3
 800b5c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	7919      	ldrb	r1, [r3, #4]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b5d6:	9202      	str	r2, [sp, #8]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	9201      	str	r2, [sp, #4]
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2280      	movs	r2, #128	@ 0x80
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f001 f848 	bl	800c678 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	7959      	ldrb	r1, [r3, #5]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b5fc:	9202      	str	r2, [sp, #8]
 800b5fe:	2200      	movs	r2, #0
 800b600:	9201      	str	r2, [sp, #4]
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	4603      	mov	r3, r0
 800b606:	2200      	movs	r2, #0
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f001 f835 	bl	800c678 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b60e:	e0e3      	b.n	800b7d8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b610:	7bbb      	ldrb	r3, [r7, #14]
 800b612:	2b03      	cmp	r3, #3
 800b614:	f040 80e0 	bne.w	800b7d8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	220d      	movs	r2, #13
 800b61c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	705a      	strb	r2, [r3, #1]
      break;
 800b624:	e0d8      	b.n	800b7d8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b626:	2109      	movs	r1, #9
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f9a1 	bl	800b970 <USBH_Get_CfgDesc>
 800b62e:	4603      	mov	r3, r0
 800b630:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b632:	7bbb      	ldrb	r3, [r7, #14]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d103      	bne.n	800b640 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2204      	movs	r2, #4
 800b63c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b63e:	e0cd      	b.n	800b7dc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b640:	7bbb      	ldrb	r3, [r7, #14]
 800b642:	2b03      	cmp	r3, #3
 800b644:	f040 80ca 	bne.w	800b7dc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b64e:	3301      	adds	r3, #1
 800b650:	b2da      	uxtb	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d903      	bls.n	800b66a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	220d      	movs	r2, #13
 800b666:	701a      	strb	r2, [r3, #0]
      break;
 800b668:	e0b8      	b.n	800b7dc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	795b      	ldrb	r3, [r3, #5]
 800b66e:	4619      	mov	r1, r3
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f001 f851 	bl	800c718 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	791b      	ldrb	r3, [r3, #4]
 800b67a:	4619      	mov	r1, r3
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f001 f84b 	bl	800c718 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	701a      	strb	r2, [r3, #0]
      break;
 800b68e:	e0a5      	b.n	800b7dc <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b696:	4619      	mov	r1, r3
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 f969 	bl	800b970 <USBH_Get_CfgDesc>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b6a2:	7bbb      	ldrb	r3, [r7, #14]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d103      	bne.n	800b6b0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2205      	movs	r2, #5
 800b6ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b6ae:	e097      	b.n	800b7e0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b6b0:	7bbb      	ldrb	r3, [r7, #14]
 800b6b2:	2b03      	cmp	r3, #3
 800b6b4:	f040 8094 	bne.w	800b7e0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b6be:	3301      	adds	r3, #1
 800b6c0:	b2da      	uxtb	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b6ce:	2b03      	cmp	r3, #3
 800b6d0:	d903      	bls.n	800b6da <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	220d      	movs	r2, #13
 800b6d6:	701a      	strb	r2, [r3, #0]
      break;
 800b6d8:	e082      	b.n	800b7e0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	795b      	ldrb	r3, [r3, #5]
 800b6de:	4619      	mov	r1, r3
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f001 f819 	bl	800c718 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	791b      	ldrb	r3, [r3, #4]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f001 f813 	bl	800c718 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	701a      	strb	r2, [r3, #0]
      break;
 800b6fe:	e06f      	b.n	800b7e0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800b706:	2b00      	cmp	r3, #0
 800b708:	d019      	beq.n	800b73e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b716:	23ff      	movs	r3, #255	@ 0xff
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f953 	bl	800b9c4 <USBH_Get_StringDesc>
 800b71e:	4603      	mov	r3, r0
 800b720:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b722:	7bbb      	ldrb	r3, [r7, #14]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d103      	bne.n	800b730 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2206      	movs	r2, #6
 800b72c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b72e:	e059      	b.n	800b7e4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b730:	7bbb      	ldrb	r3, [r7, #14]
 800b732:	2b03      	cmp	r3, #3
 800b734:	d156      	bne.n	800b7e4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2206      	movs	r2, #6
 800b73a:	705a      	strb	r2, [r3, #1]
      break;
 800b73c:	e052      	b.n	800b7e4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2206      	movs	r2, #6
 800b742:	705a      	strb	r2, [r3, #1]
      break;
 800b744:	e04e      	b.n	800b7e4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d019      	beq.n	800b784 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b75c:	23ff      	movs	r3, #255	@ 0xff
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f930 	bl	800b9c4 <USBH_Get_StringDesc>
 800b764:	4603      	mov	r3, r0
 800b766:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b768:	7bbb      	ldrb	r3, [r7, #14]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d103      	bne.n	800b776 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2207      	movs	r2, #7
 800b772:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b774:	e038      	b.n	800b7e8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b776:	7bbb      	ldrb	r3, [r7, #14]
 800b778:	2b03      	cmp	r3, #3
 800b77a:	d135      	bne.n	800b7e8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2207      	movs	r2, #7
 800b780:	705a      	strb	r2, [r3, #1]
      break;
 800b782:	e031      	b.n	800b7e8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2207      	movs	r2, #7
 800b788:	705a      	strb	r2, [r3, #1]
      break;
 800b78a:	e02d      	b.n	800b7e8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b792:	2b00      	cmp	r3, #0
 800b794:	d017      	beq.n	800b7c6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b7a2:	23ff      	movs	r3, #255	@ 0xff
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 f90d 	bl	800b9c4 <USBH_Get_StringDesc>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b7ae:	7bbb      	ldrb	r3, [r7, #14]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d102      	bne.n	800b7ba <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b7b8:	e018      	b.n	800b7ec <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7ba:	7bbb      	ldrb	r3, [r7, #14]
 800b7bc:	2b03      	cmp	r3, #3
 800b7be:	d115      	bne.n	800b7ec <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b7c4:	e012      	b.n	800b7ec <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ca:	e00f      	b.n	800b7ec <USBH_HandleEnum+0x3b4>

    default:
      break;
 800b7cc:	bf00      	nop
 800b7ce:	e00e      	b.n	800b7ee <USBH_HandleEnum+0x3b6>
      break;
 800b7d0:	bf00      	nop
 800b7d2:	e00c      	b.n	800b7ee <USBH_HandleEnum+0x3b6>
      break;
 800b7d4:	bf00      	nop
 800b7d6:	e00a      	b.n	800b7ee <USBH_HandleEnum+0x3b6>
      break;
 800b7d8:	bf00      	nop
 800b7da:	e008      	b.n	800b7ee <USBH_HandleEnum+0x3b6>
      break;
 800b7dc:	bf00      	nop
 800b7de:	e006      	b.n	800b7ee <USBH_HandleEnum+0x3b6>
      break;
 800b7e0:	bf00      	nop
 800b7e2:	e004      	b.n	800b7ee <USBH_HandleEnum+0x3b6>
      break;
 800b7e4:	bf00      	nop
 800b7e6:	e002      	b.n	800b7ee <USBH_HandleEnum+0x3b6>
      break;
 800b7e8:	bf00      	nop
 800b7ea:	e000      	b.n	800b7ee <USBH_HandleEnum+0x3b6>
      break;
 800b7ec:	bf00      	nop
  }
  return Status;
 800b7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b80a:	bf00      	nop
 800b80c:	370c      	adds	r7, #12
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b082      	sub	sp, #8
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b824:	1c5a      	adds	r2, r3, #1
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 f804 	bl	800b83a <USBH_HandleSof>
}
 800b832:	bf00      	nop
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b082      	sub	sp, #8
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	b2db      	uxtb	r3, r3
 800b848:	2b0b      	cmp	r3, #11
 800b84a:	d10a      	bne.n	800b862 <USBH_HandleSof+0x28>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b852:	2b00      	cmp	r3, #0
 800b854:	d005      	beq.n	800b862 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	4798      	blx	r3
  }
}
 800b862:	bf00      	nop
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b86a:	b480      	push	{r7}
 800b86c:	b083      	sub	sp, #12
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b87a:	bf00      	nop
}
 800b87c:	370c      	adds	r7, #12
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b886:	b480      	push	{r7}
 800b888:	b083      	sub	sp, #12
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800b896:	bf00      	nop
}
 800b898:	370c      	adds	r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr

0800b8a2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b083      	sub	sp, #12
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f004 fbac 	bl	801004e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	791b      	ldrb	r3, [r3, #4]
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 ff0b 	bl	800c718 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	795b      	ldrb	r3, [r3, #5]
 800b906:	4619      	mov	r1, r3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 ff05 	bl	800c718 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b086      	sub	sp, #24
 800b91c:	af02      	add	r7, sp, #8
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	460b      	mov	r3, r1
 800b922:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b924:	887b      	ldrh	r3, [r7, #2]
 800b926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b92a:	d901      	bls.n	800b930 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b92c:	2303      	movs	r3, #3
 800b92e:	e01b      	b.n	800b968 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b936:	887b      	ldrh	r3, [r7, #2]
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	4613      	mov	r3, r2
 800b93c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b940:	2100      	movs	r1, #0
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 f872 	bl	800ba2c <USBH_GetDescriptor>
 800b948:	4603      	mov	r3, r0
 800b94a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d109      	bne.n	800b966 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b958:	887a      	ldrh	r2, [r7, #2]
 800b95a:	4619      	mov	r1, r3
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f929 	bl	800bbb4 <USBH_ParseDevDesc>
 800b962:	4603      	mov	r3, r0
 800b964:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b966:	7bfb      	ldrb	r3, [r7, #15]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b086      	sub	sp, #24
 800b974:	af02      	add	r7, sp, #8
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	460b      	mov	r3, r1
 800b97a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	331c      	adds	r3, #28
 800b980:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b982:	887b      	ldrh	r3, [r7, #2]
 800b984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b988:	d901      	bls.n	800b98e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b98a:	2303      	movs	r3, #3
 800b98c:	e016      	b.n	800b9bc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b98e:	887b      	ldrh	r3, [r7, #2]
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b998:	2100      	movs	r1, #0
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f846 	bl	800ba2c <USBH_GetDescriptor>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d107      	bne.n	800b9ba <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b9aa:	887b      	ldrh	r3, [r7, #2]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	68b9      	ldr	r1, [r7, #8]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f9af 	bl	800bd14 <USBH_ParseCfgDesc>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b088      	sub	sp, #32
 800b9c8:	af02      	add	r7, sp, #8
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	607a      	str	r2, [r7, #4]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	72fb      	strb	r3, [r7, #11]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b9d8:	893b      	ldrh	r3, [r7, #8]
 800b9da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9de:	d802      	bhi.n	800b9e6 <USBH_Get_StringDesc+0x22>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d101      	bne.n	800b9ea <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	e01c      	b.n	800ba24 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b9ea:	7afb      	ldrb	r3, [r7, #11]
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b9f2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b9fa:	893b      	ldrh	r3, [r7, #8]
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	2100      	movs	r1, #0
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f000 f812 	bl	800ba2c <USBH_GetDescriptor>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ba0c:	7dfb      	ldrb	r3, [r7, #23]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d107      	bne.n	800ba22 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ba18:	893a      	ldrh	r2, [r7, #8]
 800ba1a:	6879      	ldr	r1, [r7, #4]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 fb8d 	bl	800c13c <USBH_ParseStringDesc>
  }

  return status;
 800ba22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3718      	adds	r7, #24
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	607b      	str	r3, [r7, #4]
 800ba36:	460b      	mov	r3, r1
 800ba38:	72fb      	strb	r3, [r7, #11]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	789b      	ldrb	r3, [r3, #2]
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d11c      	bne.n	800ba80 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ba46:	7afb      	ldrb	r3, [r7, #11]
 800ba48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2206      	movs	r2, #6
 800ba56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	893a      	ldrh	r2, [r7, #8]
 800ba5c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ba5e:	893b      	ldrh	r3, [r7, #8]
 800ba60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ba64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba68:	d104      	bne.n	800ba74 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f240 4209 	movw	r2, #1033	@ 0x409
 800ba70:	829a      	strh	r2, [r3, #20]
 800ba72:	e002      	b.n	800ba7a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	8b3a      	ldrh	r2, [r7, #24]
 800ba7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ba80:	8b3b      	ldrh	r3, [r7, #24]
 800ba82:	461a      	mov	r2, r3
 800ba84:	6879      	ldr	r1, [r7, #4]
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f000 fba5 	bl	800c1d6 <USBH_CtlReq>
 800ba8c:	4603      	mov	r3, r0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b082      	sub	sp, #8
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	789b      	ldrb	r3, [r3, #2]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d10f      	bne.n	800baca <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2205      	movs	r2, #5
 800bab4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bab6:	78fb      	ldrb	r3, [r7, #3]
 800bab8:	b29a      	uxth	r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800baca:	2200      	movs	r2, #0
 800bacc:	2100      	movs	r1, #0
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 fb81 	bl	800c1d6 <USBH_CtlReq>
 800bad4:	4603      	mov	r3, r0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3708      	adds	r7, #8
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b082      	sub	sp, #8
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	460b      	mov	r3, r1
 800bae8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	789b      	ldrb	r3, [r3, #2]
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d10e      	bne.n	800bb10 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2209      	movs	r2, #9
 800bafc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	887a      	ldrh	r2, [r7, #2]
 800bb02:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bb10:	2200      	movs	r2, #0
 800bb12:	2100      	movs	r1, #0
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 fb5e 	bl	800c1d6 <USBH_CtlReq>
 800bb1a:	4603      	mov	r3, r0
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3708      	adds	r7, #8
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	789b      	ldrb	r3, [r3, #2]
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d10f      	bne.n	800bb58 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2203      	movs	r2, #3
 800bb42:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bb44:	78fb      	ldrb	r3, [r7, #3]
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bb58:	2200      	movs	r2, #0
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 fb3a 	bl	800c1d6 <USBH_CtlReq>
 800bb62:	4603      	mov	r3, r0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	460b      	mov	r3, r1
 800bb76:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	789b      	ldrb	r3, [r3, #2]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d10f      	bne.n	800bba0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2202      	movs	r2, #2
 800bb84:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bb92:	78fb      	ldrb	r3, [r7, #3]
 800bb94:	b29a      	uxth	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bba0:	2200      	movs	r2, #0
 800bba2:	2100      	movs	r1, #0
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 fb16 	bl	800c1d6 <USBH_CtlReq>
 800bbaa:	4603      	mov	r3, r0
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b087      	sub	sp, #28
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800bbc8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d101      	bne.n	800bbd8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800bbd4:	2302      	movs	r3, #2
 800bbd6:	e094      	b.n	800bd02 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	781a      	ldrb	r2, [r3, #0]
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	785a      	ldrb	r2, [r3, #1]
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	3302      	adds	r3, #2
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	461a      	mov	r2, r3
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	3303      	adds	r3, #3
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	021b      	lsls	r3, r3, #8
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	791a      	ldrb	r2, [r3, #4]
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	795a      	ldrb	r2, [r3, #5]
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	799a      	ldrb	r2, [r3, #6]
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	79da      	ldrb	r2, [r3, #7]
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d004      	beq.n	800bc36 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d11b      	bne.n	800bc6e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	79db      	ldrb	r3, [r3, #7]
 800bc3a:	2b20      	cmp	r3, #32
 800bc3c:	dc0f      	bgt.n	800bc5e <USBH_ParseDevDesc+0xaa>
 800bc3e:	2b08      	cmp	r3, #8
 800bc40:	db0f      	blt.n	800bc62 <USBH_ParseDevDesc+0xae>
 800bc42:	3b08      	subs	r3, #8
 800bc44:	4a32      	ldr	r2, [pc, #200]	@ (800bd10 <USBH_ParseDevDesc+0x15c>)
 800bc46:	fa22 f303 	lsr.w	r3, r2, r3
 800bc4a:	f003 0301 	and.w	r3, r3, #1
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	bf14      	ite	ne
 800bc52:	2301      	movne	r3, #1
 800bc54:	2300      	moveq	r3, #0
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d106      	bne.n	800bc6a <USBH_ParseDevDesc+0xb6>
 800bc5c:	e001      	b.n	800bc62 <USBH_ParseDevDesc+0xae>
 800bc5e:	2b40      	cmp	r3, #64	@ 0x40
 800bc60:	d003      	beq.n	800bc6a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	2208      	movs	r2, #8
 800bc66:	71da      	strb	r2, [r3, #7]
        break;
 800bc68:	e000      	b.n	800bc6c <USBH_ParseDevDesc+0xb8>
        break;
 800bc6a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800bc6c:	e00e      	b.n	800bc8c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d107      	bne.n	800bc88 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	79db      	ldrb	r3, [r3, #7]
 800bc7c:	2b08      	cmp	r3, #8
 800bc7e:	d005      	beq.n	800bc8c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	2208      	movs	r2, #8
 800bc84:	71da      	strb	r2, [r3, #7]
 800bc86:	e001      	b.n	800bc8c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800bc8c:	88fb      	ldrh	r3, [r7, #6]
 800bc8e:	2b08      	cmp	r3, #8
 800bc90:	d936      	bls.n	800bd00 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	3308      	adds	r3, #8
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	461a      	mov	r2, r3
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	3309      	adds	r3, #9
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	021b      	lsls	r3, r3, #8
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	4313      	orrs	r3, r2
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	330a      	adds	r3, #10
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	330b      	adds	r3, #11
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	021b      	lsls	r3, r3, #8
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	330c      	adds	r3, #12
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	461a      	mov	r2, r3
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	330d      	adds	r3, #13
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	021b      	lsls	r3, r3, #8
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	b29a      	uxth	r2, r3
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	7b9a      	ldrb	r2, [r3, #14]
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	7bda      	ldrb	r2, [r3, #15]
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	7c1a      	ldrb	r2, [r3, #16]
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	7c5a      	ldrb	r2, [r3, #17]
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800bd00:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	371c      	adds	r7, #28
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	01000101 	.word	0x01000101

0800bd14 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b08c      	sub	sp, #48	@ 0x30
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bd28:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bd30:	2300      	movs	r3, #0
 800bd32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800bd36:	2300      	movs	r3, #0
 800bd38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d101      	bne.n	800bd46 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800bd42:	2302      	movs	r3, #2
 800bd44:	e0da      	b.n	800befc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800bd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	2b09      	cmp	r3, #9
 800bd50:	d002      	beq.n	800bd58 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd54:	2209      	movs	r2, #9
 800bd56:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	781a      	ldrb	r2, [r3, #0]
 800bd5c:	6a3b      	ldr	r3, [r7, #32]
 800bd5e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	785a      	ldrb	r2, [r3, #1]
 800bd64:	6a3b      	ldr	r3, [r7, #32]
 800bd66:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	3302      	adds	r3, #2
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	3303      	adds	r3, #3
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	021b      	lsls	r3, r3, #8
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd82:	bf28      	it	cs
 800bd84:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	6a3b      	ldr	r3, [r7, #32]
 800bd8c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	791a      	ldrb	r2, [r3, #4]
 800bd92:	6a3b      	ldr	r3, [r7, #32]
 800bd94:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	795a      	ldrb	r2, [r3, #5]
 800bd9a:	6a3b      	ldr	r3, [r7, #32]
 800bd9c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	799a      	ldrb	r2, [r3, #6]
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	79da      	ldrb	r2, [r3, #7]
 800bdaa:	6a3b      	ldr	r3, [r7, #32]
 800bdac:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	7a1a      	ldrb	r2, [r3, #8]
 800bdb2:	6a3b      	ldr	r3, [r7, #32]
 800bdb4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bdb6:	88fb      	ldrh	r3, [r7, #6]
 800bdb8:	2b09      	cmp	r3, #9
 800bdba:	f240 809d 	bls.w	800bef8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800bdbe:	2309      	movs	r3, #9
 800bdc0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bdc6:	e081      	b.n	800becc <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bdc8:	f107 0316 	add.w	r3, r7, #22
 800bdcc:	4619      	mov	r1, r3
 800bdce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdd0:	f000 f9e7 	bl	800c1a2 <USBH_GetNextDesc>
 800bdd4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bdd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdd8:	785b      	ldrb	r3, [r3, #1]
 800bdda:	2b04      	cmp	r3, #4
 800bddc:	d176      	bne.n	800becc <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bdde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	2b09      	cmp	r3, #9
 800bde4:	d002      	beq.n	800bdec <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800bde6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde8:	2209      	movs	r2, #9
 800bdea:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800bdec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bdf0:	221a      	movs	r2, #26
 800bdf2:	fb02 f303 	mul.w	r3, r2, r3
 800bdf6:	3308      	adds	r3, #8
 800bdf8:	6a3a      	ldr	r2, [r7, #32]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	3302      	adds	r3, #2
 800bdfe:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800be00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be02:	69f8      	ldr	r0, [r7, #28]
 800be04:	f000 f87e 	bl	800bf04 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800be08:	2300      	movs	r3, #0
 800be0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800be0e:	2300      	movs	r3, #0
 800be10:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800be12:	e043      	b.n	800be9c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800be14:	f107 0316 	add.w	r3, r7, #22
 800be18:	4619      	mov	r1, r3
 800be1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be1c:	f000 f9c1 	bl	800c1a2 <USBH_GetNextDesc>
 800be20:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800be22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be24:	785b      	ldrb	r3, [r3, #1]
 800be26:	2b05      	cmp	r3, #5
 800be28:	d138      	bne.n	800be9c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	795b      	ldrb	r3, [r3, #5]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d113      	bne.n	800be5a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800be36:	2b02      	cmp	r3, #2
 800be38:	d003      	beq.n	800be42 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	799b      	ldrb	r3, [r3, #6]
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d10b      	bne.n	800be5a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	79db      	ldrb	r3, [r3, #7]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d10b      	bne.n	800be62 <USBH_ParseCfgDesc+0x14e>
 800be4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	2b09      	cmp	r3, #9
 800be50:	d007      	beq.n	800be62 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800be52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be54:	2209      	movs	r2, #9
 800be56:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800be58:	e003      	b.n	800be62 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800be5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be5c:	2207      	movs	r2, #7
 800be5e:	701a      	strb	r2, [r3, #0]
 800be60:	e000      	b.n	800be64 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800be62:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800be64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be68:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800be6c:	3201      	adds	r2, #1
 800be6e:	00d2      	lsls	r2, r2, #3
 800be70:	211a      	movs	r1, #26
 800be72:	fb01 f303 	mul.w	r3, r1, r3
 800be76:	4413      	add	r3, r2
 800be78:	3308      	adds	r3, #8
 800be7a:	6a3a      	ldr	r2, [r7, #32]
 800be7c:	4413      	add	r3, r2
 800be7e:	3304      	adds	r3, #4
 800be80:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800be82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be84:	69b9      	ldr	r1, [r7, #24]
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f000 f870 	bl	800bf6c <USBH_ParseEPDesc>
 800be8c:	4603      	mov	r3, r0
 800be8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800be92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800be96:	3301      	adds	r3, #1
 800be98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	791b      	ldrb	r3, [r3, #4]
 800bea0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d204      	bcs.n	800beb2 <USBH_ParseCfgDesc+0x19e>
 800bea8:	6a3b      	ldr	r3, [r7, #32]
 800beaa:	885a      	ldrh	r2, [r3, #2]
 800beac:	8afb      	ldrh	r3, [r7, #22]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d8b0      	bhi.n	800be14 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	791b      	ldrb	r3, [r3, #4]
 800beb6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800beba:	429a      	cmp	r2, r3
 800bebc:	d201      	bcs.n	800bec2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800bebe:	2303      	movs	r3, #3
 800bec0:	e01c      	b.n	800befc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800bec2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bec6:	3301      	adds	r3, #1
 800bec8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800becc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d805      	bhi.n	800bee0 <USBH_ParseCfgDesc+0x1cc>
 800bed4:	6a3b      	ldr	r3, [r7, #32]
 800bed6:	885a      	ldrh	r2, [r3, #2]
 800bed8:	8afb      	ldrh	r3, [r7, #22]
 800beda:	429a      	cmp	r2, r3
 800bedc:	f63f af74 	bhi.w	800bdc8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800bee0:	6a3b      	ldr	r3, [r7, #32]
 800bee2:	791b      	ldrb	r3, [r3, #4]
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	bf28      	it	cs
 800bee8:	2302      	movcs	r3, #2
 800beea:	b2db      	uxtb	r3, r3
 800beec:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d201      	bcs.n	800bef8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800bef4:	2303      	movs	r3, #3
 800bef6:	e001      	b.n	800befc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800bef8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800befc:	4618      	mov	r0, r3
 800befe:	3730      	adds	r7, #48	@ 0x30
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	781a      	ldrb	r2, [r3, #0]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	785a      	ldrb	r2, [r3, #1]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	789a      	ldrb	r2, [r3, #2]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	78da      	ldrb	r2, [r3, #3]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	3304      	adds	r3, #4
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	bf28      	it	cs
 800bf38:	2302      	movcs	r3, #2
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	795a      	ldrb	r2, [r3, #5]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	799a      	ldrb	r2, [r3, #6]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	79da      	ldrb	r2, [r3, #7]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	7a1a      	ldrb	r2, [r3, #8]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	721a      	strb	r2, [r3, #8]
}
 800bf60:	bf00      	nop
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b087      	sub	sp, #28
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	781a      	ldrb	r2, [r3, #0]
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	785a      	ldrb	r2, [r3, #1]
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	789a      	ldrb	r2, [r3, #2]
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	78da      	ldrb	r2, [r3, #3]
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	3304      	adds	r3, #4
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	3305      	adds	r3, #5
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	021b      	lsls	r3, r3, #8
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	b29a      	uxth	r2, r3
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	799a      	ldrb	r2, [r3, #6]
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	889b      	ldrh	r3, [r3, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d009      	beq.n	800bfda <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bfca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bfce:	d804      	bhi.n	800bfda <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bfd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfd8:	d901      	bls.n	800bfde <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800bfda:	2303      	movs	r3, #3
 800bfdc:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d136      	bne.n	800c056 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	78db      	ldrb	r3, [r3, #3]
 800bfec:	f003 0303 	and.w	r3, r3, #3
 800bff0:	2b02      	cmp	r3, #2
 800bff2:	d108      	bne.n	800c006 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	889b      	ldrh	r3, [r3, #4]
 800bff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bffc:	f240 8097 	bls.w	800c12e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c000:	2303      	movs	r3, #3
 800c002:	75fb      	strb	r3, [r7, #23]
 800c004:	e093      	b.n	800c12e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	78db      	ldrb	r3, [r3, #3]
 800c00a:	f003 0303 	and.w	r3, r3, #3
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d107      	bne.n	800c022 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	889b      	ldrh	r3, [r3, #4]
 800c016:	2b40      	cmp	r3, #64	@ 0x40
 800c018:	f240 8089 	bls.w	800c12e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c01c:	2303      	movs	r3, #3
 800c01e:	75fb      	strb	r3, [r7, #23]
 800c020:	e085      	b.n	800c12e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	78db      	ldrb	r3, [r3, #3]
 800c026:	f003 0303 	and.w	r3, r3, #3
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d005      	beq.n	800c03a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	78db      	ldrb	r3, [r3, #3]
 800c032:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c036:	2b03      	cmp	r3, #3
 800c038:	d10a      	bne.n	800c050 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	799b      	ldrb	r3, [r3, #6]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <USBH_ParseEPDesc+0xde>
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	799b      	ldrb	r3, [r3, #6]
 800c046:	2b10      	cmp	r3, #16
 800c048:	d970      	bls.n	800c12c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800c04a:	2303      	movs	r3, #3
 800c04c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c04e:	e06d      	b.n	800c12c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c050:	2303      	movs	r3, #3
 800c052:	75fb      	strb	r3, [r7, #23]
 800c054:	e06b      	b.n	800c12e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d13c      	bne.n	800c0da <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	78db      	ldrb	r3, [r3, #3]
 800c064:	f003 0303 	and.w	r3, r3, #3
 800c068:	2b02      	cmp	r3, #2
 800c06a:	d005      	beq.n	800c078 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	78db      	ldrb	r3, [r3, #3]
 800c070:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c074:	2b00      	cmp	r3, #0
 800c076:	d106      	bne.n	800c086 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	889b      	ldrh	r3, [r3, #4]
 800c07c:	2b40      	cmp	r3, #64	@ 0x40
 800c07e:	d956      	bls.n	800c12e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c080:	2303      	movs	r3, #3
 800c082:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c084:	e053      	b.n	800c12e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	78db      	ldrb	r3, [r3, #3]
 800c08a:	f003 0303 	and.w	r3, r3, #3
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d10e      	bne.n	800c0b0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	799b      	ldrb	r3, [r3, #6]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d007      	beq.n	800c0aa <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c09e:	2b10      	cmp	r3, #16
 800c0a0:	d803      	bhi.n	800c0aa <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c0a6:	2b40      	cmp	r3, #64	@ 0x40
 800c0a8:	d941      	bls.n	800c12e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c0aa:	2303      	movs	r3, #3
 800c0ac:	75fb      	strb	r3, [r7, #23]
 800c0ae:	e03e      	b.n	800c12e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	78db      	ldrb	r3, [r3, #3]
 800c0b4:	f003 0303 	and.w	r3, r3, #3
 800c0b8:	2b03      	cmp	r3, #3
 800c0ba:	d10b      	bne.n	800c0d4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	799b      	ldrb	r3, [r3, #6]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d004      	beq.n	800c0ce <USBH_ParseEPDesc+0x162>
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	889b      	ldrh	r3, [r3, #4]
 800c0c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0cc:	d32f      	bcc.n	800c12e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c0ce:	2303      	movs	r3, #3
 800c0d0:	75fb      	strb	r3, [r7, #23]
 800c0d2:	e02c      	b.n	800c12e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	75fb      	strb	r3, [r7, #23]
 800c0d8:	e029      	b.n	800c12e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	d120      	bne.n	800c126 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	78db      	ldrb	r3, [r3, #3]
 800c0e8:	f003 0303 	and.w	r3, r3, #3
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d106      	bne.n	800c0fe <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	889b      	ldrh	r3, [r3, #4]
 800c0f4:	2b08      	cmp	r3, #8
 800c0f6:	d01a      	beq.n	800c12e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	75fb      	strb	r3, [r7, #23]
 800c0fc:	e017      	b.n	800c12e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	78db      	ldrb	r3, [r3, #3]
 800c102:	f003 0303 	and.w	r3, r3, #3
 800c106:	2b03      	cmp	r3, #3
 800c108:	d10a      	bne.n	800c120 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	799b      	ldrb	r3, [r3, #6]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d003      	beq.n	800c11a <USBH_ParseEPDesc+0x1ae>
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	889b      	ldrh	r3, [r3, #4]
 800c116:	2b08      	cmp	r3, #8
 800c118:	d909      	bls.n	800c12e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c11a:	2303      	movs	r3, #3
 800c11c:	75fb      	strb	r3, [r7, #23]
 800c11e:	e006      	b.n	800c12e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c120:	2303      	movs	r3, #3
 800c122:	75fb      	strb	r3, [r7, #23]
 800c124:	e003      	b.n	800c12e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c126:	2303      	movs	r3, #3
 800c128:	75fb      	strb	r3, [r7, #23]
 800c12a:	e000      	b.n	800c12e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c12c:	bf00      	nop
  }

  return status;
 800c12e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c130:	4618      	mov	r0, r3
 800c132:	371c      	adds	r7, #28
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b087      	sub	sp, #28
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	4613      	mov	r3, r2
 800c148:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	3301      	adds	r3, #1
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	2b03      	cmp	r3, #3
 800c152:	d120      	bne.n	800c196 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	1e9a      	subs	r2, r3, #2
 800c15a:	88fb      	ldrh	r3, [r7, #6]
 800c15c:	4293      	cmp	r3, r2
 800c15e:	bf28      	it	cs
 800c160:	4613      	movcs	r3, r2
 800c162:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	3302      	adds	r3, #2
 800c168:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c16a:	2300      	movs	r3, #0
 800c16c:	82fb      	strh	r3, [r7, #22]
 800c16e:	e00b      	b.n	800c188 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c170:	8afb      	ldrh	r3, [r7, #22]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	4413      	add	r3, r2
 800c176:	781a      	ldrb	r2, [r3, #0]
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	3301      	adds	r3, #1
 800c180:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c182:	8afb      	ldrh	r3, [r7, #22]
 800c184:	3302      	adds	r3, #2
 800c186:	82fb      	strh	r3, [r7, #22]
 800c188:	8afa      	ldrh	r2, [r7, #22]
 800c18a:	8abb      	ldrh	r3, [r7, #20]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d3ef      	bcc.n	800c170 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2200      	movs	r2, #0
 800c194:	701a      	strb	r2, [r3, #0]
  }
}
 800c196:	bf00      	nop
 800c198:	371c      	adds	r7, #28
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr

0800c1a2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c1a2:	b480      	push	{r7}
 800c1a4:	b085      	sub	sp, #20
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
 800c1aa:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	7812      	ldrb	r2, [r2, #0]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	b29a      	uxth	r2, r3
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3714      	adds	r7, #20
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr

0800c1d6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b086      	sub	sp, #24
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	60f8      	str	r0, [r7, #12]
 800c1de:	60b9      	str	r1, [r7, #8]
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	789b      	ldrb	r3, [r3, #2]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d002      	beq.n	800c1f6 <USBH_CtlReq+0x20>
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d00f      	beq.n	800c214 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c1f4:	e027      	b.n	800c246 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	68ba      	ldr	r2, [r7, #8]
 800c1fa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	88fa      	ldrh	r2, [r7, #6]
 800c200:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2201      	movs	r2, #1
 800c206:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2202      	movs	r2, #2
 800c20c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c20e:	2301      	movs	r3, #1
 800c210:	75fb      	strb	r3, [r7, #23]
      break;
 800c212:	e018      	b.n	800c246 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	f000 f81b 	bl	800c250 <USBH_HandleControl>
 800c21a:	4603      	mov	r3, r0
 800c21c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c21e:	7dfb      	ldrb	r3, [r7, #23]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d002      	beq.n	800c22a <USBH_CtlReq+0x54>
 800c224:	7dfb      	ldrb	r3, [r7, #23]
 800c226:	2b03      	cmp	r3, #3
 800c228:	d106      	bne.n	800c238 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2201      	movs	r2, #1
 800c22e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2200      	movs	r2, #0
 800c234:	761a      	strb	r2, [r3, #24]
      break;
 800c236:	e005      	b.n	800c244 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c238:	7dfb      	ldrb	r3, [r7, #23]
 800c23a:	2b02      	cmp	r3, #2
 800c23c:	d102      	bne.n	800c244 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2201      	movs	r2, #1
 800c242:	709a      	strb	r2, [r3, #2]
      break;
 800c244:	bf00      	nop
  }
  return status;
 800c246:	7dfb      	ldrb	r3, [r7, #23]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3718      	adds	r7, #24
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af02      	add	r7, sp, #8
 800c256:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c258:	2301      	movs	r3, #1
 800c25a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c25c:	2300      	movs	r3, #0
 800c25e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	7e1b      	ldrb	r3, [r3, #24]
 800c264:	3b01      	subs	r3, #1
 800c266:	2b0a      	cmp	r3, #10
 800c268:	f200 8156 	bhi.w	800c518 <USBH_HandleControl+0x2c8>
 800c26c:	a201      	add	r2, pc, #4	@ (adr r2, 800c274 <USBH_HandleControl+0x24>)
 800c26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c272:	bf00      	nop
 800c274:	0800c2a1 	.word	0x0800c2a1
 800c278:	0800c2bb 	.word	0x0800c2bb
 800c27c:	0800c325 	.word	0x0800c325
 800c280:	0800c34b 	.word	0x0800c34b
 800c284:	0800c383 	.word	0x0800c383
 800c288:	0800c3ad 	.word	0x0800c3ad
 800c28c:	0800c3ff 	.word	0x0800c3ff
 800c290:	0800c421 	.word	0x0800c421
 800c294:	0800c45d 	.word	0x0800c45d
 800c298:	0800c483 	.word	0x0800c483
 800c29c:	0800c4c1 	.word	0x0800c4c1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f103 0110 	add.w	r1, r3, #16
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	795b      	ldrb	r3, [r3, #5]
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 f943 	bl	800c538 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2202      	movs	r2, #2
 800c2b6:	761a      	strb	r2, [r3, #24]
      break;
 800c2b8:	e139      	b.n	800c52e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	795b      	ldrb	r3, [r3, #5]
 800c2be:	4619      	mov	r1, r3
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f003 ffb3 	bl	801022c <USBH_LL_GetURBState>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c2ca:	7bbb      	ldrb	r3, [r7, #14]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d11e      	bne.n	800c30e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	7c1b      	ldrb	r3, [r3, #16]
 800c2d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c2d8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	8adb      	ldrh	r3, [r3, #22]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d00a      	beq.n	800c2f8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c2e2:	7b7b      	ldrb	r3, [r7, #13]
 800c2e4:	2b80      	cmp	r3, #128	@ 0x80
 800c2e6:	d103      	bne.n	800c2f0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2203      	movs	r2, #3
 800c2ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c2ee:	e115      	b.n	800c51c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2205      	movs	r2, #5
 800c2f4:	761a      	strb	r2, [r3, #24]
      break;
 800c2f6:	e111      	b.n	800c51c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c2f8:	7b7b      	ldrb	r3, [r7, #13]
 800c2fa:	2b80      	cmp	r3, #128	@ 0x80
 800c2fc:	d103      	bne.n	800c306 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2209      	movs	r2, #9
 800c302:	761a      	strb	r2, [r3, #24]
      break;
 800c304:	e10a      	b.n	800c51c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2207      	movs	r2, #7
 800c30a:	761a      	strb	r2, [r3, #24]
      break;
 800c30c:	e106      	b.n	800c51c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c30e:	7bbb      	ldrb	r3, [r7, #14]
 800c310:	2b04      	cmp	r3, #4
 800c312:	d003      	beq.n	800c31c <USBH_HandleControl+0xcc>
 800c314:	7bbb      	ldrb	r3, [r7, #14]
 800c316:	2b02      	cmp	r3, #2
 800c318:	f040 8100 	bne.w	800c51c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	220b      	movs	r2, #11
 800c320:	761a      	strb	r2, [r3, #24]
      break;
 800c322:	e0fb      	b.n	800c51c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6899      	ldr	r1, [r3, #8]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	899a      	ldrh	r2, [r3, #12]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	791b      	ldrb	r3, [r3, #4]
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 f93a 	bl	800c5b6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2204      	movs	r2, #4
 800c346:	761a      	strb	r2, [r3, #24]
      break;
 800c348:	e0f1      	b.n	800c52e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	791b      	ldrb	r3, [r3, #4]
 800c34e:	4619      	mov	r1, r3
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f003 ff6b 	bl	801022c <USBH_LL_GetURBState>
 800c356:	4603      	mov	r3, r0
 800c358:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c35a:	7bbb      	ldrb	r3, [r7, #14]
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d102      	bne.n	800c366 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2209      	movs	r2, #9
 800c364:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c366:	7bbb      	ldrb	r3, [r7, #14]
 800c368:	2b05      	cmp	r3, #5
 800c36a:	d102      	bne.n	800c372 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c36c:	2303      	movs	r3, #3
 800c36e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c370:	e0d6      	b.n	800c520 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c372:	7bbb      	ldrb	r3, [r7, #14]
 800c374:	2b04      	cmp	r3, #4
 800c376:	f040 80d3 	bne.w	800c520 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	220b      	movs	r2, #11
 800c37e:	761a      	strb	r2, [r3, #24]
      break;
 800c380:	e0ce      	b.n	800c520 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6899      	ldr	r1, [r3, #8]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	899a      	ldrh	r2, [r3, #12]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	795b      	ldrb	r3, [r3, #5]
 800c38e:	2001      	movs	r0, #1
 800c390:	9000      	str	r0, [sp, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 f8ea 	bl	800c56c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2206      	movs	r2, #6
 800c3a8:	761a      	strb	r2, [r3, #24]
      break;
 800c3aa:	e0c0      	b.n	800c52e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	795b      	ldrb	r3, [r3, #5]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f003 ff3a 	bl	801022c <USBH_LL_GetURBState>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c3bc:	7bbb      	ldrb	r3, [r7, #14]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d103      	bne.n	800c3ca <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2207      	movs	r2, #7
 800c3c6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c3c8:	e0ac      	b.n	800c524 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c3ca:	7bbb      	ldrb	r3, [r7, #14]
 800c3cc:	2b05      	cmp	r3, #5
 800c3ce:	d105      	bne.n	800c3dc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	220c      	movs	r2, #12
 800c3d4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c3d6:	2303      	movs	r3, #3
 800c3d8:	73fb      	strb	r3, [r7, #15]
      break;
 800c3da:	e0a3      	b.n	800c524 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c3dc:	7bbb      	ldrb	r3, [r7, #14]
 800c3de:	2b02      	cmp	r3, #2
 800c3e0:	d103      	bne.n	800c3ea <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2205      	movs	r2, #5
 800c3e6:	761a      	strb	r2, [r3, #24]
      break;
 800c3e8:	e09c      	b.n	800c524 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c3ea:	7bbb      	ldrb	r3, [r7, #14]
 800c3ec:	2b04      	cmp	r3, #4
 800c3ee:	f040 8099 	bne.w	800c524 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	220b      	movs	r2, #11
 800c3f6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c3fc:	e092      	b.n	800c524 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	791b      	ldrb	r3, [r3, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	2100      	movs	r1, #0
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 f8d5 	bl	800c5b6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c412:	b29a      	uxth	r2, r3
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2208      	movs	r2, #8
 800c41c:	761a      	strb	r2, [r3, #24]

      break;
 800c41e:	e086      	b.n	800c52e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	791b      	ldrb	r3, [r3, #4]
 800c424:	4619      	mov	r1, r3
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f003 ff00 	bl	801022c <USBH_LL_GetURBState>
 800c42c:	4603      	mov	r3, r0
 800c42e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c430:	7bbb      	ldrb	r3, [r7, #14]
 800c432:	2b01      	cmp	r3, #1
 800c434:	d105      	bne.n	800c442 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	220d      	movs	r2, #13
 800c43a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c43c:	2300      	movs	r3, #0
 800c43e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c440:	e072      	b.n	800c528 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c442:	7bbb      	ldrb	r3, [r7, #14]
 800c444:	2b04      	cmp	r3, #4
 800c446:	d103      	bne.n	800c450 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	220b      	movs	r2, #11
 800c44c:	761a      	strb	r2, [r3, #24]
      break;
 800c44e:	e06b      	b.n	800c528 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c450:	7bbb      	ldrb	r3, [r7, #14]
 800c452:	2b05      	cmp	r3, #5
 800c454:	d168      	bne.n	800c528 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c456:	2303      	movs	r3, #3
 800c458:	73fb      	strb	r3, [r7, #15]
      break;
 800c45a:	e065      	b.n	800c528 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	795b      	ldrb	r3, [r3, #5]
 800c460:	2201      	movs	r2, #1
 800c462:	9200      	str	r2, [sp, #0]
 800c464:	2200      	movs	r2, #0
 800c466:	2100      	movs	r1, #0
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 f87f 	bl	800c56c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c474:	b29a      	uxth	r2, r3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	220a      	movs	r2, #10
 800c47e:	761a      	strb	r2, [r3, #24]
      break;
 800c480:	e055      	b.n	800c52e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	795b      	ldrb	r3, [r3, #5]
 800c486:	4619      	mov	r1, r3
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f003 fecf 	bl	801022c <USBH_LL_GetURBState>
 800c48e:	4603      	mov	r3, r0
 800c490:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c492:	7bbb      	ldrb	r3, [r7, #14]
 800c494:	2b01      	cmp	r3, #1
 800c496:	d105      	bne.n	800c4a4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c498:	2300      	movs	r3, #0
 800c49a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	220d      	movs	r2, #13
 800c4a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c4a2:	e043      	b.n	800c52c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c4a4:	7bbb      	ldrb	r3, [r7, #14]
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	d103      	bne.n	800c4b2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2209      	movs	r2, #9
 800c4ae:	761a      	strb	r2, [r3, #24]
      break;
 800c4b0:	e03c      	b.n	800c52c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c4b2:	7bbb      	ldrb	r3, [r7, #14]
 800c4b4:	2b04      	cmp	r3, #4
 800c4b6:	d139      	bne.n	800c52c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	220b      	movs	r2, #11
 800c4bc:	761a      	strb	r2, [r3, #24]
      break;
 800c4be:	e035      	b.n	800c52c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	7e5b      	ldrb	r3, [r3, #25]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	b2da      	uxtb	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	765a      	strb	r2, [r3, #25]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	7e5b      	ldrb	r3, [r3, #25]
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	d806      	bhi.n	800c4e2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c4e0:	e025      	b.n	800c52e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c4e8:	2106      	movs	r1, #6
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	795b      	ldrb	r3, [r3, #5]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 f90c 	bl	800c718 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	791b      	ldrb	r3, [r3, #4]
 800c504:	4619      	mov	r1, r3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 f906 	bl	800c718 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c512:	2302      	movs	r3, #2
 800c514:	73fb      	strb	r3, [r7, #15]
      break;
 800c516:	e00a      	b.n	800c52e <USBH_HandleControl+0x2de>

    default:
      break;
 800c518:	bf00      	nop
 800c51a:	e008      	b.n	800c52e <USBH_HandleControl+0x2de>
      break;
 800c51c:	bf00      	nop
 800c51e:	e006      	b.n	800c52e <USBH_HandleControl+0x2de>
      break;
 800c520:	bf00      	nop
 800c522:	e004      	b.n	800c52e <USBH_HandleControl+0x2de>
      break;
 800c524:	bf00      	nop
 800c526:	e002      	b.n	800c52e <USBH_HandleControl+0x2de>
      break;
 800c528:	bf00      	nop
 800c52a:	e000      	b.n	800c52e <USBH_HandleControl+0x2de>
      break;
 800c52c:	bf00      	nop
  }

  return status;
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b088      	sub	sp, #32
 800c53c:	af04      	add	r7, sp, #16
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	4613      	mov	r3, r2
 800c544:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c546:	79f9      	ldrb	r1, [r7, #7]
 800c548:	2300      	movs	r3, #0
 800c54a:	9303      	str	r3, [sp, #12]
 800c54c:	2308      	movs	r3, #8
 800c54e:	9302      	str	r3, [sp, #8]
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	9301      	str	r3, [sp, #4]
 800c554:	2300      	movs	r3, #0
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	2300      	movs	r3, #0
 800c55a:	2200      	movs	r2, #0
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	f003 fe34 	bl	80101ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b088      	sub	sp, #32
 800c570:	af04      	add	r7, sp, #16
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	4611      	mov	r1, r2
 800c578:	461a      	mov	r2, r3
 800c57a:	460b      	mov	r3, r1
 800c57c:	80fb      	strh	r3, [r7, #6]
 800c57e:	4613      	mov	r3, r2
 800c580:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d001      	beq.n	800c590 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c58c:	2300      	movs	r3, #0
 800c58e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c590:	7979      	ldrb	r1, [r7, #5]
 800c592:	7e3b      	ldrb	r3, [r7, #24]
 800c594:	9303      	str	r3, [sp, #12]
 800c596:	88fb      	ldrh	r3, [r7, #6]
 800c598:	9302      	str	r3, [sp, #8]
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	9301      	str	r3, [sp, #4]
 800c59e:	2301      	movs	r3, #1
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f003 fe0f 	bl	80101ca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c5ac:	2300      	movs	r3, #0
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b088      	sub	sp, #32
 800c5ba:	af04      	add	r7, sp, #16
 800c5bc:	60f8      	str	r0, [r7, #12]
 800c5be:	60b9      	str	r1, [r7, #8]
 800c5c0:	4611      	mov	r1, r2
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	80fb      	strh	r3, [r7, #6]
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c5cc:	7979      	ldrb	r1, [r7, #5]
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	9303      	str	r3, [sp, #12]
 800c5d2:	88fb      	ldrh	r3, [r7, #6]
 800c5d4:	9302      	str	r3, [sp, #8]
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	9301      	str	r3, [sp, #4]
 800c5da:	2301      	movs	r3, #1
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	2300      	movs	r3, #0
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	68f8      	ldr	r0, [r7, #12]
 800c5e4:	f003 fdf1 	bl	80101ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c5e8:	2300      	movs	r3, #0

}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b088      	sub	sp, #32
 800c5f6:	af04      	add	r7, sp, #16
 800c5f8:	60f8      	str	r0, [r7, #12]
 800c5fa:	60b9      	str	r1, [r7, #8]
 800c5fc:	4611      	mov	r1, r2
 800c5fe:	461a      	mov	r2, r3
 800c600:	460b      	mov	r3, r1
 800c602:	80fb      	strh	r3, [r7, #6]
 800c604:	4613      	mov	r3, r2
 800c606:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d001      	beq.n	800c616 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c612:	2300      	movs	r3, #0
 800c614:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c616:	7979      	ldrb	r1, [r7, #5]
 800c618:	7e3b      	ldrb	r3, [r7, #24]
 800c61a:	9303      	str	r3, [sp, #12]
 800c61c:	88fb      	ldrh	r3, [r7, #6]
 800c61e:	9302      	str	r3, [sp, #8]
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	9301      	str	r3, [sp, #4]
 800c624:	2301      	movs	r3, #1
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	2302      	movs	r3, #2
 800c62a:	2200      	movs	r2, #0
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f003 fdcc 	bl	80101ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3710      	adds	r7, #16
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b088      	sub	sp, #32
 800c640:	af04      	add	r7, sp, #16
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	4611      	mov	r1, r2
 800c648:	461a      	mov	r2, r3
 800c64a:	460b      	mov	r3, r1
 800c64c:	80fb      	strh	r3, [r7, #6]
 800c64e:	4613      	mov	r3, r2
 800c650:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c652:	7979      	ldrb	r1, [r7, #5]
 800c654:	2300      	movs	r3, #0
 800c656:	9303      	str	r3, [sp, #12]
 800c658:	88fb      	ldrh	r3, [r7, #6]
 800c65a:	9302      	str	r3, [sp, #8]
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	9301      	str	r3, [sp, #4]
 800c660:	2301      	movs	r3, #1
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	2302      	movs	r3, #2
 800c666:	2201      	movs	r2, #1
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f003 fdae 	bl	80101ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	3710      	adds	r7, #16
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b086      	sub	sp, #24
 800c67c:	af04      	add	r7, sp, #16
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	4608      	mov	r0, r1
 800c682:	4611      	mov	r1, r2
 800c684:	461a      	mov	r2, r3
 800c686:	4603      	mov	r3, r0
 800c688:	70fb      	strb	r3, [r7, #3]
 800c68a:	460b      	mov	r3, r1
 800c68c:	70bb      	strb	r3, [r7, #2]
 800c68e:	4613      	mov	r3, r2
 800c690:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c692:	7878      	ldrb	r0, [r7, #1]
 800c694:	78ba      	ldrb	r2, [r7, #2]
 800c696:	78f9      	ldrb	r1, [r7, #3]
 800c698:	8b3b      	ldrh	r3, [r7, #24]
 800c69a:	9302      	str	r3, [sp, #8]
 800c69c:	7d3b      	ldrb	r3, [r7, #20]
 800c69e:	9301      	str	r3, [sp, #4]
 800c6a0:	7c3b      	ldrb	r3, [r7, #16]
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f003 fd41 	bl	801012e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3708      	adds	r7, #8
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b082      	sub	sp, #8
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
 800c6be:	460b      	mov	r3, r1
 800c6c0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c6c2:	78fb      	ldrb	r3, [r7, #3]
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f003 fd60 	bl	801018c <USBH_LL_ClosePipe>

  return USBH_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3708      	adds	r7, #8
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b084      	sub	sp, #16
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
 800c6de:	460b      	mov	r3, r1
 800c6e0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f836 	bl	800c754 <USBH_GetFreePipe>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c6ec:	89fb      	ldrh	r3, [r7, #14]
 800c6ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d00a      	beq.n	800c70c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c6f6:	78fa      	ldrb	r2, [r7, #3]
 800c6f8:	89fb      	ldrh	r3, [r7, #14]
 800c6fa:	f003 030f 	and.w	r3, r3, #15
 800c6fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c702:	6879      	ldr	r1, [r7, #4]
 800c704:	33e0      	adds	r3, #224	@ 0xe0
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	440b      	add	r3, r1
 800c70a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c70c:	89fb      	ldrh	r3, [r7, #14]
 800c70e:	b2db      	uxtb	r3, r3
}
 800c710:	4618      	mov	r0, r3
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	460b      	mov	r3, r1
 800c722:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c724:	78fb      	ldrb	r3, [r7, #3]
 800c726:	2b0f      	cmp	r3, #15
 800c728:	d80d      	bhi.n	800c746 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c72a:	78fb      	ldrb	r3, [r7, #3]
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	33e0      	adds	r3, #224	@ 0xe0
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	4413      	add	r3, r2
 800c734:	685a      	ldr	r2, [r3, #4]
 800c736:	78fb      	ldrb	r3, [r7, #3]
 800c738:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c73c:	6879      	ldr	r1, [r7, #4]
 800c73e:	33e0      	adds	r3, #224	@ 0xe0
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	440b      	add	r3, r1
 800c744:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c746:	2300      	movs	r3, #0
}
 800c748:	4618      	mov	r0, r3
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c754:	b480      	push	{r7}
 800c756:	b085      	sub	sp, #20
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c75c:	2300      	movs	r3, #0
 800c75e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c760:	2300      	movs	r3, #0
 800c762:	73fb      	strb	r3, [r7, #15]
 800c764:	e00f      	b.n	800c786 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c766:	7bfb      	ldrb	r3, [r7, #15]
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	33e0      	adds	r3, #224	@ 0xe0
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	4413      	add	r3, r2
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c776:	2b00      	cmp	r3, #0
 800c778:	d102      	bne.n	800c780 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c77a:	7bfb      	ldrb	r3, [r7, #15]
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	e007      	b.n	800c790 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c780:	7bfb      	ldrb	r3, [r7, #15]
 800c782:	3301      	adds	r3, #1
 800c784:	73fb      	strb	r3, [r7, #15]
 800c786:	7bfb      	ldrb	r3, [r7, #15]
 800c788:	2b0f      	cmp	r3, #15
 800c78a:	d9ec      	bls.n	800c766 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c78c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800c790:	4618      	mov	r0, r3
 800c792:	3714      	adds	r7, #20
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c7a6:	79fb      	ldrb	r3, [r7, #7]
 800c7a8:	4a08      	ldr	r2, [pc, #32]	@ (800c7cc <disk_status+0x30>)
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	79fa      	ldrb	r2, [r7, #7]
 800c7b4:	4905      	ldr	r1, [pc, #20]	@ (800c7cc <disk_status+0x30>)
 800c7b6:	440a      	add	r2, r1
 800c7b8:	7a12      	ldrb	r2, [r2, #8]
 800c7ba:	4610      	mov	r0, r2
 800c7bc:	4798      	blx	r3
 800c7be:	4603      	mov	r3, r0
 800c7c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	20001d8c 	.word	0x20001d8c

0800c7d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c7de:	79fb      	ldrb	r3, [r7, #7]
 800c7e0:	4a0e      	ldr	r2, [pc, #56]	@ (800c81c <disk_initialize+0x4c>)
 800c7e2:	5cd3      	ldrb	r3, [r2, r3]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d114      	bne.n	800c812 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c7e8:	79fb      	ldrb	r3, [r7, #7]
 800c7ea:	4a0c      	ldr	r2, [pc, #48]	@ (800c81c <disk_initialize+0x4c>)
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	4413      	add	r3, r2
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	79fa      	ldrb	r2, [r7, #7]
 800c7f6:	4909      	ldr	r1, [pc, #36]	@ (800c81c <disk_initialize+0x4c>)
 800c7f8:	440a      	add	r2, r1
 800c7fa:	7a12      	ldrb	r2, [r2, #8]
 800c7fc:	4610      	mov	r0, r2
 800c7fe:	4798      	blx	r3
 800c800:	4603      	mov	r3, r0
 800c802:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800c804:	7bfb      	ldrb	r3, [r7, #15]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d103      	bne.n	800c812 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800c80a:	79fb      	ldrb	r3, [r7, #7]
 800c80c:	4a03      	ldr	r2, [pc, #12]	@ (800c81c <disk_initialize+0x4c>)
 800c80e:	2101      	movs	r1, #1
 800c810:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800c812:	7bfb      	ldrb	r3, [r7, #15]
}
 800c814:	4618      	mov	r0, r3
 800c816:	3710      	adds	r7, #16
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}
 800c81c:	20001d8c 	.word	0x20001d8c

0800c820 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c820:	b590      	push	{r4, r7, lr}
 800c822:	b087      	sub	sp, #28
 800c824:	af00      	add	r7, sp, #0
 800c826:	60b9      	str	r1, [r7, #8]
 800c828:	607a      	str	r2, [r7, #4]
 800c82a:	603b      	str	r3, [r7, #0]
 800c82c:	4603      	mov	r3, r0
 800c82e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c830:	7bfb      	ldrb	r3, [r7, #15]
 800c832:	4a0a      	ldr	r2, [pc, #40]	@ (800c85c <disk_read+0x3c>)
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	4413      	add	r3, r2
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	689c      	ldr	r4, [r3, #8]
 800c83c:	7bfb      	ldrb	r3, [r7, #15]
 800c83e:	4a07      	ldr	r2, [pc, #28]	@ (800c85c <disk_read+0x3c>)
 800c840:	4413      	add	r3, r2
 800c842:	7a18      	ldrb	r0, [r3, #8]
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	68b9      	ldr	r1, [r7, #8]
 800c84a:	47a0      	blx	r4
 800c84c:	4603      	mov	r3, r0
 800c84e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c850:	7dfb      	ldrb	r3, [r7, #23]
}
 800c852:	4618      	mov	r0, r3
 800c854:	371c      	adds	r7, #28
 800c856:	46bd      	mov	sp, r7
 800c858:	bd90      	pop	{r4, r7, pc}
 800c85a:	bf00      	nop
 800c85c:	20001d8c 	.word	0x20001d8c

0800c860 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c860:	b590      	push	{r4, r7, lr}
 800c862:	b087      	sub	sp, #28
 800c864:	af00      	add	r7, sp, #0
 800c866:	60b9      	str	r1, [r7, #8]
 800c868:	607a      	str	r2, [r7, #4]
 800c86a:	603b      	str	r3, [r7, #0]
 800c86c:	4603      	mov	r3, r0
 800c86e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c870:	7bfb      	ldrb	r3, [r7, #15]
 800c872:	4a0a      	ldr	r2, [pc, #40]	@ (800c89c <disk_write+0x3c>)
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	68dc      	ldr	r4, [r3, #12]
 800c87c:	7bfb      	ldrb	r3, [r7, #15]
 800c87e:	4a07      	ldr	r2, [pc, #28]	@ (800c89c <disk_write+0x3c>)
 800c880:	4413      	add	r3, r2
 800c882:	7a18      	ldrb	r0, [r3, #8]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	68b9      	ldr	r1, [r7, #8]
 800c88a:	47a0      	blx	r4
 800c88c:	4603      	mov	r3, r0
 800c88e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c890:	7dfb      	ldrb	r3, [r7, #23]
}
 800c892:	4618      	mov	r0, r3
 800c894:	371c      	adds	r7, #28
 800c896:	46bd      	mov	sp, r7
 800c898:	bd90      	pop	{r4, r7, pc}
 800c89a:	bf00      	nop
 800c89c:	20001d8c 	.word	0x20001d8c

0800c8a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	603a      	str	r2, [r7, #0]
 800c8aa:	71fb      	strb	r3, [r7, #7]
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c8b0:	79fb      	ldrb	r3, [r7, #7]
 800c8b2:	4a09      	ldr	r2, [pc, #36]	@ (800c8d8 <disk_ioctl+0x38>)
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	4413      	add	r3, r2
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	691b      	ldr	r3, [r3, #16]
 800c8bc:	79fa      	ldrb	r2, [r7, #7]
 800c8be:	4906      	ldr	r1, [pc, #24]	@ (800c8d8 <disk_ioctl+0x38>)
 800c8c0:	440a      	add	r2, r1
 800c8c2:	7a10      	ldrb	r0, [r2, #8]
 800c8c4:	79b9      	ldrb	r1, [r7, #6]
 800c8c6:	683a      	ldr	r2, [r7, #0]
 800c8c8:	4798      	blx	r3
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	73fb      	strb	r3, [r7, #15]
  return res;
 800c8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	20001d8c 	.word	0x20001d8c

0800c8dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c8ec:	89fb      	ldrh	r3, [r7, #14]
 800c8ee:	021b      	lsls	r3, r3, #8
 800c8f0:	b21a      	sxth	r2, r3
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	b21b      	sxth	r3, r3
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	b21b      	sxth	r3, r3
 800c8fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c8fe:	89fb      	ldrh	r3, [r7, #14]
}
 800c900:	4618      	mov	r0, r3
 800c902:	3714      	adds	r7, #20
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	3303      	adds	r3, #3
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	021b      	lsls	r3, r3, #8
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	3202      	adds	r2, #2
 800c924:	7812      	ldrb	r2, [r2, #0]
 800c926:	4313      	orrs	r3, r2
 800c928:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	021b      	lsls	r3, r3, #8
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	3201      	adds	r2, #1
 800c932:	7812      	ldrb	r2, [r2, #0]
 800c934:	4313      	orrs	r3, r2
 800c936:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	021b      	lsls	r3, r3, #8
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	7812      	ldrb	r2, [r2, #0]
 800c940:	4313      	orrs	r3, r2
 800c942:	60fb      	str	r3, [r7, #12]
	return rv;
 800c944:	68fb      	ldr	r3, [r7, #12]
}
 800c946:	4618      	mov	r0, r3
 800c948:	3714      	adds	r7, #20
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr

0800c952 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c952:	b480      	push	{r7}
 800c954:	b083      	sub	sp, #12
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
 800c95a:	460b      	mov	r3, r1
 800c95c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	1c5a      	adds	r2, r3, #1
 800c962:	607a      	str	r2, [r7, #4]
 800c964:	887a      	ldrh	r2, [r7, #2]
 800c966:	b2d2      	uxtb	r2, r2
 800c968:	701a      	strb	r2, [r3, #0]
 800c96a:	887b      	ldrh	r3, [r7, #2]
 800c96c:	0a1b      	lsrs	r3, r3, #8
 800c96e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	1c5a      	adds	r2, r3, #1
 800c974:	607a      	str	r2, [r7, #4]
 800c976:	887a      	ldrh	r2, [r7, #2]
 800c978:	b2d2      	uxtb	r2, r2
 800c97a:	701a      	strb	r2, [r3, #0]
}
 800c97c:	bf00      	nop
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	1c5a      	adds	r2, r3, #1
 800c996:	607a      	str	r2, [r7, #4]
 800c998:	683a      	ldr	r2, [r7, #0]
 800c99a:	b2d2      	uxtb	r2, r2
 800c99c:	701a      	strb	r2, [r3, #0]
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	0a1b      	lsrs	r3, r3, #8
 800c9a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	1c5a      	adds	r2, r3, #1
 800c9a8:	607a      	str	r2, [r7, #4]
 800c9aa:	683a      	ldr	r2, [r7, #0]
 800c9ac:	b2d2      	uxtb	r2, r2
 800c9ae:	701a      	strb	r2, [r3, #0]
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	0a1b      	lsrs	r3, r3, #8
 800c9b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	1c5a      	adds	r2, r3, #1
 800c9ba:	607a      	str	r2, [r7, #4]
 800c9bc:	683a      	ldr	r2, [r7, #0]
 800c9be:	b2d2      	uxtb	r2, r2
 800c9c0:	701a      	strb	r2, [r3, #0]
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	0a1b      	lsrs	r3, r3, #8
 800c9c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	1c5a      	adds	r2, r3, #1
 800c9cc:	607a      	str	r2, [r7, #4]
 800c9ce:	683a      	ldr	r2, [r7, #0]
 800c9d0:	b2d2      	uxtb	r2, r2
 800c9d2:	701a      	strb	r2, [r3, #0]
}
 800c9d4:	bf00      	nop
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c9e0:	b480      	push	{r7}
 800c9e2:	b087      	sub	sp, #28
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d00d      	beq.n	800ca16 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c9fa:	693a      	ldr	r2, [r7, #16]
 800c9fc:	1c53      	adds	r3, r2, #1
 800c9fe:	613b      	str	r3, [r7, #16]
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	1c59      	adds	r1, r3, #1
 800ca04:	6179      	str	r1, [r7, #20]
 800ca06:	7812      	ldrb	r2, [r2, #0]
 800ca08:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	607b      	str	r3, [r7, #4]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1f1      	bne.n	800c9fa <mem_cpy+0x1a>
	}
}
 800ca16:	bf00      	nop
 800ca18:	371c      	adds	r7, #28
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr

0800ca22 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ca22:	b480      	push	{r7}
 800ca24:	b087      	sub	sp, #28
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	60f8      	str	r0, [r7, #12]
 800ca2a:	60b9      	str	r1, [r7, #8]
 800ca2c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	1c5a      	adds	r2, r3, #1
 800ca36:	617a      	str	r2, [r7, #20]
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	b2d2      	uxtb	r2, r2
 800ca3c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	3b01      	subs	r3, #1
 800ca42:	607b      	str	r3, [r7, #4]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d1f3      	bne.n	800ca32 <mem_set+0x10>
}
 800ca4a:	bf00      	nop
 800ca4c:	bf00      	nop
 800ca4e:	371c      	adds	r7, #28
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ca58:	b480      	push	{r7}
 800ca5a:	b089      	sub	sp, #36	@ 0x24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	61fb      	str	r3, [r7, #28]
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	1c5a      	adds	r2, r3, #1
 800ca74:	61fa      	str	r2, [r7, #28]
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	4619      	mov	r1, r3
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	1c5a      	adds	r2, r3, #1
 800ca7e:	61ba      	str	r2, [r7, #24]
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	1acb      	subs	r3, r1, r3
 800ca84:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	3b01      	subs	r3, #1
 800ca8a:	607b      	str	r3, [r7, #4]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d002      	beq.n	800ca98 <mem_cmp+0x40>
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d0eb      	beq.n	800ca70 <mem_cmp+0x18>

	return r;
 800ca98:	697b      	ldr	r3, [r7, #20]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3724      	adds	r7, #36	@ 0x24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr

0800caa6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800caa6:	b480      	push	{r7}
 800caa8:	b083      	sub	sp, #12
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
 800caae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cab0:	e002      	b.n	800cab8 <chk_chr+0x12>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	3301      	adds	r3, #1
 800cab6:	607b      	str	r3, [r7, #4]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d005      	beq.n	800cacc <chk_chr+0x26>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	461a      	mov	r2, r3
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	4293      	cmp	r3, r2
 800caca:	d1f2      	bne.n	800cab2 <chk_chr+0xc>
	return *str;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	781b      	ldrb	r3, [r3, #0]
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr

0800cadc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cadc:	b480      	push	{r7}
 800cade:	b085      	sub	sp, #20
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cae6:	2300      	movs	r3, #0
 800cae8:	60bb      	str	r3, [r7, #8]
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	60fb      	str	r3, [r7, #12]
 800caee:	e029      	b.n	800cb44 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800caf0:	4a27      	ldr	r2, [pc, #156]	@ (800cb90 <chk_lock+0xb4>)
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	011b      	lsls	r3, r3, #4
 800caf6:	4413      	add	r3, r2
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d01d      	beq.n	800cb3a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cafe:	4a24      	ldr	r2, [pc, #144]	@ (800cb90 <chk_lock+0xb4>)
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	011b      	lsls	r3, r3, #4
 800cb04:	4413      	add	r3, r2
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d116      	bne.n	800cb3e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cb10:	4a1f      	ldr	r2, [pc, #124]	@ (800cb90 <chk_lock+0xb4>)
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	011b      	lsls	r3, r3, #4
 800cb16:	4413      	add	r3, r2
 800cb18:	3304      	adds	r3, #4
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d10c      	bne.n	800cb3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cb24:	4a1a      	ldr	r2, [pc, #104]	@ (800cb90 <chk_lock+0xb4>)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	011b      	lsls	r3, r3, #4
 800cb2a:	4413      	add	r3, r2
 800cb2c:	3308      	adds	r3, #8
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d102      	bne.n	800cb3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cb38:	e007      	b.n	800cb4a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	3301      	adds	r3, #1
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d9d2      	bls.n	800caf0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	d109      	bne.n	800cb64 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d102      	bne.n	800cb5c <chk_lock+0x80>
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d101      	bne.n	800cb60 <chk_lock+0x84>
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	e010      	b.n	800cb82 <chk_lock+0xa6>
 800cb60:	2312      	movs	r3, #18
 800cb62:	e00e      	b.n	800cb82 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d108      	bne.n	800cb7c <chk_lock+0xa0>
 800cb6a:	4a09      	ldr	r2, [pc, #36]	@ (800cb90 <chk_lock+0xb4>)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	011b      	lsls	r3, r3, #4
 800cb70:	4413      	add	r3, r2
 800cb72:	330c      	adds	r3, #12
 800cb74:	881b      	ldrh	r3, [r3, #0]
 800cb76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb7a:	d101      	bne.n	800cb80 <chk_lock+0xa4>
 800cb7c:	2310      	movs	r3, #16
 800cb7e:	e000      	b.n	800cb82 <chk_lock+0xa6>
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3714      	adds	r7, #20
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	20001b6c 	.word	0x20001b6c

0800cb94 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	607b      	str	r3, [r7, #4]
 800cb9e:	e002      	b.n	800cba6 <enq_lock+0x12>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3301      	adds	r3, #1
 800cba4:	607b      	str	r3, [r7, #4]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d806      	bhi.n	800cbba <enq_lock+0x26>
 800cbac:	4a09      	ldr	r2, [pc, #36]	@ (800cbd4 <enq_lock+0x40>)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	011b      	lsls	r3, r3, #4
 800cbb2:	4413      	add	r3, r2
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1f2      	bne.n	800cba0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	bf14      	ite	ne
 800cbc0:	2301      	movne	r3, #1
 800cbc2:	2300      	moveq	r3, #0
 800cbc4:	b2db      	uxtb	r3, r3
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	370c      	adds	r7, #12
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	20001b6c 	.word	0x20001b6c

0800cbd8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	60fb      	str	r3, [r7, #12]
 800cbe6:	e01f      	b.n	800cc28 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cbe8:	4a41      	ldr	r2, [pc, #260]	@ (800ccf0 <inc_lock+0x118>)
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	011b      	lsls	r3, r3, #4
 800cbee:	4413      	add	r3, r2
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d113      	bne.n	800cc22 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cbfa:	4a3d      	ldr	r2, [pc, #244]	@ (800ccf0 <inc_lock+0x118>)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	011b      	lsls	r3, r3, #4
 800cc00:	4413      	add	r3, r2
 800cc02:	3304      	adds	r3, #4
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d109      	bne.n	800cc22 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cc0e:	4a38      	ldr	r2, [pc, #224]	@ (800ccf0 <inc_lock+0x118>)
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	011b      	lsls	r3, r3, #4
 800cc14:	4413      	add	r3, r2
 800cc16:	3308      	adds	r3, #8
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d006      	beq.n	800cc30 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	3301      	adds	r3, #1
 800cc26:	60fb      	str	r3, [r7, #12]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d9dc      	bls.n	800cbe8 <inc_lock+0x10>
 800cc2e:	e000      	b.n	800cc32 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cc30:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2b02      	cmp	r3, #2
 800cc36:	d132      	bne.n	800cc9e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	60fb      	str	r3, [r7, #12]
 800cc3c:	e002      	b.n	800cc44 <inc_lock+0x6c>
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	3301      	adds	r3, #1
 800cc42:	60fb      	str	r3, [r7, #12]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d806      	bhi.n	800cc58 <inc_lock+0x80>
 800cc4a:	4a29      	ldr	r2, [pc, #164]	@ (800ccf0 <inc_lock+0x118>)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	011b      	lsls	r3, r3, #4
 800cc50:	4413      	add	r3, r2
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d1f2      	bne.n	800cc3e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	d101      	bne.n	800cc62 <inc_lock+0x8a>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	e040      	b.n	800cce4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	4922      	ldr	r1, [pc, #136]	@ (800ccf0 <inc_lock+0x118>)
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	011b      	lsls	r3, r3, #4
 800cc6c:	440b      	add	r3, r1
 800cc6e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	689a      	ldr	r2, [r3, #8]
 800cc74:	491e      	ldr	r1, [pc, #120]	@ (800ccf0 <inc_lock+0x118>)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	011b      	lsls	r3, r3, #4
 800cc7a:	440b      	add	r3, r1
 800cc7c:	3304      	adds	r3, #4
 800cc7e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	695a      	ldr	r2, [r3, #20]
 800cc84:	491a      	ldr	r1, [pc, #104]	@ (800ccf0 <inc_lock+0x118>)
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	011b      	lsls	r3, r3, #4
 800cc8a:	440b      	add	r3, r1
 800cc8c:	3308      	adds	r3, #8
 800cc8e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cc90:	4a17      	ldr	r2, [pc, #92]	@ (800ccf0 <inc_lock+0x118>)
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	011b      	lsls	r3, r3, #4
 800cc96:	4413      	add	r3, r2
 800cc98:	330c      	adds	r3, #12
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d009      	beq.n	800ccb8 <inc_lock+0xe0>
 800cca4:	4a12      	ldr	r2, [pc, #72]	@ (800ccf0 <inc_lock+0x118>)
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	011b      	lsls	r3, r3, #4
 800ccaa:	4413      	add	r3, r2
 800ccac:	330c      	adds	r3, #12
 800ccae:	881b      	ldrh	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d001      	beq.n	800ccb8 <inc_lock+0xe0>
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	e015      	b.n	800cce4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d108      	bne.n	800ccd0 <inc_lock+0xf8>
 800ccbe:	4a0c      	ldr	r2, [pc, #48]	@ (800ccf0 <inc_lock+0x118>)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	011b      	lsls	r3, r3, #4
 800ccc4:	4413      	add	r3, r2
 800ccc6:	330c      	adds	r3, #12
 800ccc8:	881b      	ldrh	r3, [r3, #0]
 800ccca:	3301      	adds	r3, #1
 800cccc:	b29a      	uxth	r2, r3
 800ccce:	e001      	b.n	800ccd4 <inc_lock+0xfc>
 800ccd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ccd4:	4906      	ldr	r1, [pc, #24]	@ (800ccf0 <inc_lock+0x118>)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	011b      	lsls	r3, r3, #4
 800ccda:	440b      	add	r3, r1
 800ccdc:	330c      	adds	r3, #12
 800ccde:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	3301      	adds	r3, #1
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	20001b6c 	.word	0x20001b6c

0800ccf4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	607b      	str	r3, [r7, #4]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d825      	bhi.n	800cd54 <dec_lock+0x60>
		n = Files[i].ctr;
 800cd08:	4a17      	ldr	r2, [pc, #92]	@ (800cd68 <dec_lock+0x74>)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	011b      	lsls	r3, r3, #4
 800cd0e:	4413      	add	r3, r2
 800cd10:	330c      	adds	r3, #12
 800cd12:	881b      	ldrh	r3, [r3, #0]
 800cd14:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cd16:	89fb      	ldrh	r3, [r7, #14]
 800cd18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd1c:	d101      	bne.n	800cd22 <dec_lock+0x2e>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cd22:	89fb      	ldrh	r3, [r7, #14]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d002      	beq.n	800cd2e <dec_lock+0x3a>
 800cd28:	89fb      	ldrh	r3, [r7, #14]
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cd2e:	4a0e      	ldr	r2, [pc, #56]	@ (800cd68 <dec_lock+0x74>)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	011b      	lsls	r3, r3, #4
 800cd34:	4413      	add	r3, r2
 800cd36:	330c      	adds	r3, #12
 800cd38:	89fa      	ldrh	r2, [r7, #14]
 800cd3a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cd3c:	89fb      	ldrh	r3, [r7, #14]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d105      	bne.n	800cd4e <dec_lock+0x5a>
 800cd42:	4a09      	ldr	r2, [pc, #36]	@ (800cd68 <dec_lock+0x74>)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	011b      	lsls	r3, r3, #4
 800cd48:	4413      	add	r3, r2
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	737b      	strb	r3, [r7, #13]
 800cd52:	e001      	b.n	800cd58 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cd54:	2302      	movs	r3, #2
 800cd56:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cd58:	7b7b      	ldrb	r3, [r7, #13]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3714      	adds	r7, #20
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	20001b6c 	.word	0x20001b6c

0800cd6c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cd74:	2300      	movs	r3, #0
 800cd76:	60fb      	str	r3, [r7, #12]
 800cd78:	e010      	b.n	800cd9c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cd7a:	4a0d      	ldr	r2, [pc, #52]	@ (800cdb0 <clear_lock+0x44>)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	011b      	lsls	r3, r3, #4
 800cd80:	4413      	add	r3, r2
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d105      	bne.n	800cd96 <clear_lock+0x2a>
 800cd8a:	4a09      	ldr	r2, [pc, #36]	@ (800cdb0 <clear_lock+0x44>)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	011b      	lsls	r3, r3, #4
 800cd90:	4413      	add	r3, r2
 800cd92:	2200      	movs	r2, #0
 800cd94:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	60fb      	str	r3, [r7, #12]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d9eb      	bls.n	800cd7a <clear_lock+0xe>
	}
}
 800cda2:	bf00      	nop
 800cda4:	bf00      	nop
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr
 800cdb0:	20001b6c 	.word	0x20001b6c

0800cdb4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b086      	sub	sp, #24
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	78db      	ldrb	r3, [r3, #3]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d034      	beq.n	800ce32 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdcc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	7858      	ldrb	r0, [r3, #1]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cdd8:	2301      	movs	r3, #1
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	f7ff fd40 	bl	800c860 <disk_write>
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d002      	beq.n	800cdec <sync_window+0x38>
			res = FR_DISK_ERR;
 800cde6:	2301      	movs	r3, #1
 800cde8:	73fb      	strb	r3, [r7, #15]
 800cdea:	e022      	b.n	800ce32 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdf6:	697a      	ldr	r2, [r7, #20]
 800cdf8:	1ad2      	subs	r2, r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	69db      	ldr	r3, [r3, #28]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d217      	bcs.n	800ce32 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	789b      	ldrb	r3, [r3, #2]
 800ce06:	613b      	str	r3, [r7, #16]
 800ce08:	e010      	b.n	800ce2c <sync_window+0x78>
					wsect += fs->fsize;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	69db      	ldr	r3, [r3, #28]
 800ce0e:	697a      	ldr	r2, [r7, #20]
 800ce10:	4413      	add	r3, r2
 800ce12:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	7858      	ldrb	r0, [r3, #1]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ce1e:	2301      	movs	r3, #1
 800ce20:	697a      	ldr	r2, [r7, #20]
 800ce22:	f7ff fd1d 	bl	800c860 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	3b01      	subs	r3, #1
 800ce2a:	613b      	str	r3, [r7, #16]
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d8eb      	bhi.n	800ce0a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ce32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3718      	adds	r7, #24
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ce46:	2300      	movs	r3, #0
 800ce48:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce4e:	683a      	ldr	r2, [r7, #0]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d01b      	beq.n	800ce8c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7ff ffad 	bl	800cdb4 <sync_window>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ce5e:	7bfb      	ldrb	r3, [r7, #15]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d113      	bne.n	800ce8c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	7858      	ldrb	r0, [r3, #1]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ce6e:	2301      	movs	r3, #1
 800ce70:	683a      	ldr	r2, [r7, #0]
 800ce72:	f7ff fcd5 	bl	800c820 <disk_read>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d004      	beq.n	800ce86 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ce7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce80:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ce82:	2301      	movs	r3, #1
 800ce84:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	683a      	ldr	r2, [r7, #0]
 800ce8a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800ce8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
	...

0800ce98 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f7ff ff87 	bl	800cdb4 <sync_window>
 800cea6:	4603      	mov	r3, r0
 800cea8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d158      	bne.n	800cf62 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	2b03      	cmp	r3, #3
 800ceb6:	d148      	bne.n	800cf4a <sync_fs+0xb2>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	791b      	ldrb	r3, [r3, #4]
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	d144      	bne.n	800cf4a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	3334      	adds	r3, #52	@ 0x34
 800cec4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cec8:	2100      	movs	r1, #0
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7ff fda9 	bl	800ca22 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	3334      	adds	r3, #52	@ 0x34
 800ced4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ced8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800cedc:	4618      	mov	r0, r3
 800cede:	f7ff fd38 	bl	800c952 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	3334      	adds	r3, #52	@ 0x34
 800cee6:	4921      	ldr	r1, [pc, #132]	@ (800cf6c <sync_fs+0xd4>)
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7ff fd4d 	bl	800c988 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	3334      	adds	r3, #52	@ 0x34
 800cef2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cef6:	491e      	ldr	r1, [pc, #120]	@ (800cf70 <sync_fs+0xd8>)
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7ff fd45 	bl	800c988 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	3334      	adds	r3, #52	@ 0x34
 800cf02:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	695b      	ldr	r3, [r3, #20]
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	4610      	mov	r0, r2
 800cf0e:	f7ff fd3b 	bl	800c988 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	3334      	adds	r3, #52	@ 0x34
 800cf16:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	4619      	mov	r1, r3
 800cf20:	4610      	mov	r0, r2
 800cf22:	f7ff fd31 	bl	800c988 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a1b      	ldr	r3, [r3, #32]
 800cf2a:	1c5a      	adds	r2, r3, #1
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	7858      	ldrb	r0, [r3, #1]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cf3e:	2301      	movs	r3, #1
 800cf40:	f7ff fc8e 	bl	800c860 <disk_write>
			fs->fsi_flag = 0;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	785b      	ldrb	r3, [r3, #1]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	2100      	movs	r1, #0
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7ff fca4 	bl	800c8a0 <disk_ioctl>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d001      	beq.n	800cf62 <sync_fs+0xca>
 800cf5e:	2301      	movs	r3, #1
 800cf60:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	41615252 	.word	0x41615252
 800cf70:	61417272 	.word	0x61417272

0800cf74 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	3b02      	subs	r3, #2
 800cf82:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	699b      	ldr	r3, [r3, #24]
 800cf88:	3b02      	subs	r3, #2
 800cf8a:	683a      	ldr	r2, [r7, #0]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d301      	bcc.n	800cf94 <clust2sect+0x20>
 800cf90:	2300      	movs	r3, #0
 800cf92:	e008      	b.n	800cfa6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	895b      	ldrh	r3, [r3, #10]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	fb03 f202 	mul.w	r2, r3, r2
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfa4:	4413      	add	r3, r2
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	370c      	adds	r7, #12
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr

0800cfb2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b086      	sub	sp, #24
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
 800cfba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d904      	bls.n	800cfd2 <get_fat+0x20>
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	699b      	ldr	r3, [r3, #24]
 800cfcc:	683a      	ldr	r2, [r7, #0]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d302      	bcc.n	800cfd8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	617b      	str	r3, [r7, #20]
 800cfd6:	e08e      	b.n	800d0f6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cfd8:	f04f 33ff 	mov.w	r3, #4294967295
 800cfdc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	2b03      	cmp	r3, #3
 800cfe4:	d061      	beq.n	800d0aa <get_fat+0xf8>
 800cfe6:	2b03      	cmp	r3, #3
 800cfe8:	dc7b      	bgt.n	800d0e2 <get_fat+0x130>
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d002      	beq.n	800cff4 <get_fat+0x42>
 800cfee:	2b02      	cmp	r3, #2
 800cff0:	d041      	beq.n	800d076 <get_fat+0xc4>
 800cff2:	e076      	b.n	800d0e2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	60fb      	str	r3, [r7, #12]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	085b      	lsrs	r3, r3, #1
 800cffc:	68fa      	ldr	r2, [r7, #12]
 800cffe:	4413      	add	r3, r2
 800d000:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	0a5b      	lsrs	r3, r3, #9
 800d00a:	4413      	add	r3, r2
 800d00c:	4619      	mov	r1, r3
 800d00e:	6938      	ldr	r0, [r7, #16]
 800d010:	f7ff ff14 	bl	800ce3c <move_window>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d166      	bne.n	800d0e8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	1c5a      	adds	r2, r3, #1
 800d01e:	60fa      	str	r2, [r7, #12]
 800d020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d024:	693a      	ldr	r2, [r7, #16]
 800d026:	4413      	add	r3, r2
 800d028:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d02c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	0a5b      	lsrs	r3, r3, #9
 800d036:	4413      	add	r3, r2
 800d038:	4619      	mov	r1, r3
 800d03a:	6938      	ldr	r0, [r7, #16]
 800d03c:	f7ff fefe 	bl	800ce3c <move_window>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d152      	bne.n	800d0ec <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d04c:	693a      	ldr	r2, [r7, #16]
 800d04e:	4413      	add	r3, r2
 800d050:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d054:	021b      	lsls	r3, r3, #8
 800d056:	68ba      	ldr	r2, [r7, #8]
 800d058:	4313      	orrs	r3, r2
 800d05a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	f003 0301 	and.w	r3, r3, #1
 800d062:	2b00      	cmp	r3, #0
 800d064:	d002      	beq.n	800d06c <get_fat+0xba>
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	091b      	lsrs	r3, r3, #4
 800d06a:	e002      	b.n	800d072 <get_fat+0xc0>
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d072:	617b      	str	r3, [r7, #20]
			break;
 800d074:	e03f      	b.n	800d0f6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	0a1b      	lsrs	r3, r3, #8
 800d07e:	4413      	add	r3, r2
 800d080:	4619      	mov	r1, r3
 800d082:	6938      	ldr	r0, [r7, #16]
 800d084:	f7ff feda 	bl	800ce3c <move_window>
 800d088:	4603      	mov	r3, r0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d130      	bne.n	800d0f0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	005b      	lsls	r3, r3, #1
 800d098:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d09c:	4413      	add	r3, r2
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7ff fc1c 	bl	800c8dc <ld_word>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	617b      	str	r3, [r7, #20]
			break;
 800d0a8:	e025      	b.n	800d0f6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	09db      	lsrs	r3, r3, #7
 800d0b2:	4413      	add	r3, r2
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	6938      	ldr	r0, [r7, #16]
 800d0b8:	f7ff fec0 	bl	800ce3c <move_window>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d118      	bne.n	800d0f4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d0d0:	4413      	add	r3, r2
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7ff fc1a 	bl	800c90c <ld_dword>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d0de:	617b      	str	r3, [r7, #20]
			break;
 800d0e0:	e009      	b.n	800d0f6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	617b      	str	r3, [r7, #20]
 800d0e6:	e006      	b.n	800d0f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d0e8:	bf00      	nop
 800d0ea:	e004      	b.n	800d0f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d0ec:	bf00      	nop
 800d0ee:	e002      	b.n	800d0f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d0f0:	bf00      	nop
 800d0f2:	e000      	b.n	800d0f6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d0f4:	bf00      	nop
		}
	}

	return val;
 800d0f6:	697b      	ldr	r3, [r7, #20]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3718      	adds	r7, #24
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d100:	b590      	push	{r4, r7, lr}
 800d102:	b089      	sub	sp, #36	@ 0x24
 800d104:	af00      	add	r7, sp, #0
 800d106:	60f8      	str	r0, [r7, #12]
 800d108:	60b9      	str	r1, [r7, #8]
 800d10a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d10c:	2302      	movs	r3, #2
 800d10e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	2b01      	cmp	r3, #1
 800d114:	f240 80d9 	bls.w	800d2ca <put_fat+0x1ca>
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	699b      	ldr	r3, [r3, #24]
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	429a      	cmp	r2, r3
 800d120:	f080 80d3 	bcs.w	800d2ca <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	2b03      	cmp	r3, #3
 800d12a:	f000 8096 	beq.w	800d25a <put_fat+0x15a>
 800d12e:	2b03      	cmp	r3, #3
 800d130:	f300 80cb 	bgt.w	800d2ca <put_fat+0x1ca>
 800d134:	2b01      	cmp	r3, #1
 800d136:	d002      	beq.n	800d13e <put_fat+0x3e>
 800d138:	2b02      	cmp	r3, #2
 800d13a:	d06e      	beq.n	800d21a <put_fat+0x11a>
 800d13c:	e0c5      	b.n	800d2ca <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	61bb      	str	r3, [r7, #24]
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	085b      	lsrs	r3, r3, #1
 800d146:	69ba      	ldr	r2, [r7, #24]
 800d148:	4413      	add	r3, r2
 800d14a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	0a5b      	lsrs	r3, r3, #9
 800d154:	4413      	add	r3, r2
 800d156:	4619      	mov	r1, r3
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f7ff fe6f 	bl	800ce3c <move_window>
 800d15e:	4603      	mov	r3, r0
 800d160:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d162:	7ffb      	ldrb	r3, [r7, #31]
 800d164:	2b00      	cmp	r3, #0
 800d166:	f040 80a9 	bne.w	800d2bc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	1c59      	adds	r1, r3, #1
 800d174:	61b9      	str	r1, [r7, #24]
 800d176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d17a:	4413      	add	r3, r2
 800d17c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	f003 0301 	and.w	r3, r3, #1
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00d      	beq.n	800d1a4 <put_fat+0xa4>
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	b25b      	sxtb	r3, r3
 800d18e:	f003 030f 	and.w	r3, r3, #15
 800d192:	b25a      	sxtb	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	b2db      	uxtb	r3, r3
 800d198:	011b      	lsls	r3, r3, #4
 800d19a:	b25b      	sxtb	r3, r3
 800d19c:	4313      	orrs	r3, r2
 800d19e:	b25b      	sxtb	r3, r3
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	e001      	b.n	800d1a8 <put_fat+0xa8>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	697a      	ldr	r2, [r7, #20]
 800d1aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	0a5b      	lsrs	r3, r3, #9
 800d1ba:	4413      	add	r3, r2
 800d1bc:	4619      	mov	r1, r3
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f7ff fe3c 	bl	800ce3c <move_window>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d1c8:	7ffb      	ldrb	r3, [r7, #31]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d178      	bne.n	800d2c0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1da:	4413      	add	r3, r2
 800d1dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	f003 0301 	and.w	r3, r3, #1
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d003      	beq.n	800d1f0 <put_fat+0xf0>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	091b      	lsrs	r3, r3, #4
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	e00e      	b.n	800d20e <put_fat+0x10e>
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	b25b      	sxtb	r3, r3
 800d1f6:	f023 030f 	bic.w	r3, r3, #15
 800d1fa:	b25a      	sxtb	r2, r3
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	0a1b      	lsrs	r3, r3, #8
 800d200:	b25b      	sxtb	r3, r3
 800d202:	f003 030f 	and.w	r3, r3, #15
 800d206:	b25b      	sxtb	r3, r3
 800d208:	4313      	orrs	r3, r2
 800d20a:	b25b      	sxtb	r3, r3
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2201      	movs	r2, #1
 800d216:	70da      	strb	r2, [r3, #3]
			break;
 800d218:	e057      	b.n	800d2ca <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	0a1b      	lsrs	r3, r3, #8
 800d222:	4413      	add	r3, r2
 800d224:	4619      	mov	r1, r3
 800d226:	68f8      	ldr	r0, [r7, #12]
 800d228:	f7ff fe08 	bl	800ce3c <move_window>
 800d22c:	4603      	mov	r3, r0
 800d22e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d230:	7ffb      	ldrb	r3, [r7, #31]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d146      	bne.n	800d2c4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	005b      	lsls	r3, r3, #1
 800d240:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d244:	4413      	add	r3, r2
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	b292      	uxth	r2, r2
 800d24a:	4611      	mov	r1, r2
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7ff fb80 	bl	800c952 <st_word>
			fs->wflag = 1;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2201      	movs	r2, #1
 800d256:	70da      	strb	r2, [r3, #3]
			break;
 800d258:	e037      	b.n	800d2ca <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	09db      	lsrs	r3, r3, #7
 800d262:	4413      	add	r3, r2
 800d264:	4619      	mov	r1, r3
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f7ff fde8 	bl	800ce3c <move_window>
 800d26c:	4603      	mov	r3, r0
 800d26e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d270:	7ffb      	ldrb	r3, [r7, #31]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d128      	bne.n	800d2c8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d28a:	4413      	add	r3, r2
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7ff fb3d 	bl	800c90c <ld_dword>
 800d292:	4603      	mov	r3, r0
 800d294:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d298:	4323      	orrs	r3, r4
 800d29a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d2aa:	4413      	add	r3, r2
 800d2ac:	6879      	ldr	r1, [r7, #4]
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7ff fb6a 	bl	800c988 <st_dword>
			fs->wflag = 1;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	70da      	strb	r2, [r3, #3]
			break;
 800d2ba:	e006      	b.n	800d2ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d2bc:	bf00      	nop
 800d2be:	e004      	b.n	800d2ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d2c0:	bf00      	nop
 800d2c2:	e002      	b.n	800d2ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d2c4:	bf00      	nop
 800d2c6:	e000      	b.n	800d2ca <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d2c8:	bf00      	nop
		}
	}
	return res;
 800d2ca:	7ffb      	ldrb	r3, [r7, #31]
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3724      	adds	r7, #36	@ 0x24
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd90      	pop	{r4, r7, pc}

0800d2d4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b088      	sub	sp, #32
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d904      	bls.n	800d2fa <remove_chain+0x26>
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	699b      	ldr	r3, [r3, #24]
 800d2f4:	68ba      	ldr	r2, [r7, #8]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d301      	bcc.n	800d2fe <remove_chain+0x2a>
 800d2fa:	2302      	movs	r3, #2
 800d2fc:	e04b      	b.n	800d396 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d00c      	beq.n	800d31e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d304:	f04f 32ff 	mov.w	r2, #4294967295
 800d308:	6879      	ldr	r1, [r7, #4]
 800d30a:	69b8      	ldr	r0, [r7, #24]
 800d30c:	f7ff fef8 	bl	800d100 <put_fat>
 800d310:	4603      	mov	r3, r0
 800d312:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d314:	7ffb      	ldrb	r3, [r7, #31]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d001      	beq.n	800d31e <remove_chain+0x4a>
 800d31a:	7ffb      	ldrb	r3, [r7, #31]
 800d31c:	e03b      	b.n	800d396 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d31e:	68b9      	ldr	r1, [r7, #8]
 800d320:	68f8      	ldr	r0, [r7, #12]
 800d322:	f7ff fe46 	bl	800cfb2 <get_fat>
 800d326:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d031      	beq.n	800d392 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d101      	bne.n	800d338 <remove_chain+0x64>
 800d334:	2302      	movs	r3, #2
 800d336:	e02e      	b.n	800d396 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d33e:	d101      	bne.n	800d344 <remove_chain+0x70>
 800d340:	2301      	movs	r3, #1
 800d342:	e028      	b.n	800d396 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d344:	2200      	movs	r2, #0
 800d346:	68b9      	ldr	r1, [r7, #8]
 800d348:	69b8      	ldr	r0, [r7, #24]
 800d34a:	f7ff fed9 	bl	800d100 <put_fat>
 800d34e:	4603      	mov	r3, r0
 800d350:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d352:	7ffb      	ldrb	r3, [r7, #31]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d001      	beq.n	800d35c <remove_chain+0x88>
 800d358:	7ffb      	ldrb	r3, [r7, #31]
 800d35a:	e01c      	b.n	800d396 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	695a      	ldr	r2, [r3, #20]
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	699b      	ldr	r3, [r3, #24]
 800d364:	3b02      	subs	r3, #2
 800d366:	429a      	cmp	r2, r3
 800d368:	d20b      	bcs.n	800d382 <remove_chain+0xae>
			fs->free_clst++;
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	695b      	ldr	r3, [r3, #20]
 800d36e:	1c5a      	adds	r2, r3, #1
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	791b      	ldrb	r3, [r3, #4]
 800d378:	f043 0301 	orr.w	r3, r3, #1
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	699b      	ldr	r3, [r3, #24]
 800d38a:	68ba      	ldr	r2, [r7, #8]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d3c6      	bcc.n	800d31e <remove_chain+0x4a>
 800d390:	e000      	b.n	800d394 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d392:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d394:	2300      	movs	r3, #0
}
 800d396:	4618      	mov	r0, r3
 800d398:	3720      	adds	r7, #32
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}

0800d39e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b088      	sub	sp, #32
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
 800d3a6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d10d      	bne.n	800d3d0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	691b      	ldr	r3, [r3, #16]
 800d3b8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d3ba:	69bb      	ldr	r3, [r7, #24]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d004      	beq.n	800d3ca <create_chain+0x2c>
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	699b      	ldr	r3, [r3, #24]
 800d3c4:	69ba      	ldr	r2, [r7, #24]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d31b      	bcc.n	800d402 <create_chain+0x64>
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	61bb      	str	r3, [r7, #24]
 800d3ce:	e018      	b.n	800d402 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d3d0:	6839      	ldr	r1, [r7, #0]
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f7ff fded 	bl	800cfb2 <get_fat>
 800d3d8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d801      	bhi.n	800d3e4 <create_chain+0x46>
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	e070      	b.n	800d4c6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ea:	d101      	bne.n	800d3f0 <create_chain+0x52>
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	e06a      	b.n	800d4c6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	699b      	ldr	r3, [r3, #24]
 800d3f4:	68fa      	ldr	r2, [r7, #12]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d201      	bcs.n	800d3fe <create_chain+0x60>
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	e063      	b.n	800d4c6 <create_chain+0x128>
		scl = clst;
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	3301      	adds	r3, #1
 800d40a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	699b      	ldr	r3, [r3, #24]
 800d410:	69fa      	ldr	r2, [r7, #28]
 800d412:	429a      	cmp	r2, r3
 800d414:	d307      	bcc.n	800d426 <create_chain+0x88>
				ncl = 2;
 800d416:	2302      	movs	r3, #2
 800d418:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d41a:	69fa      	ldr	r2, [r7, #28]
 800d41c:	69bb      	ldr	r3, [r7, #24]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d901      	bls.n	800d426 <create_chain+0x88>
 800d422:	2300      	movs	r3, #0
 800d424:	e04f      	b.n	800d4c6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d426:	69f9      	ldr	r1, [r7, #28]
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f7ff fdc2 	bl	800cfb2 <get_fat>
 800d42e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00e      	beq.n	800d454 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d003      	beq.n	800d444 <create_chain+0xa6>
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d442:	d101      	bne.n	800d448 <create_chain+0xaa>
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	e03e      	b.n	800d4c6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d448:	69fa      	ldr	r2, [r7, #28]
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d1da      	bne.n	800d406 <create_chain+0x68>
 800d450:	2300      	movs	r3, #0
 800d452:	e038      	b.n	800d4c6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d454:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d456:	f04f 32ff 	mov.w	r2, #4294967295
 800d45a:	69f9      	ldr	r1, [r7, #28]
 800d45c:	6938      	ldr	r0, [r7, #16]
 800d45e:	f7ff fe4f 	bl	800d100 <put_fat>
 800d462:	4603      	mov	r3, r0
 800d464:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d466:	7dfb      	ldrb	r3, [r7, #23]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d109      	bne.n	800d480 <create_chain+0xe2>
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d006      	beq.n	800d480 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d472:	69fa      	ldr	r2, [r7, #28]
 800d474:	6839      	ldr	r1, [r7, #0]
 800d476:	6938      	ldr	r0, [r7, #16]
 800d478:	f7ff fe42 	bl	800d100 <put_fat>
 800d47c:	4603      	mov	r3, r0
 800d47e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d480:	7dfb      	ldrb	r3, [r7, #23]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d116      	bne.n	800d4b4 <create_chain+0x116>
		fs->last_clst = ncl;
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	69fa      	ldr	r2, [r7, #28]
 800d48a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	695a      	ldr	r2, [r3, #20]
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	699b      	ldr	r3, [r3, #24]
 800d494:	3b02      	subs	r3, #2
 800d496:	429a      	cmp	r2, r3
 800d498:	d804      	bhi.n	800d4a4 <create_chain+0x106>
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	695b      	ldr	r3, [r3, #20]
 800d49e:	1e5a      	subs	r2, r3, #1
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	791b      	ldrb	r3, [r3, #4]
 800d4a8:	f043 0301 	orr.w	r3, r3, #1
 800d4ac:	b2da      	uxtb	r2, r3
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	711a      	strb	r2, [r3, #4]
 800d4b2:	e007      	b.n	800d4c4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d4b4:	7dfb      	ldrb	r3, [r7, #23]
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d102      	bne.n	800d4c0 <create_chain+0x122>
 800d4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d4be:	e000      	b.n	800d4c2 <create_chain+0x124>
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d4c4:	69fb      	ldr	r3, [r7, #28]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3720      	adds	r7, #32
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d4ce:	b480      	push	{r7}
 800d4d0:	b087      	sub	sp, #28
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
 800d4d6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4e2:	3304      	adds	r3, #4
 800d4e4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	0a5b      	lsrs	r3, r3, #9
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	8952      	ldrh	r2, [r2, #10]
 800d4ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4f2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	1d1a      	adds	r2, r3, #4
 800d4f8:	613a      	str	r2, [r7, #16]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <clmt_clust+0x3a>
 800d504:	2300      	movs	r3, #0
 800d506:	e010      	b.n	800d52a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d307      	bcc.n	800d520 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d510:	697a      	ldr	r2, [r7, #20]
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	1ad3      	subs	r3, r2, r3
 800d516:	617b      	str	r3, [r7, #20]
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	3304      	adds	r3, #4
 800d51c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d51e:	e7e9      	b.n	800d4f4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d520:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	4413      	add	r3, r2
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	371c      	adds	r7, #28
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr

0800d536 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d536:	b580      	push	{r7, lr}
 800d538:	b086      	sub	sp, #24
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
 800d53e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d54c:	d204      	bcs.n	800d558 <dir_sdi+0x22>
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	f003 031f 	and.w	r3, r3, #31
 800d554:	2b00      	cmp	r3, #0
 800d556:	d001      	beq.n	800d55c <dir_sdi+0x26>
		return FR_INT_ERR;
 800d558:	2302      	movs	r3, #2
 800d55a:	e063      	b.n	800d624 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	683a      	ldr	r2, [r7, #0]
 800d560:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d106      	bne.n	800d57c <dir_sdi+0x46>
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	2b02      	cmp	r3, #2
 800d574:	d902      	bls.n	800d57c <dir_sdi+0x46>
		clst = fs->dirbase;
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d57a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d10c      	bne.n	800d59c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	095b      	lsrs	r3, r3, #5
 800d586:	693a      	ldr	r2, [r7, #16]
 800d588:	8912      	ldrh	r2, [r2, #8]
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d301      	bcc.n	800d592 <dir_sdi+0x5c>
 800d58e:	2302      	movs	r3, #2
 800d590:	e048      	b.n	800d624 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	61da      	str	r2, [r3, #28]
 800d59a:	e029      	b.n	800d5f0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	895b      	ldrh	r3, [r3, #10]
 800d5a0:	025b      	lsls	r3, r3, #9
 800d5a2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d5a4:	e019      	b.n	800d5da <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6979      	ldr	r1, [r7, #20]
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7ff fd01 	bl	800cfb2 <get_fat>
 800d5b0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b8:	d101      	bne.n	800d5be <dir_sdi+0x88>
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e032      	b.n	800d624 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d904      	bls.n	800d5ce <dir_sdi+0x98>
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	699b      	ldr	r3, [r3, #24]
 800d5c8:	697a      	ldr	r2, [r7, #20]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d301      	bcc.n	800d5d2 <dir_sdi+0x9c>
 800d5ce:	2302      	movs	r3, #2
 800d5d0:	e028      	b.n	800d624 <dir_sdi+0xee>
			ofs -= csz;
 800d5d2:	683a      	ldr	r2, [r7, #0]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	1ad3      	subs	r3, r2, r3
 800d5d8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d5da:	683a      	ldr	r2, [r7, #0]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d2e1      	bcs.n	800d5a6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d5e2:	6979      	ldr	r1, [r7, #20]
 800d5e4:	6938      	ldr	r0, [r7, #16]
 800d5e6:	f7ff fcc5 	bl	800cf74 <clust2sect>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	697a      	ldr	r2, [r7, #20]
 800d5f4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	69db      	ldr	r3, [r3, #28]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d101      	bne.n	800d602 <dir_sdi+0xcc>
 800d5fe:	2302      	movs	r3, #2
 800d600:	e010      	b.n	800d624 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	69da      	ldr	r2, [r3, #28]
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	0a5b      	lsrs	r3, r3, #9
 800d60a:	441a      	add	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d61c:	441a      	add	r2, r3
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d622:	2300      	movs	r3, #0
}
 800d624:	4618      	mov	r0, r3
 800d626:	3718      	adds	r7, #24
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	695b      	ldr	r3, [r3, #20]
 800d640:	3320      	adds	r3, #32
 800d642:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	69db      	ldr	r3, [r3, #28]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d003      	beq.n	800d654 <dir_next+0x28>
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d652:	d301      	bcc.n	800d658 <dir_next+0x2c>
 800d654:	2304      	movs	r3, #4
 800d656:	e0aa      	b.n	800d7ae <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d65e:	2b00      	cmp	r3, #0
 800d660:	f040 8098 	bne.w	800d794 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	69db      	ldr	r3, [r3, #28]
 800d668:	1c5a      	adds	r2, r3, #1
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	699b      	ldr	r3, [r3, #24]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10b      	bne.n	800d68e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	095b      	lsrs	r3, r3, #5
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	8912      	ldrh	r2, [r2, #8]
 800d67e:	4293      	cmp	r3, r2
 800d680:	f0c0 8088 	bcc.w	800d794 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	61da      	str	r2, [r3, #28]
 800d68a:	2304      	movs	r3, #4
 800d68c:	e08f      	b.n	800d7ae <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	0a5b      	lsrs	r3, r3, #9
 800d692:	68fa      	ldr	r2, [r7, #12]
 800d694:	8952      	ldrh	r2, [r2, #10]
 800d696:	3a01      	subs	r2, #1
 800d698:	4013      	ands	r3, r2
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d17a      	bne.n	800d794 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	699b      	ldr	r3, [r3, #24]
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	4610      	mov	r0, r2
 800d6a8:	f7ff fc83 	bl	800cfb2 <get_fat>
 800d6ac:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d801      	bhi.n	800d6b8 <dir_next+0x8c>
 800d6b4:	2302      	movs	r3, #2
 800d6b6:	e07a      	b.n	800d7ae <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6be:	d101      	bne.n	800d6c4 <dir_next+0x98>
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	e074      	b.n	800d7ae <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	699b      	ldr	r3, [r3, #24]
 800d6c8:	697a      	ldr	r2, [r7, #20]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d358      	bcc.n	800d780 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d104      	bne.n	800d6de <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	61da      	str	r2, [r3, #28]
 800d6da:	2304      	movs	r3, #4
 800d6dc:	e067      	b.n	800d7ae <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	699b      	ldr	r3, [r3, #24]
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	f7ff fe59 	bl	800d39e <create_chain>
 800d6ec:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d101      	bne.n	800d6f8 <dir_next+0xcc>
 800d6f4:	2307      	movs	r3, #7
 800d6f6:	e05a      	b.n	800d7ae <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d101      	bne.n	800d702 <dir_next+0xd6>
 800d6fe:	2302      	movs	r3, #2
 800d700:	e055      	b.n	800d7ae <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d708:	d101      	bne.n	800d70e <dir_next+0xe2>
 800d70a:	2301      	movs	r3, #1
 800d70c:	e04f      	b.n	800d7ae <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d70e:	68f8      	ldr	r0, [r7, #12]
 800d710:	f7ff fb50 	bl	800cdb4 <sync_window>
 800d714:	4603      	mov	r3, r0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d001      	beq.n	800d71e <dir_next+0xf2>
 800d71a:	2301      	movs	r3, #1
 800d71c:	e047      	b.n	800d7ae <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	3334      	adds	r3, #52	@ 0x34
 800d722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d726:	2100      	movs	r1, #0
 800d728:	4618      	mov	r0, r3
 800d72a:	f7ff f97a 	bl	800ca22 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d72e:	2300      	movs	r3, #0
 800d730:	613b      	str	r3, [r7, #16]
 800d732:	6979      	ldr	r1, [r7, #20]
 800d734:	68f8      	ldr	r0, [r7, #12]
 800d736:	f7ff fc1d 	bl	800cf74 <clust2sect>
 800d73a:	4602      	mov	r2, r0
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	631a      	str	r2, [r3, #48]	@ 0x30
 800d740:	e012      	b.n	800d768 <dir_next+0x13c>
						fs->wflag = 1;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2201      	movs	r2, #1
 800d746:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f7ff fb33 	bl	800cdb4 <sync_window>
 800d74e:	4603      	mov	r3, r0
 800d750:	2b00      	cmp	r3, #0
 800d752:	d001      	beq.n	800d758 <dir_next+0x12c>
 800d754:	2301      	movs	r3, #1
 800d756:	e02a      	b.n	800d7ae <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	3301      	adds	r3, #1
 800d75c:	613b      	str	r3, [r7, #16]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d762:	1c5a      	adds	r2, r3, #1
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	631a      	str	r2, [r3, #48]	@ 0x30
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	895b      	ldrh	r3, [r3, #10]
 800d76c:	461a      	mov	r2, r3
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	4293      	cmp	r3, r2
 800d772:	d3e6      	bcc.n	800d742 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	1ad2      	subs	r2, r2, r3
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	697a      	ldr	r2, [r7, #20]
 800d784:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d786:	6979      	ldr	r1, [r7, #20]
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f7ff fbf3 	bl	800cf74 <clust2sect>
 800d78e:	4602      	mov	r2, r0
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	68ba      	ldr	r2, [r7, #8]
 800d798:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7a6:	441a      	add	r2, r3
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d7ac:	2300      	movs	r3, #0
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3718      	adds	r7, #24
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b086      	sub	sp, #24
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
 800d7be:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d7c6:	2100      	movs	r1, #0
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f7ff feb4 	bl	800d536 <dir_sdi>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d7d2:	7dfb      	ldrb	r3, [r7, #23]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d12b      	bne.n	800d830 <dir_alloc+0x7a>
		n = 0;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	69db      	ldr	r3, [r3, #28]
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	68f8      	ldr	r0, [r7, #12]
 800d7e4:	f7ff fb2a 	bl	800ce3c <move_window>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d7ec:	7dfb      	ldrb	r3, [r7, #23]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d11d      	bne.n	800d82e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6a1b      	ldr	r3, [r3, #32]
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	2be5      	cmp	r3, #229	@ 0xe5
 800d7fa:	d004      	beq.n	800d806 <dir_alloc+0x50>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6a1b      	ldr	r3, [r3, #32]
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d107      	bne.n	800d816 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	3301      	adds	r3, #1
 800d80a:	613b      	str	r3, [r7, #16]
 800d80c:	693a      	ldr	r2, [r7, #16]
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	429a      	cmp	r2, r3
 800d812:	d102      	bne.n	800d81a <dir_alloc+0x64>
 800d814:	e00c      	b.n	800d830 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d816:	2300      	movs	r3, #0
 800d818:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d81a:	2101      	movs	r1, #1
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f7ff ff05 	bl	800d62c <dir_next>
 800d822:	4603      	mov	r3, r0
 800d824:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d826:	7dfb      	ldrb	r3, [r7, #23]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d0d7      	beq.n	800d7dc <dir_alloc+0x26>
 800d82c:	e000      	b.n	800d830 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d82e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d830:	7dfb      	ldrb	r3, [r7, #23]
 800d832:	2b04      	cmp	r3, #4
 800d834:	d101      	bne.n	800d83a <dir_alloc+0x84>
 800d836:	2307      	movs	r3, #7
 800d838:	75fb      	strb	r3, [r7, #23]
	return res;
 800d83a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3718      	adds	r7, #24
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	331a      	adds	r3, #26
 800d852:	4618      	mov	r0, r3
 800d854:	f7ff f842 	bl	800c8dc <ld_word>
 800d858:	4603      	mov	r3, r0
 800d85a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	2b03      	cmp	r3, #3
 800d862:	d109      	bne.n	800d878 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	3314      	adds	r3, #20
 800d868:	4618      	mov	r0, r3
 800d86a:	f7ff f837 	bl	800c8dc <ld_word>
 800d86e:	4603      	mov	r3, r0
 800d870:	041b      	lsls	r3, r3, #16
 800d872:	68fa      	ldr	r2, [r7, #12]
 800d874:	4313      	orrs	r3, r2
 800d876:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d878:	68fb      	ldr	r3, [r7, #12]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3710      	adds	r7, #16
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b084      	sub	sp, #16
 800d886:	af00      	add	r7, sp, #0
 800d888:	60f8      	str	r0, [r7, #12]
 800d88a:	60b9      	str	r1, [r7, #8]
 800d88c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	331a      	adds	r3, #26
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	b292      	uxth	r2, r2
 800d896:	4611      	mov	r1, r2
 800d898:	4618      	mov	r0, r3
 800d89a:	f7ff f85a 	bl	800c952 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	2b03      	cmp	r3, #3
 800d8a4:	d109      	bne.n	800d8ba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	f103 0214 	add.w	r2, r3, #20
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	0c1b      	lsrs	r3, r3, #16
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	f7ff f84c 	bl	800c952 <st_word>
	}
}
 800d8ba:	bf00      	nop
 800d8bc:	3710      	adds	r7, #16
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
	...

0800d8c4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d8c4:	b590      	push	{r4, r7, lr}
 800d8c6:	b087      	sub	sp, #28
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	331a      	adds	r3, #26
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7ff f802 	bl	800c8dc <ld_word>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d001      	beq.n	800d8e2 <cmp_lfn+0x1e>
 800d8de:	2300      	movs	r3, #0
 800d8e0:	e059      	b.n	800d996 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d8ea:	1e5a      	subs	r2, r3, #1
 800d8ec:	4613      	mov	r3, r2
 800d8ee:	005b      	lsls	r3, r3, #1
 800d8f0:	4413      	add	r3, r2
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	4413      	add	r3, r2
 800d8f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	81fb      	strh	r3, [r7, #14]
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	613b      	str	r3, [r7, #16]
 800d900:	e033      	b.n	800d96a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d902:	4a27      	ldr	r2, [pc, #156]	@ (800d9a0 <cmp_lfn+0xdc>)
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	4413      	add	r3, r2
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	461a      	mov	r2, r3
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	4413      	add	r3, r2
 800d910:	4618      	mov	r0, r3
 800d912:	f7fe ffe3 	bl	800c8dc <ld_word>
 800d916:	4603      	mov	r3, r0
 800d918:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d91a:	89fb      	ldrh	r3, [r7, #14]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d01a      	beq.n	800d956 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	2bfe      	cmp	r3, #254	@ 0xfe
 800d924:	d812      	bhi.n	800d94c <cmp_lfn+0x88>
 800d926:	89bb      	ldrh	r3, [r7, #12]
 800d928:	4618      	mov	r0, r3
 800d92a:	f002 f99b 	bl	800fc64 <ff_wtoupper>
 800d92e:	4603      	mov	r3, r0
 800d930:	461c      	mov	r4, r3
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	1c5a      	adds	r2, r3, #1
 800d936:	617a      	str	r2, [r7, #20]
 800d938:	005b      	lsls	r3, r3, #1
 800d93a:	687a      	ldr	r2, [r7, #4]
 800d93c:	4413      	add	r3, r2
 800d93e:	881b      	ldrh	r3, [r3, #0]
 800d940:	4618      	mov	r0, r3
 800d942:	f002 f98f 	bl	800fc64 <ff_wtoupper>
 800d946:	4603      	mov	r3, r0
 800d948:	429c      	cmp	r4, r3
 800d94a:	d001      	beq.n	800d950 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d94c:	2300      	movs	r3, #0
 800d94e:	e022      	b.n	800d996 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d950:	89bb      	ldrh	r3, [r7, #12]
 800d952:	81fb      	strh	r3, [r7, #14]
 800d954:	e006      	b.n	800d964 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d956:	89bb      	ldrh	r3, [r7, #12]
 800d958:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d001      	beq.n	800d964 <cmp_lfn+0xa0>
 800d960:	2300      	movs	r3, #0
 800d962:	e018      	b.n	800d996 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	3301      	adds	r3, #1
 800d968:	613b      	str	r3, [r7, #16]
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	2b0c      	cmp	r3, #12
 800d96e:	d9c8      	bls.n	800d902 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00b      	beq.n	800d994 <cmp_lfn+0xd0>
 800d97c:	89fb      	ldrh	r3, [r7, #14]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d008      	beq.n	800d994 <cmp_lfn+0xd0>
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	005b      	lsls	r3, r3, #1
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	4413      	add	r3, r2
 800d98a:	881b      	ldrh	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d001      	beq.n	800d994 <cmp_lfn+0xd0>
 800d990:	2300      	movs	r3, #0
 800d992:	e000      	b.n	800d996 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d994:	2301      	movs	r3, #1
}
 800d996:	4618      	mov	r0, r3
 800d998:	371c      	adds	r7, #28
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd90      	pop	{r4, r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	0801087c 	.word	0x0801087c

0800d9a4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b086      	sub	sp, #24
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	331a      	adds	r3, #26
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fe ff92 	bl	800c8dc <ld_word>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d001      	beq.n	800d9c2 <pick_lfn+0x1e>
 800d9be:	2300      	movs	r3, #0
 800d9c0:	e04d      	b.n	800da5e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9ca:	1e5a      	subs	r2, r3, #1
 800d9cc:	4613      	mov	r3, r2
 800d9ce:	005b      	lsls	r3, r3, #1
 800d9d0:	4413      	add	r3, r2
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	4413      	add	r3, r2
 800d9d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d9d8:	2301      	movs	r3, #1
 800d9da:	81fb      	strh	r3, [r7, #14]
 800d9dc:	2300      	movs	r3, #0
 800d9de:	613b      	str	r3, [r7, #16]
 800d9e0:	e028      	b.n	800da34 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d9e2:	4a21      	ldr	r2, [pc, #132]	@ (800da68 <pick_lfn+0xc4>)
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	4413      	add	r3, r2
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7fe ff73 	bl	800c8dc <ld_word>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d9fa:	89fb      	ldrh	r3, [r7, #14]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d00f      	beq.n	800da20 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	2bfe      	cmp	r3, #254	@ 0xfe
 800da04:	d901      	bls.n	800da0a <pick_lfn+0x66>
 800da06:	2300      	movs	r3, #0
 800da08:	e029      	b.n	800da5e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800da0a:	89bb      	ldrh	r3, [r7, #12]
 800da0c:	81fb      	strh	r3, [r7, #14]
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	1c5a      	adds	r2, r3, #1
 800da12:	617a      	str	r2, [r7, #20]
 800da14:	005b      	lsls	r3, r3, #1
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	4413      	add	r3, r2
 800da1a:	89fa      	ldrh	r2, [r7, #14]
 800da1c:	801a      	strh	r2, [r3, #0]
 800da1e:	e006      	b.n	800da2e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800da20:	89bb      	ldrh	r3, [r7, #12]
 800da22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da26:	4293      	cmp	r3, r2
 800da28:	d001      	beq.n	800da2e <pick_lfn+0x8a>
 800da2a:	2300      	movs	r3, #0
 800da2c:	e017      	b.n	800da5e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	3301      	adds	r3, #1
 800da32:	613b      	str	r3, [r7, #16]
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	2b0c      	cmp	r3, #12
 800da38:	d9d3      	bls.n	800d9e2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00a      	beq.n	800da5c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	2bfe      	cmp	r3, #254	@ 0xfe
 800da4a:	d901      	bls.n	800da50 <pick_lfn+0xac>
 800da4c:	2300      	movs	r3, #0
 800da4e:	e006      	b.n	800da5e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	005b      	lsls	r3, r3, #1
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	4413      	add	r3, r2
 800da58:	2200      	movs	r2, #0
 800da5a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800da5c:	2301      	movs	r3, #1
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3718      	adds	r7, #24
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	0801087c 	.word	0x0801087c

0800da6c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b088      	sub	sp, #32
 800da70:	af00      	add	r7, sp, #0
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	4611      	mov	r1, r2
 800da78:	461a      	mov	r2, r3
 800da7a:	460b      	mov	r3, r1
 800da7c:	71fb      	strb	r3, [r7, #7]
 800da7e:	4613      	mov	r3, r2
 800da80:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	330d      	adds	r3, #13
 800da86:	79ba      	ldrb	r2, [r7, #6]
 800da88:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	330b      	adds	r3, #11
 800da8e:	220f      	movs	r2, #15
 800da90:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	330c      	adds	r3, #12
 800da96:	2200      	movs	r2, #0
 800da98:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	331a      	adds	r3, #26
 800da9e:	2100      	movs	r1, #0
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7fe ff56 	bl	800c952 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800daa6:	79fb      	ldrb	r3, [r7, #7]
 800daa8:	1e5a      	subs	r2, r3, #1
 800daaa:	4613      	mov	r3, r2
 800daac:	005b      	lsls	r3, r3, #1
 800daae:	4413      	add	r3, r2
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	4413      	add	r3, r2
 800dab4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800dab6:	2300      	movs	r3, #0
 800dab8:	82fb      	strh	r3, [r7, #22]
 800daba:	2300      	movs	r3, #0
 800dabc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800dabe:	8afb      	ldrh	r3, [r7, #22]
 800dac0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d007      	beq.n	800dad8 <put_lfn+0x6c>
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	1c5a      	adds	r2, r3, #1
 800dacc:	61fa      	str	r2, [r7, #28]
 800dace:	005b      	lsls	r3, r3, #1
 800dad0:	68fa      	ldr	r2, [r7, #12]
 800dad2:	4413      	add	r3, r2
 800dad4:	881b      	ldrh	r3, [r3, #0]
 800dad6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800dad8:	4a17      	ldr	r2, [pc, #92]	@ (800db38 <put_lfn+0xcc>)
 800dada:	69bb      	ldr	r3, [r7, #24]
 800dadc:	4413      	add	r3, r2
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	461a      	mov	r2, r3
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	4413      	add	r3, r2
 800dae6:	8afa      	ldrh	r2, [r7, #22]
 800dae8:	4611      	mov	r1, r2
 800daea:	4618      	mov	r0, r3
 800daec:	f7fe ff31 	bl	800c952 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800daf0:	8afb      	ldrh	r3, [r7, #22]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d102      	bne.n	800dafc <put_lfn+0x90>
 800daf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dafa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	3301      	adds	r3, #1
 800db00:	61bb      	str	r3, [r7, #24]
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	2b0c      	cmp	r3, #12
 800db06:	d9da      	bls.n	800dabe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800db08:	8afb      	ldrh	r3, [r7, #22]
 800db0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db0e:	4293      	cmp	r3, r2
 800db10:	d006      	beq.n	800db20 <put_lfn+0xb4>
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	005b      	lsls	r3, r3, #1
 800db16:	68fa      	ldr	r2, [r7, #12]
 800db18:	4413      	add	r3, r2
 800db1a:	881b      	ldrh	r3, [r3, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d103      	bne.n	800db28 <put_lfn+0xbc>
 800db20:	79fb      	ldrb	r3, [r7, #7]
 800db22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db26:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	79fa      	ldrb	r2, [r7, #7]
 800db2c:	701a      	strb	r2, [r3, #0]
}
 800db2e:	bf00      	nop
 800db30:	3720      	adds	r7, #32
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	0801087c 	.word	0x0801087c

0800db3c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b08c      	sub	sp, #48	@ 0x30
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	607a      	str	r2, [r7, #4]
 800db48:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800db4a:	220b      	movs	r2, #11
 800db4c:	68b9      	ldr	r1, [r7, #8]
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f7fe ff46 	bl	800c9e0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	2b05      	cmp	r3, #5
 800db58:	d92b      	bls.n	800dbb2 <gen_numname+0x76>
		sr = seq;
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800db5e:	e022      	b.n	800dba6 <gen_numname+0x6a>
			wc = *lfn++;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	1c9a      	adds	r2, r3, #2
 800db64:	607a      	str	r2, [r7, #4]
 800db66:	881b      	ldrh	r3, [r3, #0]
 800db68:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800db6a:	2300      	movs	r3, #0
 800db6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db6e:	e017      	b.n	800dba0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	005a      	lsls	r2, r3, #1
 800db74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db76:	f003 0301 	and.w	r3, r3, #1
 800db7a:	4413      	add	r3, r2
 800db7c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800db7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db80:	085b      	lsrs	r3, r3, #1
 800db82:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d005      	beq.n	800db9a <gen_numname+0x5e>
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800db94:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800db98:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800db9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db9c:	3301      	adds	r3, #1
 800db9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dba2:	2b0f      	cmp	r3, #15
 800dba4:	d9e4      	bls.n	800db70 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	881b      	ldrh	r3, [r3, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d1d8      	bne.n	800db60 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800dbb2:	2307      	movs	r3, #7
 800dbb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	f003 030f 	and.w	r3, r3, #15
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	3330      	adds	r3, #48	@ 0x30
 800dbc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800dbc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dbca:	2b39      	cmp	r3, #57	@ 0x39
 800dbcc:	d904      	bls.n	800dbd8 <gen_numname+0x9c>
 800dbce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dbd2:	3307      	adds	r3, #7
 800dbd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800dbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbda:	1e5a      	subs	r2, r3, #1
 800dbdc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800dbde:	3330      	adds	r3, #48	@ 0x30
 800dbe0:	443b      	add	r3, r7
 800dbe2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800dbe6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	091b      	lsrs	r3, r3, #4
 800dbee:	603b      	str	r3, [r7, #0]
	} while (seq);
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1df      	bne.n	800dbb6 <gen_numname+0x7a>
	ns[i] = '~';
 800dbf6:	f107 0214 	add.w	r2, r7, #20
 800dbfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbfc:	4413      	add	r3, r2
 800dbfe:	227e      	movs	r2, #126	@ 0x7e
 800dc00:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800dc02:	2300      	movs	r3, #0
 800dc04:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc06:	e002      	b.n	800dc0e <gen_numname+0xd2>
 800dc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d205      	bcs.n	800dc22 <gen_numname+0xe6>
 800dc16:	68fa      	ldr	r2, [r7, #12]
 800dc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc1a:	4413      	add	r3, r2
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	2b20      	cmp	r3, #32
 800dc20:	d1f2      	bne.n	800dc08 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800dc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc24:	2b07      	cmp	r3, #7
 800dc26:	d807      	bhi.n	800dc38 <gen_numname+0xfc>
 800dc28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc2a:	1c5a      	adds	r2, r3, #1
 800dc2c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800dc2e:	3330      	adds	r3, #48	@ 0x30
 800dc30:	443b      	add	r3, r7
 800dc32:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800dc36:	e000      	b.n	800dc3a <gen_numname+0xfe>
 800dc38:	2120      	movs	r1, #32
 800dc3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc3c:	1c5a      	adds	r2, r3, #1
 800dc3e:	627a      	str	r2, [r7, #36]	@ 0x24
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	4413      	add	r3, r2
 800dc44:	460a      	mov	r2, r1
 800dc46:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800dc48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc4a:	2b07      	cmp	r3, #7
 800dc4c:	d9e9      	bls.n	800dc22 <gen_numname+0xe6>
}
 800dc4e:	bf00      	nop
 800dc50:	bf00      	nop
 800dc52:	3730      	adds	r7, #48	@ 0x30
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b085      	sub	sp, #20
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800dc60:	2300      	movs	r3, #0
 800dc62:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800dc64:	230b      	movs	r3, #11
 800dc66:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800dc68:	7bfb      	ldrb	r3, [r7, #15]
 800dc6a:	b2da      	uxtb	r2, r3
 800dc6c:	0852      	lsrs	r2, r2, #1
 800dc6e:	01db      	lsls	r3, r3, #7
 800dc70:	4313      	orrs	r3, r2
 800dc72:	b2da      	uxtb	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	1c59      	adds	r1, r3, #1
 800dc78:	6079      	str	r1, [r7, #4]
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	3b01      	subs	r3, #1
 800dc84:	60bb      	str	r3, [r7, #8]
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d1ed      	bne.n	800dc68 <sum_sfn+0x10>
	return sum;
 800dc8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3714      	adds	r7, #20
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr

0800dc9a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800dc9a:	b580      	push	{r7, lr}
 800dc9c:	b086      	sub	sp, #24
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
 800dca2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800dca4:	2304      	movs	r3, #4
 800dca6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800dcae:	23ff      	movs	r3, #255	@ 0xff
 800dcb0:	757b      	strb	r3, [r7, #21]
 800dcb2:	23ff      	movs	r3, #255	@ 0xff
 800dcb4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800dcb6:	e081      	b.n	800ddbc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	69db      	ldr	r3, [r3, #28]
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	6938      	ldr	r0, [r7, #16]
 800dcc0:	f7ff f8bc 	bl	800ce3c <move_window>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dcc8:	7dfb      	ldrb	r3, [r7, #23]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d17c      	bne.n	800ddc8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6a1b      	ldr	r3, [r3, #32]
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800dcd6:	7dbb      	ldrb	r3, [r7, #22]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d102      	bne.n	800dce2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800dcdc:	2304      	movs	r3, #4
 800dcde:	75fb      	strb	r3, [r7, #23]
 800dce0:	e077      	b.n	800ddd2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6a1b      	ldr	r3, [r3, #32]
 800dce6:	330b      	adds	r3, #11
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dcee:	73fb      	strb	r3, [r7, #15]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	7bfa      	ldrb	r2, [r7, #15]
 800dcf4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800dcf6:	7dbb      	ldrb	r3, [r7, #22]
 800dcf8:	2be5      	cmp	r3, #229	@ 0xe5
 800dcfa:	d00e      	beq.n	800dd1a <dir_read+0x80>
 800dcfc:	7dbb      	ldrb	r3, [r7, #22]
 800dcfe:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd00:	d00b      	beq.n	800dd1a <dir_read+0x80>
 800dd02:	7bfb      	ldrb	r3, [r7, #15]
 800dd04:	f023 0320 	bic.w	r3, r3, #32
 800dd08:	2b08      	cmp	r3, #8
 800dd0a:	bf0c      	ite	eq
 800dd0c:	2301      	moveq	r3, #1
 800dd0e:	2300      	movne	r3, #0
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	461a      	mov	r2, r3
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d002      	beq.n	800dd20 <dir_read+0x86>
				ord = 0xFF;
 800dd1a:	23ff      	movs	r3, #255	@ 0xff
 800dd1c:	757b      	strb	r3, [r7, #21]
 800dd1e:	e044      	b.n	800ddaa <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800dd20:	7bfb      	ldrb	r3, [r7, #15]
 800dd22:	2b0f      	cmp	r3, #15
 800dd24:	d12f      	bne.n	800dd86 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800dd26:	7dbb      	ldrb	r3, [r7, #22]
 800dd28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00d      	beq.n	800dd4c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6a1b      	ldr	r3, [r3, #32]
 800dd34:	7b5b      	ldrb	r3, [r3, #13]
 800dd36:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800dd38:	7dbb      	ldrb	r3, [r7, #22]
 800dd3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd3e:	75bb      	strb	r3, [r7, #22]
 800dd40:	7dbb      	ldrb	r3, [r7, #22]
 800dd42:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	695a      	ldr	r2, [r3, #20]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dd4c:	7dba      	ldrb	r2, [r7, #22]
 800dd4e:	7d7b      	ldrb	r3, [r7, #21]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d115      	bne.n	800dd80 <dir_read+0xe6>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6a1b      	ldr	r3, [r3, #32]
 800dd58:	330d      	adds	r3, #13
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	7d3a      	ldrb	r2, [r7, #20]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d10e      	bne.n	800dd80 <dir_read+0xe6>
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	68da      	ldr	r2, [r3, #12]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6a1b      	ldr	r3, [r3, #32]
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	f7ff fe19 	bl	800d9a4 <pick_lfn>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d003      	beq.n	800dd80 <dir_read+0xe6>
 800dd78:	7d7b      	ldrb	r3, [r7, #21]
 800dd7a:	3b01      	subs	r3, #1
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	e000      	b.n	800dd82 <dir_read+0xe8>
 800dd80:	23ff      	movs	r3, #255	@ 0xff
 800dd82:	757b      	strb	r3, [r7, #21]
 800dd84:	e011      	b.n	800ddaa <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800dd86:	7d7b      	ldrb	r3, [r7, #21]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d109      	bne.n	800dda0 <dir_read+0x106>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6a1b      	ldr	r3, [r3, #32]
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7ff ff61 	bl	800dc58 <sum_sfn>
 800dd96:	4603      	mov	r3, r0
 800dd98:	461a      	mov	r2, r3
 800dd9a:	7d3b      	ldrb	r3, [r7, #20]
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d015      	beq.n	800ddcc <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f04f 32ff 	mov.w	r2, #4294967295
 800dda6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800dda8:	e010      	b.n	800ddcc <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ddaa:	2100      	movs	r1, #0
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7ff fc3d 	bl	800d62c <dir_next>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ddb6:	7dfb      	ldrb	r3, [r7, #23]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d109      	bne.n	800ddd0 <dir_read+0x136>
	while (dp->sect) {
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	69db      	ldr	r3, [r3, #28]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	f47f af79 	bne.w	800dcb8 <dir_read+0x1e>
 800ddc6:	e004      	b.n	800ddd2 <dir_read+0x138>
		if (res != FR_OK) break;
 800ddc8:	bf00      	nop
 800ddca:	e002      	b.n	800ddd2 <dir_read+0x138>
					break;
 800ddcc:	bf00      	nop
 800ddce:	e000      	b.n	800ddd2 <dir_read+0x138>
		if (res != FR_OK) break;
 800ddd0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ddd2:	7dfb      	ldrb	r3, [r7, #23]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d002      	beq.n	800ddde <dir_read+0x144>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	61da      	str	r2, [r3, #28]
	return res;
 800ddde:	7dfb      	ldrb	r3, [r7, #23]
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3718      	adds	r7, #24
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b086      	sub	sp, #24
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f7ff fb9c 	bl	800d536 <dir_sdi>
 800ddfe:	4603      	mov	r3, r0
 800de00:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800de02:	7dfb      	ldrb	r3, [r7, #23]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d001      	beq.n	800de0c <dir_find+0x24>
 800de08:	7dfb      	ldrb	r3, [r7, #23]
 800de0a:	e0a9      	b.n	800df60 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800de0c:	23ff      	movs	r3, #255	@ 0xff
 800de0e:	753b      	strb	r3, [r7, #20]
 800de10:	7d3b      	ldrb	r3, [r7, #20]
 800de12:	757b      	strb	r3, [r7, #21]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f04f 32ff 	mov.w	r2, #4294967295
 800de1a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	69db      	ldr	r3, [r3, #28]
 800de20:	4619      	mov	r1, r3
 800de22:	6938      	ldr	r0, [r7, #16]
 800de24:	f7ff f80a 	bl	800ce3c <move_window>
 800de28:	4603      	mov	r3, r0
 800de2a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800de2c:	7dfb      	ldrb	r3, [r7, #23]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	f040 8090 	bne.w	800df54 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6a1b      	ldr	r3, [r3, #32]
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800de3c:	7dbb      	ldrb	r3, [r7, #22]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d102      	bne.n	800de48 <dir_find+0x60>
 800de42:	2304      	movs	r3, #4
 800de44:	75fb      	strb	r3, [r7, #23]
 800de46:	e08a      	b.n	800df5e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6a1b      	ldr	r3, [r3, #32]
 800de4c:	330b      	adds	r3, #11
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de54:	73fb      	strb	r3, [r7, #15]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	7bfa      	ldrb	r2, [r7, #15]
 800de5a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800de5c:	7dbb      	ldrb	r3, [r7, #22]
 800de5e:	2be5      	cmp	r3, #229	@ 0xe5
 800de60:	d007      	beq.n	800de72 <dir_find+0x8a>
 800de62:	7bfb      	ldrb	r3, [r7, #15]
 800de64:	f003 0308 	and.w	r3, r3, #8
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d009      	beq.n	800de80 <dir_find+0x98>
 800de6c:	7bfb      	ldrb	r3, [r7, #15]
 800de6e:	2b0f      	cmp	r3, #15
 800de70:	d006      	beq.n	800de80 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800de72:	23ff      	movs	r3, #255	@ 0xff
 800de74:	757b      	strb	r3, [r7, #21]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f04f 32ff 	mov.w	r2, #4294967295
 800de7c:	631a      	str	r2, [r3, #48]	@ 0x30
 800de7e:	e05e      	b.n	800df3e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800de80:	7bfb      	ldrb	r3, [r7, #15]
 800de82:	2b0f      	cmp	r3, #15
 800de84:	d136      	bne.n	800def4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800de8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de90:	2b00      	cmp	r3, #0
 800de92:	d154      	bne.n	800df3e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800de94:	7dbb      	ldrb	r3, [r7, #22]
 800de96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00d      	beq.n	800deba <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6a1b      	ldr	r3, [r3, #32]
 800dea2:	7b5b      	ldrb	r3, [r3, #13]
 800dea4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800dea6:	7dbb      	ldrb	r3, [r7, #22]
 800dea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800deac:	75bb      	strb	r3, [r7, #22]
 800deae:	7dbb      	ldrb	r3, [r7, #22]
 800deb0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	695a      	ldr	r2, [r3, #20]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800deba:	7dba      	ldrb	r2, [r7, #22]
 800debc:	7d7b      	ldrb	r3, [r7, #21]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d115      	bne.n	800deee <dir_find+0x106>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6a1b      	ldr	r3, [r3, #32]
 800dec6:	330d      	adds	r3, #13
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	7d3a      	ldrb	r2, [r7, #20]
 800decc:	429a      	cmp	r2, r3
 800dece:	d10e      	bne.n	800deee <dir_find+0x106>
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	68da      	ldr	r2, [r3, #12]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6a1b      	ldr	r3, [r3, #32]
 800ded8:	4619      	mov	r1, r3
 800deda:	4610      	mov	r0, r2
 800dedc:	f7ff fcf2 	bl	800d8c4 <cmp_lfn>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d003      	beq.n	800deee <dir_find+0x106>
 800dee6:	7d7b      	ldrb	r3, [r7, #21]
 800dee8:	3b01      	subs	r3, #1
 800deea:	b2db      	uxtb	r3, r3
 800deec:	e000      	b.n	800def0 <dir_find+0x108>
 800deee:	23ff      	movs	r3, #255	@ 0xff
 800def0:	757b      	strb	r3, [r7, #21]
 800def2:	e024      	b.n	800df3e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800def4:	7d7b      	ldrb	r3, [r7, #21]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d109      	bne.n	800df0e <dir_find+0x126>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6a1b      	ldr	r3, [r3, #32]
 800defe:	4618      	mov	r0, r3
 800df00:	f7ff feaa 	bl	800dc58 <sum_sfn>
 800df04:	4603      	mov	r3, r0
 800df06:	461a      	mov	r2, r3
 800df08:	7d3b      	ldrb	r3, [r7, #20]
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d024      	beq.n	800df58 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800df14:	f003 0301 	and.w	r3, r3, #1
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d10a      	bne.n	800df32 <dir_find+0x14a>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6a18      	ldr	r0, [r3, #32]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	3324      	adds	r3, #36	@ 0x24
 800df24:	220b      	movs	r2, #11
 800df26:	4619      	mov	r1, r3
 800df28:	f7fe fd96 	bl	800ca58 <mem_cmp>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d014      	beq.n	800df5c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800df32:	23ff      	movs	r3, #255	@ 0xff
 800df34:	757b      	strb	r3, [r7, #21]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f04f 32ff 	mov.w	r2, #4294967295
 800df3c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800df3e:	2100      	movs	r1, #0
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f7ff fb73 	bl	800d62c <dir_next>
 800df46:	4603      	mov	r3, r0
 800df48:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800df4a:	7dfb      	ldrb	r3, [r7, #23]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f43f af65 	beq.w	800de1c <dir_find+0x34>
 800df52:	e004      	b.n	800df5e <dir_find+0x176>
		if (res != FR_OK) break;
 800df54:	bf00      	nop
 800df56:	e002      	b.n	800df5e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800df58:	bf00      	nop
 800df5a:	e000      	b.n	800df5e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800df5c:	bf00      	nop

	return res;
 800df5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800df60:	4618      	mov	r0, r3
 800df62:	3718      	adds	r7, #24
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b08c      	sub	sp, #48	@ 0x30
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800df7c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d001      	beq.n	800df88 <dir_register+0x20>
 800df84:	2306      	movs	r3, #6
 800df86:	e0e0      	b.n	800e14a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800df88:	2300      	movs	r3, #0
 800df8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800df8c:	e002      	b.n	800df94 <dir_register+0x2c>
 800df8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df90:	3301      	adds	r3, #1
 800df92:	627b      	str	r3, [r7, #36]	@ 0x24
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	68da      	ldr	r2, [r3, #12]
 800df98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df9a:	005b      	lsls	r3, r3, #1
 800df9c:	4413      	add	r3, r2
 800df9e:	881b      	ldrh	r3, [r3, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1f4      	bne.n	800df8e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800dfaa:	f107 030c 	add.w	r3, r7, #12
 800dfae:	220c      	movs	r2, #12
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7fe fd15 	bl	800c9e0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800dfb6:	7dfb      	ldrb	r3, [r7, #23]
 800dfb8:	f003 0301 	and.w	r3, r3, #1
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d032      	beq.n	800e026 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2240      	movs	r2, #64	@ 0x40
 800dfc4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800dfc8:	2301      	movs	r3, #1
 800dfca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dfcc:	e016      	b.n	800dffc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	68da      	ldr	r2, [r3, #12]
 800dfd8:	f107 010c 	add.w	r1, r7, #12
 800dfdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfde:	f7ff fdad 	bl	800db3c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f7ff ff00 	bl	800dde8 <dir_find>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800dfee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d106      	bne.n	800e004 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800dff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dff8:	3301      	adds	r3, #1
 800dffa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dffe:	2b63      	cmp	r3, #99	@ 0x63
 800e000:	d9e5      	bls.n	800dfce <dir_register+0x66>
 800e002:	e000      	b.n	800e006 <dir_register+0x9e>
			if (res != FR_OK) break;
 800e004:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e008:	2b64      	cmp	r3, #100	@ 0x64
 800e00a:	d101      	bne.n	800e010 <dir_register+0xa8>
 800e00c:	2307      	movs	r3, #7
 800e00e:	e09c      	b.n	800e14a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e010:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e014:	2b04      	cmp	r3, #4
 800e016:	d002      	beq.n	800e01e <dir_register+0xb6>
 800e018:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e01c:	e095      	b.n	800e14a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e01e:	7dfa      	ldrb	r2, [r7, #23]
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e026:	7dfb      	ldrb	r3, [r7, #23]
 800e028:	f003 0302 	and.w	r3, r3, #2
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d007      	beq.n	800e040 <dir_register+0xd8>
 800e030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e032:	330c      	adds	r3, #12
 800e034:	4a47      	ldr	r2, [pc, #284]	@ (800e154 <dir_register+0x1ec>)
 800e036:	fba2 2303 	umull	r2, r3, r2, r3
 800e03a:	089b      	lsrs	r3, r3, #2
 800e03c:	3301      	adds	r3, #1
 800e03e:	e000      	b.n	800e042 <dir_register+0xda>
 800e040:	2301      	movs	r3, #1
 800e042:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e044:	6a39      	ldr	r1, [r7, #32]
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f7ff fbb5 	bl	800d7b6 <dir_alloc>
 800e04c:	4603      	mov	r3, r0
 800e04e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e052:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e056:	2b00      	cmp	r3, #0
 800e058:	d148      	bne.n	800e0ec <dir_register+0x184>
 800e05a:	6a3b      	ldr	r3, [r7, #32]
 800e05c:	3b01      	subs	r3, #1
 800e05e:	623b      	str	r3, [r7, #32]
 800e060:	6a3b      	ldr	r3, [r7, #32]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d042      	beq.n	800e0ec <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	695a      	ldr	r2, [r3, #20]
 800e06a:	6a3b      	ldr	r3, [r7, #32]
 800e06c:	015b      	lsls	r3, r3, #5
 800e06e:	1ad3      	subs	r3, r2, r3
 800e070:	4619      	mov	r1, r3
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f7ff fa5f 	bl	800d536 <dir_sdi>
 800e078:	4603      	mov	r3, r0
 800e07a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e07e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e082:	2b00      	cmp	r3, #0
 800e084:	d132      	bne.n	800e0ec <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	3324      	adds	r3, #36	@ 0x24
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7ff fde4 	bl	800dc58 <sum_sfn>
 800e090:	4603      	mov	r3, r0
 800e092:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	69db      	ldr	r3, [r3, #28]
 800e098:	4619      	mov	r1, r3
 800e09a:	69f8      	ldr	r0, [r7, #28]
 800e09c:	f7fe fece 	bl	800ce3c <move_window>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800e0a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d11d      	bne.n	800e0ea <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	68d8      	ldr	r0, [r3, #12]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6a19      	ldr	r1, [r3, #32]
 800e0b6:	6a3b      	ldr	r3, [r7, #32]
 800e0b8:	b2da      	uxtb	r2, r3
 800e0ba:	7efb      	ldrb	r3, [r7, #27]
 800e0bc:	f7ff fcd6 	bl	800da6c <put_lfn>
				fs->wflag = 1;
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e0c6:	2100      	movs	r1, #0
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f7ff faaf 	bl	800d62c <dir_next>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800e0d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d107      	bne.n	800e0ec <dir_register+0x184>
 800e0dc:	6a3b      	ldr	r3, [r7, #32]
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	623b      	str	r3, [r7, #32]
 800e0e2:	6a3b      	ldr	r3, [r7, #32]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d1d5      	bne.n	800e094 <dir_register+0x12c>
 800e0e8:	e000      	b.n	800e0ec <dir_register+0x184>
				if (res != FR_OK) break;
 800e0ea:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e0ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d128      	bne.n	800e146 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	69db      	ldr	r3, [r3, #28]
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	69f8      	ldr	r0, [r7, #28]
 800e0fc:	f7fe fe9e 	bl	800ce3c <move_window>
 800e100:	4603      	mov	r3, r0
 800e102:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e106:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d11b      	bne.n	800e146 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a1b      	ldr	r3, [r3, #32]
 800e112:	2220      	movs	r2, #32
 800e114:	2100      	movs	r1, #0
 800e116:	4618      	mov	r0, r3
 800e118:	f7fe fc83 	bl	800ca22 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6a18      	ldr	r0, [r3, #32]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	3324      	adds	r3, #36	@ 0x24
 800e124:	220b      	movs	r2, #11
 800e126:	4619      	mov	r1, r3
 800e128:	f7fe fc5a 	bl	800c9e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6a1b      	ldr	r3, [r3, #32]
 800e136:	330c      	adds	r3, #12
 800e138:	f002 0218 	and.w	r2, r2, #24
 800e13c:	b2d2      	uxtb	r2, r2
 800e13e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	2201      	movs	r2, #1
 800e144:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e146:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3730      	adds	r7, #48	@ 0x30
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	4ec4ec4f 	.word	0x4ec4ec4f

0800e158 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b088      	sub	sp, #32
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	2200      	movs	r2, #0
 800e16c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	69db      	ldr	r3, [r3, #28]
 800e172:	2b00      	cmp	r3, #0
 800e174:	f000 80ca 	beq.w	800e30c <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e180:	d032      	beq.n	800e1e8 <get_fileinfo+0x90>
			i = j = 0;
 800e182:	2300      	movs	r3, #0
 800e184:	61bb      	str	r3, [r7, #24]
 800e186:	69bb      	ldr	r3, [r7, #24]
 800e188:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e18a:	e01b      	b.n	800e1c4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e18c:	89fb      	ldrh	r3, [r7, #14]
 800e18e:	2100      	movs	r1, #0
 800e190:	4618      	mov	r0, r3
 800e192:	f001 fd2b 	bl	800fbec <ff_convert>
 800e196:	4603      	mov	r3, r0
 800e198:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e19a:	89fb      	ldrh	r3, [r7, #14]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d102      	bne.n	800e1a6 <get_fileinfo+0x4e>
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	61fb      	str	r3, [r7, #28]
 800e1a4:	e01a      	b.n	800e1dc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	2bfe      	cmp	r3, #254	@ 0xfe
 800e1aa:	d902      	bls.n	800e1b2 <get_fileinfo+0x5a>
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	61fb      	str	r3, [r7, #28]
 800e1b0:	e014      	b.n	800e1dc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	1c5a      	adds	r2, r3, #1
 800e1b6:	61fa      	str	r2, [r7, #28]
 800e1b8:	89fa      	ldrh	r2, [r7, #14]
 800e1ba:	b2d1      	uxtb	r1, r2
 800e1bc:	683a      	ldr	r2, [r7, #0]
 800e1be:	4413      	add	r3, r2
 800e1c0:	460a      	mov	r2, r1
 800e1c2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	68da      	ldr	r2, [r3, #12]
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	1c59      	adds	r1, r3, #1
 800e1cc:	61b9      	str	r1, [r7, #24]
 800e1ce:	005b      	lsls	r3, r3, #1
 800e1d0:	4413      	add	r3, r2
 800e1d2:	881b      	ldrh	r3, [r3, #0]
 800e1d4:	81fb      	strh	r3, [r7, #14]
 800e1d6:	89fb      	ldrh	r3, [r7, #14]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d1d7      	bne.n	800e18c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e1dc:	683a      	ldr	r2, [r7, #0]
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	3316      	adds	r3, #22
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	61bb      	str	r3, [r7, #24]
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e1f0:	683a      	ldr	r2, [r7, #0]
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	3316      	adds	r3, #22
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800e1fc:	e04d      	b.n	800e29a <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6a1a      	ldr	r2, [r3, #32]
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	1c59      	adds	r1, r3, #1
 800e206:	61f9      	str	r1, [r7, #28]
 800e208:	4413      	add	r3, r2
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e20e:	7dfb      	ldrb	r3, [r7, #23]
 800e210:	2b20      	cmp	r3, #32
 800e212:	d041      	beq.n	800e298 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e214:	7dfb      	ldrb	r3, [r7, #23]
 800e216:	2b05      	cmp	r3, #5
 800e218:	d101      	bne.n	800e21e <get_fileinfo+0xc6>
 800e21a:	23e5      	movs	r3, #229	@ 0xe5
 800e21c:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	2b09      	cmp	r3, #9
 800e222:	d10f      	bne.n	800e244 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800e224:	89bb      	ldrh	r3, [r7, #12]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d105      	bne.n	800e236 <get_fileinfo+0xde>
 800e22a:	683a      	ldr	r2, [r7, #0]
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	4413      	add	r3, r2
 800e230:	3316      	adds	r3, #22
 800e232:	222e      	movs	r2, #46	@ 0x2e
 800e234:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800e236:	69bb      	ldr	r3, [r7, #24]
 800e238:	1c5a      	adds	r2, r3, #1
 800e23a:	61ba      	str	r2, [r7, #24]
 800e23c:	683a      	ldr	r2, [r7, #0]
 800e23e:	4413      	add	r3, r2
 800e240:	222e      	movs	r2, #46	@ 0x2e
 800e242:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800e244:	683a      	ldr	r2, [r7, #0]
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	4413      	add	r3, r2
 800e24a:	3309      	adds	r3, #9
 800e24c:	7dfa      	ldrb	r2, [r7, #23]
 800e24e:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800e250:	89bb      	ldrh	r3, [r7, #12]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d11c      	bne.n	800e290 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e256:	7dfb      	ldrb	r3, [r7, #23]
 800e258:	2b40      	cmp	r3, #64	@ 0x40
 800e25a:	d913      	bls.n	800e284 <get_fileinfo+0x12c>
 800e25c:	7dfb      	ldrb	r3, [r7, #23]
 800e25e:	2b5a      	cmp	r3, #90	@ 0x5a
 800e260:	d810      	bhi.n	800e284 <get_fileinfo+0x12c>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6a1b      	ldr	r3, [r3, #32]
 800e266:	330c      	adds	r3, #12
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	461a      	mov	r2, r3
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	2b08      	cmp	r3, #8
 800e270:	d901      	bls.n	800e276 <get_fileinfo+0x11e>
 800e272:	2310      	movs	r3, #16
 800e274:	e000      	b.n	800e278 <get_fileinfo+0x120>
 800e276:	2308      	movs	r3, #8
 800e278:	4013      	ands	r3, r2
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d002      	beq.n	800e284 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800e27e:	7dfb      	ldrb	r3, [r7, #23]
 800e280:	3320      	adds	r3, #32
 800e282:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800e284:	683a      	ldr	r2, [r7, #0]
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	4413      	add	r3, r2
 800e28a:	3316      	adds	r3, #22
 800e28c:	7dfa      	ldrb	r2, [r7, #23]
 800e28e:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800e290:	69bb      	ldr	r3, [r7, #24]
 800e292:	3301      	adds	r3, #1
 800e294:	61bb      	str	r3, [r7, #24]
 800e296:	e000      	b.n	800e29a <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800e298:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	2b0a      	cmp	r3, #10
 800e29e:	d9ae      	bls.n	800e1fe <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800e2a0:	89bb      	ldrh	r3, [r7, #12]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d10d      	bne.n	800e2c2 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800e2a6:	683a      	ldr	r2, [r7, #0]
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	4413      	add	r3, r2
 800e2ac:	3316      	adds	r3, #22
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6a1b      	ldr	r3, [r3, #32]
 800e2b6:	330c      	adds	r3, #12
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d101      	bne.n	800e2c2 <get_fileinfo+0x16a>
 800e2be:	2300      	movs	r3, #0
 800e2c0:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e2c2:	683a      	ldr	r2, [r7, #0]
 800e2c4:	69bb      	ldr	r3, [r7, #24]
 800e2c6:	4413      	add	r3, r2
 800e2c8:	3309      	adds	r3, #9
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6a1b      	ldr	r3, [r3, #32]
 800e2d2:	7ada      	ldrb	r2, [r3, #11]
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6a1b      	ldr	r3, [r3, #32]
 800e2dc:	331c      	adds	r3, #28
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7fe fb14 	bl	800c90c <ld_dword>
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6a1b      	ldr	r3, [r3, #32]
 800e2ee:	3316      	adds	r3, #22
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fe fb0b 	bl	800c90c <ld_dword>
 800e2f6:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	80da      	strh	r2, [r3, #6]
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	0c1b      	lsrs	r3, r3, #16
 800e304:	b29a      	uxth	r2, r3
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	809a      	strh	r2, [r3, #4]
 800e30a:	e000      	b.n	800e30e <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e30c:	bf00      	nop
}
 800e30e:	3720      	adds	r7, #32
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}

0800e314 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b08a      	sub	sp, #40	@ 0x28
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	613b      	str	r3, [r7, #16]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	60fb      	str	r3, [r7, #12]
 800e32c:	2300      	movs	r3, #0
 800e32e:	617b      	str	r3, [r7, #20]
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	1c5a      	adds	r2, r3, #1
 800e338:	61ba      	str	r2, [r7, #24]
 800e33a:	693a      	ldr	r2, [r7, #16]
 800e33c:	4413      	add	r3, r2
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e342:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e344:	2b1f      	cmp	r3, #31
 800e346:	d940      	bls.n	800e3ca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e348:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e34a:	2b2f      	cmp	r3, #47	@ 0x2f
 800e34c:	d006      	beq.n	800e35c <create_name+0x48>
 800e34e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e350:	2b5c      	cmp	r3, #92	@ 0x5c
 800e352:	d110      	bne.n	800e376 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e354:	e002      	b.n	800e35c <create_name+0x48>
 800e356:	69bb      	ldr	r3, [r7, #24]
 800e358:	3301      	adds	r3, #1
 800e35a:	61bb      	str	r3, [r7, #24]
 800e35c:	693a      	ldr	r2, [r7, #16]
 800e35e:	69bb      	ldr	r3, [r7, #24]
 800e360:	4413      	add	r3, r2
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	2b2f      	cmp	r3, #47	@ 0x2f
 800e366:	d0f6      	beq.n	800e356 <create_name+0x42>
 800e368:	693a      	ldr	r2, [r7, #16]
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	4413      	add	r3, r2
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	2b5c      	cmp	r3, #92	@ 0x5c
 800e372:	d0f0      	beq.n	800e356 <create_name+0x42>
			break;
 800e374:	e02a      	b.n	800e3cc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	2bfe      	cmp	r3, #254	@ 0xfe
 800e37a:	d901      	bls.n	800e380 <create_name+0x6c>
 800e37c:	2306      	movs	r3, #6
 800e37e:	e17d      	b.n	800e67c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e380:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e382:	b2db      	uxtb	r3, r3
 800e384:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e386:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e388:	2101      	movs	r1, #1
 800e38a:	4618      	mov	r0, r3
 800e38c:	f001 fc2e 	bl	800fbec <ff_convert>
 800e390:	4603      	mov	r3, r0
 800e392:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e394:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e396:	2b00      	cmp	r3, #0
 800e398:	d101      	bne.n	800e39e <create_name+0x8a>
 800e39a:	2306      	movs	r3, #6
 800e39c:	e16e      	b.n	800e67c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e39e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e3a0:	2b7f      	cmp	r3, #127	@ 0x7f
 800e3a2:	d809      	bhi.n	800e3b8 <create_name+0xa4>
 800e3a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	488d      	ldr	r0, [pc, #564]	@ (800e5e0 <create_name+0x2cc>)
 800e3aa:	f7fe fb7c 	bl	800caa6 <chk_chr>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d001      	beq.n	800e3b8 <create_name+0xa4>
 800e3b4:	2306      	movs	r3, #6
 800e3b6:	e161      	b.n	800e67c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	1c5a      	adds	r2, r3, #1
 800e3bc:	617a      	str	r2, [r7, #20]
 800e3be:	005b      	lsls	r3, r3, #1
 800e3c0:	68fa      	ldr	r2, [r7, #12]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e3c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e3c8:	e7b4      	b.n	800e334 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e3ca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e3cc:	693a      	ldr	r2, [r7, #16]
 800e3ce:	69bb      	ldr	r3, [r7, #24]
 800e3d0:	441a      	add	r2, r3
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e3d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e3d8:	2b1f      	cmp	r3, #31
 800e3da:	d801      	bhi.n	800e3e0 <create_name+0xcc>
 800e3dc:	2304      	movs	r3, #4
 800e3de:	e000      	b.n	800e3e2 <create_name+0xce>
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e3e6:	e011      	b.n	800e40c <create_name+0xf8>
		w = lfn[di - 1];
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e3ee:	3b01      	subs	r3, #1
 800e3f0:	005b      	lsls	r3, r3, #1
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	881b      	ldrh	r3, [r3, #0]
 800e3f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800e3fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e3fc:	2b20      	cmp	r3, #32
 800e3fe:	d002      	beq.n	800e406 <create_name+0xf2>
 800e400:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e402:	2b2e      	cmp	r3, #46	@ 0x2e
 800e404:	d106      	bne.n	800e414 <create_name+0x100>
		di--;
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	3b01      	subs	r3, #1
 800e40a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1ea      	bne.n	800e3e8 <create_name+0xd4>
 800e412:	e000      	b.n	800e416 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e414:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	005b      	lsls	r3, r3, #1
 800e41a:	68fa      	ldr	r2, [r7, #12]
 800e41c:	4413      	add	r3, r2
 800e41e:	2200      	movs	r2, #0
 800e420:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d101      	bne.n	800e42c <create_name+0x118>
 800e428:	2306      	movs	r3, #6
 800e42a:	e127      	b.n	800e67c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	3324      	adds	r3, #36	@ 0x24
 800e430:	220b      	movs	r2, #11
 800e432:	2120      	movs	r1, #32
 800e434:	4618      	mov	r0, r3
 800e436:	f7fe faf4 	bl	800ca22 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e43a:	2300      	movs	r3, #0
 800e43c:	61bb      	str	r3, [r7, #24]
 800e43e:	e002      	b.n	800e446 <create_name+0x132>
 800e440:	69bb      	ldr	r3, [r7, #24]
 800e442:	3301      	adds	r3, #1
 800e444:	61bb      	str	r3, [r7, #24]
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	005b      	lsls	r3, r3, #1
 800e44a:	68fa      	ldr	r2, [r7, #12]
 800e44c:	4413      	add	r3, r2
 800e44e:	881b      	ldrh	r3, [r3, #0]
 800e450:	2b20      	cmp	r3, #32
 800e452:	d0f5      	beq.n	800e440 <create_name+0x12c>
 800e454:	69bb      	ldr	r3, [r7, #24]
 800e456:	005b      	lsls	r3, r3, #1
 800e458:	68fa      	ldr	r2, [r7, #12]
 800e45a:	4413      	add	r3, r2
 800e45c:	881b      	ldrh	r3, [r3, #0]
 800e45e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e460:	d0ee      	beq.n	800e440 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e462:	69bb      	ldr	r3, [r7, #24]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d009      	beq.n	800e47c <create_name+0x168>
 800e468:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e46c:	f043 0303 	orr.w	r3, r3, #3
 800e470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e474:	e002      	b.n	800e47c <create_name+0x168>
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	3b01      	subs	r3, #1
 800e47a:	617b      	str	r3, [r7, #20]
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d009      	beq.n	800e496 <create_name+0x182>
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e488:	3b01      	subs	r3, #1
 800e48a:	005b      	lsls	r3, r3, #1
 800e48c:	68fa      	ldr	r2, [r7, #12]
 800e48e:	4413      	add	r3, r2
 800e490:	881b      	ldrh	r3, [r3, #0]
 800e492:	2b2e      	cmp	r3, #46	@ 0x2e
 800e494:	d1ef      	bne.n	800e476 <create_name+0x162>

	i = b = 0; ni = 8;
 800e496:	2300      	movs	r3, #0
 800e498:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e49c:	2300      	movs	r3, #0
 800e49e:	623b      	str	r3, [r7, #32]
 800e4a0:	2308      	movs	r3, #8
 800e4a2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e4a4:	69bb      	ldr	r3, [r7, #24]
 800e4a6:	1c5a      	adds	r2, r3, #1
 800e4a8:	61ba      	str	r2, [r7, #24]
 800e4aa:	005b      	lsls	r3, r3, #1
 800e4ac:	68fa      	ldr	r2, [r7, #12]
 800e4ae:	4413      	add	r3, r2
 800e4b0:	881b      	ldrh	r3, [r3, #0]
 800e4b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e4b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	f000 8090 	beq.w	800e5dc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e4bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4be:	2b20      	cmp	r3, #32
 800e4c0:	d006      	beq.n	800e4d0 <create_name+0x1bc>
 800e4c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e4c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4c6:	d10a      	bne.n	800e4de <create_name+0x1ca>
 800e4c8:	69ba      	ldr	r2, [r7, #24]
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d006      	beq.n	800e4de <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e4d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4d4:	f043 0303 	orr.w	r3, r3, #3
 800e4d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e4dc:	e07d      	b.n	800e5da <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e4de:	6a3a      	ldr	r2, [r7, #32]
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d203      	bcs.n	800e4ee <create_name+0x1da>
 800e4e6:	69ba      	ldr	r2, [r7, #24]
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d123      	bne.n	800e536 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	2b0b      	cmp	r3, #11
 800e4f2:	d106      	bne.n	800e502 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e4f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4f8:	f043 0303 	orr.w	r3, r3, #3
 800e4fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e500:	e075      	b.n	800e5ee <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e502:	69ba      	ldr	r2, [r7, #24]
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	429a      	cmp	r2, r3
 800e508:	d005      	beq.n	800e516 <create_name+0x202>
 800e50a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e50e:	f043 0303 	orr.w	r3, r3, #3
 800e512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800e516:	69ba      	ldr	r2, [r7, #24]
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d866      	bhi.n	800e5ec <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	61bb      	str	r3, [r7, #24]
 800e522:	2308      	movs	r3, #8
 800e524:	623b      	str	r3, [r7, #32]
 800e526:	230b      	movs	r3, #11
 800e528:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e52a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e534:	e051      	b.n	800e5da <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e536:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e538:	2b7f      	cmp	r3, #127	@ 0x7f
 800e53a:	d914      	bls.n	800e566 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e53c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e53e:	2100      	movs	r1, #0
 800e540:	4618      	mov	r0, r3
 800e542:	f001 fb53 	bl	800fbec <ff_convert>
 800e546:	4603      	mov	r3, r0
 800e548:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e54a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d004      	beq.n	800e55a <create_name+0x246>
 800e550:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e552:	3b80      	subs	r3, #128	@ 0x80
 800e554:	4a23      	ldr	r2, [pc, #140]	@ (800e5e4 <create_name+0x2d0>)
 800e556:	5cd3      	ldrb	r3, [r2, r3]
 800e558:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e55a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e55e:	f043 0302 	orr.w	r3, r3, #2
 800e562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e566:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d007      	beq.n	800e57c <create_name+0x268>
 800e56c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e56e:	4619      	mov	r1, r3
 800e570:	481d      	ldr	r0, [pc, #116]	@ (800e5e8 <create_name+0x2d4>)
 800e572:	f7fe fa98 	bl	800caa6 <chk_chr>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d008      	beq.n	800e58e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e57c:	235f      	movs	r3, #95	@ 0x5f
 800e57e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e584:	f043 0303 	orr.w	r3, r3, #3
 800e588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e58c:	e01b      	b.n	800e5c6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e58e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e590:	2b40      	cmp	r3, #64	@ 0x40
 800e592:	d909      	bls.n	800e5a8 <create_name+0x294>
 800e594:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e596:	2b5a      	cmp	r3, #90	@ 0x5a
 800e598:	d806      	bhi.n	800e5a8 <create_name+0x294>
					b |= 2;
 800e59a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e59e:	f043 0302 	orr.w	r3, r3, #2
 800e5a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e5a6:	e00e      	b.n	800e5c6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e5a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5aa:	2b60      	cmp	r3, #96	@ 0x60
 800e5ac:	d90b      	bls.n	800e5c6 <create_name+0x2b2>
 800e5ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5b0:	2b7a      	cmp	r3, #122	@ 0x7a
 800e5b2:	d808      	bhi.n	800e5c6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e5b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e5b8:	f043 0301 	orr.w	r3, r3, #1
 800e5bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e5c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5c2:	3b20      	subs	r3, #32
 800e5c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e5c6:	6a3b      	ldr	r3, [r7, #32]
 800e5c8:	1c5a      	adds	r2, r3, #1
 800e5ca:	623a      	str	r2, [r7, #32]
 800e5cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e5ce:	b2d1      	uxtb	r1, r2
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	4413      	add	r3, r2
 800e5d4:	460a      	mov	r2, r1
 800e5d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e5da:	e763      	b.n	800e4a4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e5dc:	bf00      	nop
 800e5de:	e006      	b.n	800e5ee <create_name+0x2da>
 800e5e0:	08010720 	.word	0x08010720
 800e5e4:	080107fc 	.word	0x080107fc
 800e5e8:	0801072c 	.word	0x0801072c
			if (si > di) break;			/* No extension */
 800e5ec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e5f4:	2be5      	cmp	r3, #229	@ 0xe5
 800e5f6:	d103      	bne.n	800e600 <create_name+0x2ec>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2205      	movs	r2, #5
 800e5fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800e600:	69fb      	ldr	r3, [r7, #28]
 800e602:	2b08      	cmp	r3, #8
 800e604:	d104      	bne.n	800e610 <create_name+0x2fc>
 800e606:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e610:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e614:	f003 030c 	and.w	r3, r3, #12
 800e618:	2b0c      	cmp	r3, #12
 800e61a:	d005      	beq.n	800e628 <create_name+0x314>
 800e61c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e620:	f003 0303 	and.w	r3, r3, #3
 800e624:	2b03      	cmp	r3, #3
 800e626:	d105      	bne.n	800e634 <create_name+0x320>
 800e628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e62c:	f043 0302 	orr.w	r3, r3, #2
 800e630:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e638:	f003 0302 	and.w	r3, r3, #2
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d117      	bne.n	800e670 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e640:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e644:	f003 0303 	and.w	r3, r3, #3
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d105      	bne.n	800e658 <create_name+0x344>
 800e64c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e650:	f043 0310 	orr.w	r3, r3, #16
 800e654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e658:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e65c:	f003 030c 	and.w	r3, r3, #12
 800e660:	2b04      	cmp	r3, #4
 800e662:	d105      	bne.n	800e670 <create_name+0x35c>
 800e664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e668:	f043 0308 	orr.w	r3, r3, #8
 800e66c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e676:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800e67a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3728      	adds	r7, #40	@ 0x28
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b086      	sub	sp, #24
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e698:	e002      	b.n	800e6a0 <follow_path+0x1c>
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	3301      	adds	r3, #1
 800e69e:	603b      	str	r3, [r7, #0]
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e6a6:	d0f8      	beq.n	800e69a <follow_path+0x16>
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	2b5c      	cmp	r3, #92	@ 0x5c
 800e6ae:	d0f4      	beq.n	800e69a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	2b1f      	cmp	r3, #31
 800e6bc:	d80a      	bhi.n	800e6d4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2280      	movs	r2, #128	@ 0x80
 800e6c2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f7fe ff34 	bl	800d536 <dir_sdi>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	75fb      	strb	r3, [r7, #23]
 800e6d2:	e043      	b.n	800e75c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e6d4:	463b      	mov	r3, r7
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f7ff fe1b 	bl	800e314 <create_name>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e6e2:	7dfb      	ldrb	r3, [r7, #23]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d134      	bne.n	800e752 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f7ff fb7d 	bl	800dde8 <dir_find>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e6f8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e6fa:	7dfb      	ldrb	r3, [r7, #23]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d00a      	beq.n	800e716 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e700:	7dfb      	ldrb	r3, [r7, #23]
 800e702:	2b04      	cmp	r3, #4
 800e704:	d127      	bne.n	800e756 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e706:	7afb      	ldrb	r3, [r7, #11]
 800e708:	f003 0304 	and.w	r3, r3, #4
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d122      	bne.n	800e756 <follow_path+0xd2>
 800e710:	2305      	movs	r3, #5
 800e712:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e714:	e01f      	b.n	800e756 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e716:	7afb      	ldrb	r3, [r7, #11]
 800e718:	f003 0304 	and.w	r3, r3, #4
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d11c      	bne.n	800e75a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	799b      	ldrb	r3, [r3, #6]
 800e724:	f003 0310 	and.w	r3, r3, #16
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d102      	bne.n	800e732 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e72c:	2305      	movs	r3, #5
 800e72e:	75fb      	strb	r3, [r7, #23]
 800e730:	e014      	b.n	800e75c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	695b      	ldr	r3, [r3, #20]
 800e73c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e740:	4413      	add	r3, r2
 800e742:	4619      	mov	r1, r3
 800e744:	68f8      	ldr	r0, [r7, #12]
 800e746:	f7ff f87d 	bl	800d844 <ld_clust>
 800e74a:	4602      	mov	r2, r0
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e750:	e7c0      	b.n	800e6d4 <follow_path+0x50>
			if (res != FR_OK) break;
 800e752:	bf00      	nop
 800e754:	e002      	b.n	800e75c <follow_path+0xd8>
				break;
 800e756:	bf00      	nop
 800e758:	e000      	b.n	800e75c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e75a:	bf00      	nop
			}
		}
	}

	return res;
 800e75c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3718      	adds	r7, #24
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e766:	b480      	push	{r7}
 800e768:	b087      	sub	sp, #28
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e76e:	f04f 33ff 	mov.w	r3, #4294967295
 800e772:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d031      	beq.n	800e7e0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	617b      	str	r3, [r7, #20]
 800e782:	e002      	b.n	800e78a <get_ldnumber+0x24>
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	3301      	adds	r3, #1
 800e788:	617b      	str	r3, [r7, #20]
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	2b1f      	cmp	r3, #31
 800e790:	d903      	bls.n	800e79a <get_ldnumber+0x34>
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	2b3a      	cmp	r3, #58	@ 0x3a
 800e798:	d1f4      	bne.n	800e784 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	2b3a      	cmp	r3, #58	@ 0x3a
 800e7a0:	d11c      	bne.n	800e7dc <get_ldnumber+0x76>
			tp = *path;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	1c5a      	adds	r2, r3, #1
 800e7ac:	60fa      	str	r2, [r7, #12]
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	3b30      	subs	r3, #48	@ 0x30
 800e7b2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	2b09      	cmp	r3, #9
 800e7b8:	d80e      	bhi.n	800e7d8 <get_ldnumber+0x72>
 800e7ba:	68fa      	ldr	r2, [r7, #12]
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d10a      	bne.n	800e7d8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d107      	bne.n	800e7d8 <get_ldnumber+0x72>
					vol = (int)i;
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	617b      	str	r3, [r7, #20]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	697a      	ldr	r2, [r7, #20]
 800e7d6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	e002      	b.n	800e7e2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e7dc:	2300      	movs	r3, #0
 800e7de:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e7e0:	693b      	ldr	r3, [r7, #16]
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	371c      	adds	r7, #28
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ec:	4770      	bx	lr
	...

0800e7f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	70da      	strb	r2, [r3, #3]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f04f 32ff 	mov.w	r2, #4294967295
 800e806:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e808:	6839      	ldr	r1, [r7, #0]
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f7fe fb16 	bl	800ce3c <move_window>
 800e810:	4603      	mov	r3, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	d001      	beq.n	800e81a <check_fs+0x2a>
 800e816:	2304      	movs	r3, #4
 800e818:	e038      	b.n	800e88c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	3334      	adds	r3, #52	@ 0x34
 800e81e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e822:	4618      	mov	r0, r3
 800e824:	f7fe f85a 	bl	800c8dc <ld_word>
 800e828:	4603      	mov	r3, r0
 800e82a:	461a      	mov	r2, r3
 800e82c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e830:	429a      	cmp	r2, r3
 800e832:	d001      	beq.n	800e838 <check_fs+0x48>
 800e834:	2303      	movs	r3, #3
 800e836:	e029      	b.n	800e88c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e83e:	2be9      	cmp	r3, #233	@ 0xe9
 800e840:	d009      	beq.n	800e856 <check_fs+0x66>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e848:	2beb      	cmp	r3, #235	@ 0xeb
 800e84a:	d11e      	bne.n	800e88a <check_fs+0x9a>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e852:	2b90      	cmp	r3, #144	@ 0x90
 800e854:	d119      	bne.n	800e88a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	3334      	adds	r3, #52	@ 0x34
 800e85a:	3336      	adds	r3, #54	@ 0x36
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7fe f855 	bl	800c90c <ld_dword>
 800e862:	4603      	mov	r3, r0
 800e864:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e868:	4a0a      	ldr	r2, [pc, #40]	@ (800e894 <check_fs+0xa4>)
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d101      	bne.n	800e872 <check_fs+0x82>
 800e86e:	2300      	movs	r3, #0
 800e870:	e00c      	b.n	800e88c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	3334      	adds	r3, #52	@ 0x34
 800e876:	3352      	adds	r3, #82	@ 0x52
 800e878:	4618      	mov	r0, r3
 800e87a:	f7fe f847 	bl	800c90c <ld_dword>
 800e87e:	4603      	mov	r3, r0
 800e880:	4a05      	ldr	r2, [pc, #20]	@ (800e898 <check_fs+0xa8>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d101      	bne.n	800e88a <check_fs+0x9a>
 800e886:	2300      	movs	r3, #0
 800e888:	e000      	b.n	800e88c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e88a:	2302      	movs	r3, #2
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3708      	adds	r7, #8
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	00544146 	.word	0x00544146
 800e898:	33544146 	.word	0x33544146

0800e89c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b096      	sub	sp, #88	@ 0x58
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	60b9      	str	r1, [r7, #8]
 800e8a6:	4613      	mov	r3, r2
 800e8a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e8b0:	68f8      	ldr	r0, [r7, #12]
 800e8b2:	f7ff ff58 	bl	800e766 <get_ldnumber>
 800e8b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e8b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	da01      	bge.n	800e8c2 <find_volume+0x26>
 800e8be:	230b      	movs	r3, #11
 800e8c0:	e230      	b.n	800ed24 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e8c2:	4aa1      	ldr	r2, [pc, #644]	@ (800eb48 <find_volume+0x2ac>)
 800e8c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d101      	bne.n	800e8d6 <find_volume+0x3a>
 800e8d2:	230c      	movs	r3, #12
 800e8d4:	e226      	b.n	800ed24 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e8da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e8dc:	79fb      	ldrb	r3, [r7, #7]
 800e8de:	f023 0301 	bic.w	r3, r3, #1
 800e8e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d01a      	beq.n	800e922 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ee:	785b      	ldrb	r3, [r3, #1]
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7fd ff53 	bl	800c79c <disk_status>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e8fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e900:	f003 0301 	and.w	r3, r3, #1
 800e904:	2b00      	cmp	r3, #0
 800e906:	d10c      	bne.n	800e922 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e908:	79fb      	ldrb	r3, [r7, #7]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d007      	beq.n	800e91e <find_volume+0x82>
 800e90e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e912:	f003 0304 	and.w	r3, r3, #4
 800e916:	2b00      	cmp	r3, #0
 800e918:	d001      	beq.n	800e91e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e91a:	230a      	movs	r3, #10
 800e91c:	e202      	b.n	800ed24 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800e91e:	2300      	movs	r3, #0
 800e920:	e200      	b.n	800ed24 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e924:	2200      	movs	r2, #0
 800e926:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e92a:	b2da      	uxtb	r2, r3
 800e92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e92e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e932:	785b      	ldrb	r3, [r3, #1]
 800e934:	4618      	mov	r0, r3
 800e936:	f7fd ff4b 	bl	800c7d0 <disk_initialize>
 800e93a:	4603      	mov	r3, r0
 800e93c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e940:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e944:	f003 0301 	and.w	r3, r3, #1
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d001      	beq.n	800e950 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e94c:	2303      	movs	r3, #3
 800e94e:	e1e9      	b.n	800ed24 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e950:	79fb      	ldrb	r3, [r7, #7]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d007      	beq.n	800e966 <find_volume+0xca>
 800e956:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e95a:	f003 0304 	and.w	r3, r3, #4
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e962:	230a      	movs	r3, #10
 800e964:	e1de      	b.n	800ed24 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e966:	2300      	movs	r3, #0
 800e968:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e96a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e96c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e96e:	f7ff ff3f 	bl	800e7f0 <check_fs>
 800e972:	4603      	mov	r3, r0
 800e974:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e978:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e97c:	2b02      	cmp	r3, #2
 800e97e:	d149      	bne.n	800ea14 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e980:	2300      	movs	r3, #0
 800e982:	643b      	str	r3, [r7, #64]	@ 0x40
 800e984:	e01e      	b.n	800e9c4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e988:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e98c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e98e:	011b      	lsls	r3, r3, #4
 800e990:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e994:	4413      	add	r3, r2
 800e996:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e99a:	3304      	adds	r3, #4
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d006      	beq.n	800e9b0 <find_volume+0x114>
 800e9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9a4:	3308      	adds	r3, #8
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7fd ffb0 	bl	800c90c <ld_dword>
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	e000      	b.n	800e9b2 <find_volume+0x116>
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9b4:	009b      	lsls	r3, r3, #2
 800e9b6:	3358      	adds	r3, #88	@ 0x58
 800e9b8:	443b      	add	r3, r7
 800e9ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e9be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800e9c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9c6:	2b03      	cmp	r3, #3
 800e9c8:	d9dd      	bls.n	800e986 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e9ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d002      	beq.n	800e9da <find_volume+0x13e>
 800e9d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9d6:	3b01      	subs	r3, #1
 800e9d8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e9da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9dc:	009b      	lsls	r3, r3, #2
 800e9de:	3358      	adds	r3, #88	@ 0x58
 800e9e0:	443b      	add	r3, r7
 800e9e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e9e6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e9e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d005      	beq.n	800e9fa <find_volume+0x15e>
 800e9ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e9f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e9f2:	f7ff fefd 	bl	800e7f0 <check_fs>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	e000      	b.n	800e9fc <find_volume+0x160>
 800e9fa:	2303      	movs	r3, #3
 800e9fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ea00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d905      	bls.n	800ea14 <find_volume+0x178>
 800ea08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ea0a:	3301      	adds	r3, #1
 800ea0c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ea0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ea10:	2b03      	cmp	r3, #3
 800ea12:	d9e2      	bls.n	800e9da <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ea14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ea18:	2b04      	cmp	r3, #4
 800ea1a:	d101      	bne.n	800ea20 <find_volume+0x184>
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	e181      	b.n	800ed24 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ea20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	d901      	bls.n	800ea2c <find_volume+0x190>
 800ea28:	230d      	movs	r3, #13
 800ea2a:	e17b      	b.n	800ed24 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ea2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea2e:	3334      	adds	r3, #52	@ 0x34
 800ea30:	330b      	adds	r3, #11
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7fd ff52 	bl	800c8dc <ld_word>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea3e:	d001      	beq.n	800ea44 <find_volume+0x1a8>
 800ea40:	230d      	movs	r3, #13
 800ea42:	e16f      	b.n	800ed24 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ea44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea46:	3334      	adds	r3, #52	@ 0x34
 800ea48:	3316      	adds	r3, #22
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fd ff46 	bl	800c8dc <ld_word>
 800ea50:	4603      	mov	r3, r0
 800ea52:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ea54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d106      	bne.n	800ea68 <find_volume+0x1cc>
 800ea5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea5c:	3334      	adds	r3, #52	@ 0x34
 800ea5e:	3324      	adds	r3, #36	@ 0x24
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7fd ff53 	bl	800c90c <ld_dword>
 800ea66:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ea68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ea6c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ea6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea70:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800ea74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea76:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ea78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea7a:	789b      	ldrb	r3, [r3, #2]
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d005      	beq.n	800ea8c <find_volume+0x1f0>
 800ea80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea82:	789b      	ldrb	r3, [r3, #2]
 800ea84:	2b02      	cmp	r3, #2
 800ea86:	d001      	beq.n	800ea8c <find_volume+0x1f0>
 800ea88:	230d      	movs	r3, #13
 800ea8a:	e14b      	b.n	800ed24 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ea8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea8e:	789b      	ldrb	r3, [r3, #2]
 800ea90:	461a      	mov	r2, r3
 800ea92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea94:	fb02 f303 	mul.w	r3, r2, r3
 800ea98:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ea9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaa4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800eaa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaa8:	895b      	ldrh	r3, [r3, #10]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d008      	beq.n	800eac0 <find_volume+0x224>
 800eaae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eab0:	895b      	ldrh	r3, [r3, #10]
 800eab2:	461a      	mov	r2, r3
 800eab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eab6:	895b      	ldrh	r3, [r3, #10]
 800eab8:	3b01      	subs	r3, #1
 800eaba:	4013      	ands	r3, r2
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d001      	beq.n	800eac4 <find_volume+0x228>
 800eac0:	230d      	movs	r3, #13
 800eac2:	e12f      	b.n	800ed24 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800eac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eac6:	3334      	adds	r3, #52	@ 0x34
 800eac8:	3311      	adds	r3, #17
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fd ff06 	bl	800c8dc <ld_word>
 800ead0:	4603      	mov	r3, r0
 800ead2:	461a      	mov	r2, r3
 800ead4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ead6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ead8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eada:	891b      	ldrh	r3, [r3, #8]
 800eadc:	f003 030f 	and.w	r3, r3, #15
 800eae0:	b29b      	uxth	r3, r3
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d001      	beq.n	800eaea <find_volume+0x24e>
 800eae6:	230d      	movs	r3, #13
 800eae8:	e11c      	b.n	800ed24 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800eaea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaec:	3334      	adds	r3, #52	@ 0x34
 800eaee:	3313      	adds	r3, #19
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7fd fef3 	bl	800c8dc <ld_word>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800eafa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d106      	bne.n	800eb0e <find_volume+0x272>
 800eb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb02:	3334      	adds	r3, #52	@ 0x34
 800eb04:	3320      	adds	r3, #32
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fd ff00 	bl	800c90c <ld_dword>
 800eb0c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800eb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb10:	3334      	adds	r3, #52	@ 0x34
 800eb12:	330e      	adds	r3, #14
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7fd fee1 	bl	800c8dc <ld_word>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800eb1e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d101      	bne.n	800eb28 <find_volume+0x28c>
 800eb24:	230d      	movs	r3, #13
 800eb26:	e0fd      	b.n	800ed24 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800eb28:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800eb2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb2c:	4413      	add	r3, r2
 800eb2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb30:	8912      	ldrh	r2, [r2, #8]
 800eb32:	0912      	lsrs	r2, r2, #4
 800eb34:	b292      	uxth	r2, r2
 800eb36:	4413      	add	r3, r2
 800eb38:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800eb3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d204      	bcs.n	800eb4c <find_volume+0x2b0>
 800eb42:	230d      	movs	r3, #13
 800eb44:	e0ee      	b.n	800ed24 <find_volume+0x488>
 800eb46:	bf00      	nop
 800eb48:	20001b64 	.word	0x20001b64
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800eb4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb50:	1ad3      	subs	r3, r2, r3
 800eb52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb54:	8952      	ldrh	r2, [r2, #10]
 800eb56:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb5a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d101      	bne.n	800eb66 <find_volume+0x2ca>
 800eb62:	230d      	movs	r3, #13
 800eb64:	e0de      	b.n	800ed24 <find_volume+0x488>
		fmt = FS_FAT32;
 800eb66:	2303      	movs	r3, #3
 800eb68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800eb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb6e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d802      	bhi.n	800eb7c <find_volume+0x2e0>
 800eb76:	2302      	movs	r3, #2
 800eb78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb7e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d802      	bhi.n	800eb8c <find_volume+0x2f0>
 800eb86:	2301      	movs	r3, #1
 800eb88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800eb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb8e:	1c9a      	adds	r2, r3, #2
 800eb90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb92:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800eb94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eb98:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eb9a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800eb9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb9e:	441a      	add	r2, r3
 800eba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eba2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800eba4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eba8:	441a      	add	r2, r3
 800ebaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebac:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800ebae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ebb2:	2b03      	cmp	r3, #3
 800ebb4:	d11e      	bne.n	800ebf4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ebb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebb8:	3334      	adds	r3, #52	@ 0x34
 800ebba:	332a      	adds	r3, #42	@ 0x2a
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7fd fe8d 	bl	800c8dc <ld_word>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d001      	beq.n	800ebcc <find_volume+0x330>
 800ebc8:	230d      	movs	r3, #13
 800ebca:	e0ab      	b.n	800ed24 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ebcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebce:	891b      	ldrh	r3, [r3, #8]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d001      	beq.n	800ebd8 <find_volume+0x33c>
 800ebd4:	230d      	movs	r3, #13
 800ebd6:	e0a5      	b.n	800ed24 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ebd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebda:	3334      	adds	r3, #52	@ 0x34
 800ebdc:	332c      	adds	r3, #44	@ 0x2c
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7fd fe94 	bl	800c90c <ld_dword>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebe8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ebea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebec:	699b      	ldr	r3, [r3, #24]
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	647b      	str	r3, [r7, #68]	@ 0x44
 800ebf2:	e01f      	b.n	800ec34 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ebf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebf6:	891b      	ldrh	r3, [r3, #8]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d101      	bne.n	800ec00 <find_volume+0x364>
 800ebfc:	230d      	movs	r3, #13
 800ebfe:	e091      	b.n	800ed24 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ec00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec06:	441a      	add	r2, r3
 800ec08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec0a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ec0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ec10:	2b02      	cmp	r3, #2
 800ec12:	d103      	bne.n	800ec1c <find_volume+0x380>
 800ec14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec16:	699b      	ldr	r3, [r3, #24]
 800ec18:	005b      	lsls	r3, r3, #1
 800ec1a:	e00a      	b.n	800ec32 <find_volume+0x396>
 800ec1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec1e:	699a      	ldr	r2, [r3, #24]
 800ec20:	4613      	mov	r3, r2
 800ec22:	005b      	lsls	r3, r3, #1
 800ec24:	4413      	add	r3, r2
 800ec26:	085a      	lsrs	r2, r3, #1
 800ec28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec2a:	699b      	ldr	r3, [r3, #24]
 800ec2c:	f003 0301 	and.w	r3, r3, #1
 800ec30:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ec32:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ec34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec36:	69da      	ldr	r2, [r3, #28]
 800ec38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec3a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800ec3e:	0a5b      	lsrs	r3, r3, #9
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d201      	bcs.n	800ec48 <find_volume+0x3ac>
 800ec44:	230d      	movs	r3, #13
 800ec46:	e06d      	b.n	800ed24 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ec48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec4e:	615a      	str	r2, [r3, #20]
 800ec50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec52:	695a      	ldr	r2, [r3, #20]
 800ec54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec56:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ec58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec5a:	2280      	movs	r2, #128	@ 0x80
 800ec5c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ec5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ec62:	2b03      	cmp	r3, #3
 800ec64:	d149      	bne.n	800ecfa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ec66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec68:	3334      	adds	r3, #52	@ 0x34
 800ec6a:	3330      	adds	r3, #48	@ 0x30
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7fd fe35 	bl	800c8dc <ld_word>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d140      	bne.n	800ecfa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ec78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ec80:	f7fe f8dc 	bl	800ce3c <move_window>
 800ec84:	4603      	mov	r3, r0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d137      	bne.n	800ecfa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ec8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ec90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec92:	3334      	adds	r3, #52	@ 0x34
 800ec94:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7fd fe1f 	bl	800c8dc <ld_word>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	461a      	mov	r2, r3
 800eca2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d127      	bne.n	800ecfa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ecaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecac:	3334      	adds	r3, #52	@ 0x34
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fd fe2c 	bl	800c90c <ld_dword>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	4a1d      	ldr	r2, [pc, #116]	@ (800ed2c <find_volume+0x490>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d11e      	bne.n	800ecfa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ecbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecbe:	3334      	adds	r3, #52	@ 0x34
 800ecc0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7fd fe21 	bl	800c90c <ld_dword>
 800ecca:	4603      	mov	r3, r0
 800eccc:	4a18      	ldr	r2, [pc, #96]	@ (800ed30 <find_volume+0x494>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d113      	bne.n	800ecfa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ecd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecd4:	3334      	adds	r3, #52	@ 0x34
 800ecd6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7fd fe16 	bl	800c90c <ld_dword>
 800ece0:	4602      	mov	r2, r0
 800ece2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ece4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ece6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ece8:	3334      	adds	r3, #52	@ 0x34
 800ecea:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7fd fe0c 	bl	800c90c <ld_dword>
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecf8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ecfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecfc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ed00:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ed02:	4b0c      	ldr	r3, [pc, #48]	@ (800ed34 <find_volume+0x498>)
 800ed04:	881b      	ldrh	r3, [r3, #0]
 800ed06:	3301      	adds	r3, #1
 800ed08:	b29a      	uxth	r2, r3
 800ed0a:	4b0a      	ldr	r3, [pc, #40]	@ (800ed34 <find_volume+0x498>)
 800ed0c:	801a      	strh	r2, [r3, #0]
 800ed0e:	4b09      	ldr	r3, [pc, #36]	@ (800ed34 <find_volume+0x498>)
 800ed10:	881a      	ldrh	r2, [r3, #0]
 800ed12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed14:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ed16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed18:	4a07      	ldr	r2, [pc, #28]	@ (800ed38 <find_volume+0x49c>)
 800ed1a:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ed1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ed1e:	f7fe f825 	bl	800cd6c <clear_lock>
#endif
	return FR_OK;
 800ed22:	2300      	movs	r3, #0
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3758      	adds	r7, #88	@ 0x58
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	41615252 	.word	0x41615252
 800ed30:	61417272 	.word	0x61417272
 800ed34:	20001b68 	.word	0x20001b68
 800ed38:	20001b8c 	.word	0x20001b8c

0800ed3c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b084      	sub	sp, #16
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ed46:	2309      	movs	r3, #9
 800ed48:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d01c      	beq.n	800ed8a <validate+0x4e>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d018      	beq.n	800ed8a <validate+0x4e>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d013      	beq.n	800ed8a <validate+0x4e>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	889a      	ldrh	r2, [r3, #4]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	88db      	ldrh	r3, [r3, #6]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d10c      	bne.n	800ed8a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	785b      	ldrb	r3, [r3, #1]
 800ed76:	4618      	mov	r0, r3
 800ed78:	f7fd fd10 	bl	800c79c <disk_status>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	f003 0301 	and.w	r3, r3, #1
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d101      	bne.n	800ed8a <validate+0x4e>
			res = FR_OK;
 800ed86:	2300      	movs	r3, #0
 800ed88:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ed8a:	7bfb      	ldrb	r3, [r7, #15]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d102      	bne.n	800ed96 <validate+0x5a>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	e000      	b.n	800ed98 <validate+0x5c>
 800ed96:	2300      	movs	r3, #0
 800ed98:	683a      	ldr	r2, [r7, #0]
 800ed9a:	6013      	str	r3, [r2, #0]
	return res;
 800ed9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3710      	adds	r7, #16
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
	...

0800eda8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b088      	sub	sp, #32
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	4613      	mov	r3, r2
 800edb4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800edba:	f107 0310 	add.w	r3, r7, #16
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7ff fcd1 	bl	800e766 <get_ldnumber>
 800edc4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	da01      	bge.n	800edd0 <f_mount+0x28>
 800edcc:	230b      	movs	r3, #11
 800edce:	e02b      	b.n	800ee28 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800edd0:	4a17      	ldr	r2, [pc, #92]	@ (800ee30 <f_mount+0x88>)
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edd8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d005      	beq.n	800edec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ede0:	69b8      	ldr	r0, [r7, #24]
 800ede2:	f7fd ffc3 	bl	800cd6c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	2200      	movs	r2, #0
 800edea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d002      	beq.n	800edf8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2200      	movs	r2, #0
 800edf6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800edf8:	68fa      	ldr	r2, [r7, #12]
 800edfa:	490d      	ldr	r1, [pc, #52]	@ (800ee30 <f_mount+0x88>)
 800edfc:	69fb      	ldr	r3, [r7, #28]
 800edfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d002      	beq.n	800ee0e <f_mount+0x66>
 800ee08:	79fb      	ldrb	r3, [r7, #7]
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d001      	beq.n	800ee12 <f_mount+0x6a>
 800ee0e:	2300      	movs	r3, #0
 800ee10:	e00a      	b.n	800ee28 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ee12:	f107 010c 	add.w	r1, r7, #12
 800ee16:	f107 0308 	add.w	r3, r7, #8
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7ff fd3d 	bl	800e89c <find_volume>
 800ee22:	4603      	mov	r3, r0
 800ee24:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ee26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3720      	adds	r7, #32
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	20001b64 	.word	0x20001b64

0800ee34 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b09a      	sub	sp, #104	@ 0x68
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	4613      	mov	r3, r2
 800ee40:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d101      	bne.n	800ee4c <f_open+0x18>
 800ee48:	2309      	movs	r3, #9
 800ee4a:	e1a9      	b.n	800f1a0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ee4c:	79fb      	ldrb	r3, [r7, #7]
 800ee4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee52:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ee54:	79fa      	ldrb	r2, [r7, #7]
 800ee56:	f107 0114 	add.w	r1, r7, #20
 800ee5a:	f107 0308 	add.w	r3, r7, #8
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7ff fd1c 	bl	800e89c <find_volume>
 800ee64:	4603      	mov	r3, r0
 800ee66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800ee6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	f040 818d 	bne.w	800f18e <f_open+0x35a>
		dj.obj.fs = fs;
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ee78:	68ba      	ldr	r2, [r7, #8]
 800ee7a:	f107 0318 	add.w	r3, r7, #24
 800ee7e:	4611      	mov	r1, r2
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7ff fbff 	bl	800e684 <follow_path>
 800ee86:	4603      	mov	r3, r0
 800ee88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ee8c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d118      	bne.n	800eec6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ee94:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ee98:	b25b      	sxtb	r3, r3
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	da03      	bge.n	800eea6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ee9e:	2306      	movs	r3, #6
 800eea0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800eea4:	e00f      	b.n	800eec6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eea6:	79fb      	ldrb	r3, [r7, #7]
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	bf8c      	ite	hi
 800eeac:	2301      	movhi	r3, #1
 800eeae:	2300      	movls	r3, #0
 800eeb0:	b2db      	uxtb	r3, r3
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	f107 0318 	add.w	r3, r7, #24
 800eeb8:	4611      	mov	r1, r2
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7fd fe0e 	bl	800cadc <chk_lock>
 800eec0:	4603      	mov	r3, r0
 800eec2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800eec6:	79fb      	ldrb	r3, [r7, #7]
 800eec8:	f003 031c 	and.w	r3, r3, #28
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d07f      	beq.n	800efd0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800eed0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d017      	beq.n	800ef08 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800eed8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800eedc:	2b04      	cmp	r3, #4
 800eede:	d10e      	bne.n	800eefe <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800eee0:	f7fd fe58 	bl	800cb94 <enq_lock>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d006      	beq.n	800eef8 <f_open+0xc4>
 800eeea:	f107 0318 	add.w	r3, r7, #24
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7ff f83a 	bl	800df68 <dir_register>
 800eef4:	4603      	mov	r3, r0
 800eef6:	e000      	b.n	800eefa <f_open+0xc6>
 800eef8:	2312      	movs	r3, #18
 800eefa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eefe:	79fb      	ldrb	r3, [r7, #7]
 800ef00:	f043 0308 	orr.w	r3, r3, #8
 800ef04:	71fb      	strb	r3, [r7, #7]
 800ef06:	e010      	b.n	800ef2a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ef08:	7fbb      	ldrb	r3, [r7, #30]
 800ef0a:	f003 0311 	and.w	r3, r3, #17
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d003      	beq.n	800ef1a <f_open+0xe6>
					res = FR_DENIED;
 800ef12:	2307      	movs	r3, #7
 800ef14:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ef18:	e007      	b.n	800ef2a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ef1a:	79fb      	ldrb	r3, [r7, #7]
 800ef1c:	f003 0304 	and.w	r3, r3, #4
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d002      	beq.n	800ef2a <f_open+0xf6>
 800ef24:	2308      	movs	r3, #8
 800ef26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ef2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d168      	bne.n	800f004 <f_open+0x1d0>
 800ef32:	79fb      	ldrb	r3, [r7, #7]
 800ef34:	f003 0308 	and.w	r3, r3, #8
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d063      	beq.n	800f004 <f_open+0x1d0>
				dw = GET_FATTIME();
 800ef3c:	f7fa fa42 	bl	80093c4 <get_fattime>
 800ef40:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ef42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef44:	330e      	adds	r3, #14
 800ef46:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7fd fd1d 	bl	800c988 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ef4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef50:	3316      	adds	r3, #22
 800ef52:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7fd fd17 	bl	800c988 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ef5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef5c:	330b      	adds	r3, #11
 800ef5e:	2220      	movs	r2, #32
 800ef60:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef66:	4611      	mov	r1, r2
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f7fe fc6b 	bl	800d844 <ld_clust>
 800ef6e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ef74:	2200      	movs	r2, #0
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7fe fc83 	bl	800d882 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ef7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef7e:	331c      	adds	r3, #28
 800ef80:	2100      	movs	r1, #0
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fd fd00 	bl	800c988 <st_dword>
					fs->wflag = 1;
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ef8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d037      	beq.n	800f004 <f_open+0x1d0>
						dw = fs->winsect;
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef98:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ef9a:	f107 0318 	add.w	r3, r7, #24
 800ef9e:	2200      	movs	r2, #0
 800efa0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fe f996 	bl	800d2d4 <remove_chain>
 800efa8:	4603      	mov	r3, r0
 800efaa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800efae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d126      	bne.n	800f004 <f_open+0x1d0>
							res = move_window(fs, dw);
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fd ff3e 	bl	800ce3c <move_window>
 800efc0:	4603      	mov	r3, r0
 800efc2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800efca:	3a01      	subs	r2, #1
 800efcc:	611a      	str	r2, [r3, #16]
 800efce:	e019      	b.n	800f004 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800efd0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d115      	bne.n	800f004 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800efd8:	7fbb      	ldrb	r3, [r7, #30]
 800efda:	f003 0310 	and.w	r3, r3, #16
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d003      	beq.n	800efea <f_open+0x1b6>
					res = FR_NO_FILE;
 800efe2:	2304      	movs	r3, #4
 800efe4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800efe8:	e00c      	b.n	800f004 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800efea:	79fb      	ldrb	r3, [r7, #7]
 800efec:	f003 0302 	and.w	r3, r3, #2
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d007      	beq.n	800f004 <f_open+0x1d0>
 800eff4:	7fbb      	ldrb	r3, [r7, #30]
 800eff6:	f003 0301 	and.w	r3, r3, #1
 800effa:	2b00      	cmp	r3, #0
 800effc:	d002      	beq.n	800f004 <f_open+0x1d0>
						res = FR_DENIED;
 800effe:	2307      	movs	r3, #7
 800f000:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f004:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d126      	bne.n	800f05a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f00c:	79fb      	ldrb	r3, [r7, #7]
 800f00e:	f003 0308 	and.w	r3, r3, #8
 800f012:	2b00      	cmp	r3, #0
 800f014:	d003      	beq.n	800f01e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800f016:	79fb      	ldrb	r3, [r7, #7]
 800f018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f01c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800f026:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f02c:	79fb      	ldrb	r3, [r7, #7]
 800f02e:	2b01      	cmp	r3, #1
 800f030:	bf8c      	ite	hi
 800f032:	2301      	movhi	r3, #1
 800f034:	2300      	movls	r3, #0
 800f036:	b2db      	uxtb	r3, r3
 800f038:	461a      	mov	r2, r3
 800f03a:	f107 0318 	add.w	r3, r7, #24
 800f03e:	4611      	mov	r1, r2
 800f040:	4618      	mov	r0, r3
 800f042:	f7fd fdc9 	bl	800cbd8 <inc_lock>
 800f046:	4602      	mov	r2, r0
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	691b      	ldr	r3, [r3, #16]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d102      	bne.n	800f05a <f_open+0x226>
 800f054:	2302      	movs	r3, #2
 800f056:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f05a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f05e:	2b00      	cmp	r3, #0
 800f060:	f040 8095 	bne.w	800f18e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f068:	4611      	mov	r1, r2
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7fe fbea 	bl	800d844 <ld_clust>
 800f070:	4602      	mov	r2, r0
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f078:	331c      	adds	r3, #28
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7fd fc46 	bl	800c90c <ld_dword>
 800f080:	4602      	mov	r2, r0
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2200      	movs	r2, #0
 800f08a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f08c:	697a      	ldr	r2, [r7, #20]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	88da      	ldrh	r2, [r3, #6]
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	79fa      	ldrb	r2, [r7, #7]
 800f09e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	3330      	adds	r3, #48	@ 0x30
 800f0b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f0ba:	2100      	movs	r1, #0
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7fd fcb0 	bl	800ca22 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f0c2:	79fb      	ldrb	r3, [r7, #7]
 800f0c4:	f003 0320 	and.w	r3, r3, #32
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d060      	beq.n	800f18e <f_open+0x35a>
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	68db      	ldr	r3, [r3, #12]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d05c      	beq.n	800f18e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	68da      	ldr	r2, [r3, #12]
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	895b      	ldrh	r3, [r3, #10]
 800f0e0:	025b      	lsls	r3, r3, #9
 800f0e2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	689b      	ldr	r3, [r3, #8]
 800f0e8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	68db      	ldr	r3, [r3, #12]
 800f0ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f0f0:	e016      	b.n	800f120 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7fd ff5b 	bl	800cfb2 <get_fat>
 800f0fc:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f0fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f100:	2b01      	cmp	r3, #1
 800f102:	d802      	bhi.n	800f10a <f_open+0x2d6>
 800f104:	2302      	movs	r3, #2
 800f106:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f10a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f110:	d102      	bne.n	800f118 <f_open+0x2e4>
 800f112:	2301      	movs	r3, #1
 800f114:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f118:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f11a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f11c:	1ad3      	subs	r3, r2, r3
 800f11e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f120:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f124:	2b00      	cmp	r3, #0
 800f126:	d103      	bne.n	800f130 <f_open+0x2fc>
 800f128:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f12a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d8e0      	bhi.n	800f0f2 <f_open+0x2be>
				}
				fp->clust = clst;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f134:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f136:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d127      	bne.n	800f18e <f_open+0x35a>
 800f13e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f144:	2b00      	cmp	r3, #0
 800f146:	d022      	beq.n	800f18e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7fd ff11 	bl	800cf74 <clust2sect>
 800f152:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800f154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f156:	2b00      	cmp	r3, #0
 800f158:	d103      	bne.n	800f162 <f_open+0x32e>
						res = FR_INT_ERR;
 800f15a:	2302      	movs	r3, #2
 800f15c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f160:	e015      	b.n	800f18e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f164:	0a5a      	lsrs	r2, r3, #9
 800f166:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f168:	441a      	add	r2, r3
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	7858      	ldrb	r0, [r3, #1]
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	6a1a      	ldr	r2, [r3, #32]
 800f17c:	2301      	movs	r3, #1
 800f17e:	f7fd fb4f 	bl	800c820 <disk_read>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d002      	beq.n	800f18e <f_open+0x35a>
 800f188:	2301      	movs	r3, #1
 800f18a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f18e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f192:	2b00      	cmp	r3, #0
 800f194:	d002      	beq.n	800f19c <f_open+0x368>
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2200      	movs	r2, #0
 800f19a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f19c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3768      	adds	r7, #104	@ 0x68
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b08e      	sub	sp, #56	@ 0x38
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	607a      	str	r2, [r7, #4]
 800f1b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f107 0214 	add.w	r2, r7, #20
 800f1c6:	4611      	mov	r1, r2
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7ff fdb7 	bl	800ed3c <validate>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f1d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d107      	bne.n	800f1ec <f_read+0x44>
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	7d5b      	ldrb	r3, [r3, #21]
 800f1e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f1e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d002      	beq.n	800f1f2 <f_read+0x4a>
 800f1ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f1f0:	e115      	b.n	800f41e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	7d1b      	ldrb	r3, [r3, #20]
 800f1f6:	f003 0301 	and.w	r3, r3, #1
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d101      	bne.n	800f202 <f_read+0x5a>
 800f1fe:	2307      	movs	r3, #7
 800f200:	e10d      	b.n	800f41e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	68da      	ldr	r2, [r3, #12]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	699b      	ldr	r3, [r3, #24]
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f20e:	687a      	ldr	r2, [r7, #4]
 800f210:	6a3b      	ldr	r3, [r7, #32]
 800f212:	429a      	cmp	r2, r3
 800f214:	f240 80fe 	bls.w	800f414 <f_read+0x26c>
 800f218:	6a3b      	ldr	r3, [r7, #32]
 800f21a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f21c:	e0fa      	b.n	800f414 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	699b      	ldr	r3, [r3, #24]
 800f222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f226:	2b00      	cmp	r3, #0
 800f228:	f040 80c6 	bne.w	800f3b8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	699b      	ldr	r3, [r3, #24]
 800f230:	0a5b      	lsrs	r3, r3, #9
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	8952      	ldrh	r2, [r2, #10]
 800f236:	3a01      	subs	r2, #1
 800f238:	4013      	ands	r3, r2
 800f23a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d12f      	bne.n	800f2a2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	699b      	ldr	r3, [r3, #24]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d103      	bne.n	800f252 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	689b      	ldr	r3, [r3, #8]
 800f24e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f250:	e013      	b.n	800f27a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f256:	2b00      	cmp	r3, #0
 800f258:	d007      	beq.n	800f26a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	699b      	ldr	r3, [r3, #24]
 800f25e:	4619      	mov	r1, r3
 800f260:	68f8      	ldr	r0, [r7, #12]
 800f262:	f7fe f934 	bl	800d4ce <clmt_clust>
 800f266:	6338      	str	r0, [r7, #48]	@ 0x30
 800f268:	e007      	b.n	800f27a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f26a:	68fa      	ldr	r2, [r7, #12]
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	69db      	ldr	r3, [r3, #28]
 800f270:	4619      	mov	r1, r3
 800f272:	4610      	mov	r0, r2
 800f274:	f7fd fe9d 	bl	800cfb2 <get_fat>
 800f278:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d804      	bhi.n	800f28a <f_read+0xe2>
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2202      	movs	r2, #2
 800f284:	755a      	strb	r2, [r3, #21]
 800f286:	2302      	movs	r3, #2
 800f288:	e0c9      	b.n	800f41e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f290:	d104      	bne.n	800f29c <f_read+0xf4>
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2201      	movs	r2, #1
 800f296:	755a      	strb	r2, [r3, #21]
 800f298:	2301      	movs	r3, #1
 800f29a:	e0c0      	b.n	800f41e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2a0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f2a2:	697a      	ldr	r2, [r7, #20]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	69db      	ldr	r3, [r3, #28]
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	4610      	mov	r0, r2
 800f2ac:	f7fd fe62 	bl	800cf74 <clust2sect>
 800f2b0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d104      	bne.n	800f2c2 <f_read+0x11a>
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	2202      	movs	r2, #2
 800f2bc:	755a      	strb	r2, [r3, #21]
 800f2be:	2302      	movs	r3, #2
 800f2c0:	e0ad      	b.n	800f41e <f_read+0x276>
			sect += csect;
 800f2c2:	69ba      	ldr	r2, [r7, #24]
 800f2c4:	69fb      	ldr	r3, [r7, #28]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	0a5b      	lsrs	r3, r3, #9
 800f2ce:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d039      	beq.n	800f34a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f2d6:	69fa      	ldr	r2, [r7, #28]
 800f2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2da:	4413      	add	r3, r2
 800f2dc:	697a      	ldr	r2, [r7, #20]
 800f2de:	8952      	ldrh	r2, [r2, #10]
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	d905      	bls.n	800f2f0 <f_read+0x148>
					cc = fs->csize - csect;
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	895b      	ldrh	r3, [r3, #10]
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	69fb      	ldr	r3, [r7, #28]
 800f2ec:	1ad3      	subs	r3, r2, r3
 800f2ee:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	7858      	ldrb	r0, [r3, #1]
 800f2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2f6:	69ba      	ldr	r2, [r7, #24]
 800f2f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f2fa:	f7fd fa91 	bl	800c820 <disk_read>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d004      	beq.n	800f30e <f_read+0x166>
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2201      	movs	r2, #1
 800f308:	755a      	strb	r2, [r3, #21]
 800f30a:	2301      	movs	r3, #1
 800f30c:	e087      	b.n	800f41e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	7d1b      	ldrb	r3, [r3, #20]
 800f312:	b25b      	sxtb	r3, r3
 800f314:	2b00      	cmp	r3, #0
 800f316:	da14      	bge.n	800f342 <f_read+0x19a>
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	6a1a      	ldr	r2, [r3, #32]
 800f31c:	69bb      	ldr	r3, [r7, #24]
 800f31e:	1ad3      	subs	r3, r2, r3
 800f320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f322:	429a      	cmp	r2, r3
 800f324:	d90d      	bls.n	800f342 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	6a1a      	ldr	r2, [r3, #32]
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	1ad3      	subs	r3, r2, r3
 800f32e:	025b      	lsls	r3, r3, #9
 800f330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f332:	18d0      	adds	r0, r2, r3
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	3330      	adds	r3, #48	@ 0x30
 800f338:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f33c:	4619      	mov	r1, r3
 800f33e:	f7fd fb4f 	bl	800c9e0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f344:	025b      	lsls	r3, r3, #9
 800f346:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800f348:	e050      	b.n	800f3ec <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	6a1b      	ldr	r3, [r3, #32]
 800f34e:	69ba      	ldr	r2, [r7, #24]
 800f350:	429a      	cmp	r2, r3
 800f352:	d02e      	beq.n	800f3b2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	7d1b      	ldrb	r3, [r3, #20]
 800f358:	b25b      	sxtb	r3, r3
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	da18      	bge.n	800f390 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	7858      	ldrb	r0, [r3, #1]
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	6a1a      	ldr	r2, [r3, #32]
 800f36c:	2301      	movs	r3, #1
 800f36e:	f7fd fa77 	bl	800c860 <disk_write>
 800f372:	4603      	mov	r3, r0
 800f374:	2b00      	cmp	r3, #0
 800f376:	d004      	beq.n	800f382 <f_read+0x1da>
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2201      	movs	r2, #1
 800f37c:	755a      	strb	r2, [r3, #21]
 800f37e:	2301      	movs	r3, #1
 800f380:	e04d      	b.n	800f41e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	7d1b      	ldrb	r3, [r3, #20]
 800f386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f38a:	b2da      	uxtb	r2, r3
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	7858      	ldrb	r0, [r3, #1]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f39a:	2301      	movs	r3, #1
 800f39c:	69ba      	ldr	r2, [r7, #24]
 800f39e:	f7fd fa3f 	bl	800c820 <disk_read>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d004      	beq.n	800f3b2 <f_read+0x20a>
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	755a      	strb	r2, [r3, #21]
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	e035      	b.n	800f41e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	69ba      	ldr	r2, [r7, #24]
 800f3b6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	699b      	ldr	r3, [r3, #24]
 800f3bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3c0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f3c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f3c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d901      	bls.n	800f3d2 <f_read+0x22a>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	699b      	ldr	r3, [r3, #24]
 800f3dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3e0:	4413      	add	r3, r2
 800f3e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f3e8:	f7fd fafa 	bl	800c9e0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f3ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f0:	4413      	add	r3, r2
 800f3f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	699a      	ldr	r2, [r3, #24]
 800f3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3fa:	441a      	add	r2, r3
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	619a      	str	r2, [r3, #24]
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	681a      	ldr	r2, [r3, #0]
 800f404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f406:	441a      	add	r2, r3
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	601a      	str	r2, [r3, #0]
 800f40c:	687a      	ldr	r2, [r7, #4]
 800f40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f410:	1ad3      	subs	r3, r2, r3
 800f412:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2b00      	cmp	r3, #0
 800f418:	f47f af01 	bne.w	800f21e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f41c:	2300      	movs	r3, #0
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3738      	adds	r7, #56	@ 0x38
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}

0800f426 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f426:	b580      	push	{r7, lr}
 800f428:	b086      	sub	sp, #24
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f107 0208 	add.w	r2, r7, #8
 800f434:	4611      	mov	r1, r2
 800f436:	4618      	mov	r0, r3
 800f438:	f7ff fc80 	bl	800ed3c <validate>
 800f43c:	4603      	mov	r3, r0
 800f43e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f440:	7dfb      	ldrb	r3, [r7, #23]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d168      	bne.n	800f518 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	7d1b      	ldrb	r3, [r3, #20]
 800f44a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d062      	beq.n	800f518 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	7d1b      	ldrb	r3, [r3, #20]
 800f456:	b25b      	sxtb	r3, r3
 800f458:	2b00      	cmp	r3, #0
 800f45a:	da15      	bge.n	800f488 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	7858      	ldrb	r0, [r3, #1]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6a1a      	ldr	r2, [r3, #32]
 800f46a:	2301      	movs	r3, #1
 800f46c:	f7fd f9f8 	bl	800c860 <disk_write>
 800f470:	4603      	mov	r3, r0
 800f472:	2b00      	cmp	r3, #0
 800f474:	d001      	beq.n	800f47a <f_sync+0x54>
 800f476:	2301      	movs	r3, #1
 800f478:	e04f      	b.n	800f51a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	7d1b      	ldrb	r3, [r3, #20]
 800f47e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f482:	b2da      	uxtb	r2, r3
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f488:	f7f9 ff9c 	bl	80093c4 <get_fattime>
 800f48c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f48e:	68ba      	ldr	r2, [r7, #8]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f494:	4619      	mov	r1, r3
 800f496:	4610      	mov	r0, r2
 800f498:	f7fd fcd0 	bl	800ce3c <move_window>
 800f49c:	4603      	mov	r3, r0
 800f49e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f4a0:	7dfb      	ldrb	r3, [r7, #23]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d138      	bne.n	800f518 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4aa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	330b      	adds	r3, #11
 800f4b0:	781a      	ldrb	r2, [r3, #0]
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	330b      	adds	r3, #11
 800f4b6:	f042 0220 	orr.w	r2, r2, #32
 800f4ba:	b2d2      	uxtb	r2, r2
 800f4bc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6818      	ldr	r0, [r3, #0]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	689b      	ldr	r3, [r3, #8]
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	68f9      	ldr	r1, [r7, #12]
 800f4ca:	f7fe f9da 	bl	800d882 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f103 021c 	add.w	r2, r3, #28
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	68db      	ldr	r3, [r3, #12]
 800f4d8:	4619      	mov	r1, r3
 800f4da:	4610      	mov	r0, r2
 800f4dc:	f7fd fa54 	bl	800c988 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	3316      	adds	r3, #22
 800f4e4:	6939      	ldr	r1, [r7, #16]
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7fd fa4e 	bl	800c988 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	3312      	adds	r3, #18
 800f4f0:	2100      	movs	r1, #0
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7fd fa2d 	bl	800c952 <st_word>
					fs->wflag = 1;
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	4618      	mov	r0, r3
 800f502:	f7fd fcc9 	bl	800ce98 <sync_fs>
 800f506:	4603      	mov	r3, r0
 800f508:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	7d1b      	ldrb	r3, [r3, #20]
 800f50e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f512:	b2da      	uxtb	r2, r3
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f518:	7dfb      	ldrb	r3, [r7, #23]
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3718      	adds	r7, #24
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}

0800f522 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f522:	b580      	push	{r7, lr}
 800f524:	b084      	sub	sp, #16
 800f526:	af00      	add	r7, sp, #0
 800f528:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7ff ff7b 	bl	800f426 <f_sync>
 800f530:	4603      	mov	r3, r0
 800f532:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f534:	7bfb      	ldrb	r3, [r7, #15]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d118      	bne.n	800f56c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f107 0208 	add.w	r2, r7, #8
 800f540:	4611      	mov	r1, r2
 800f542:	4618      	mov	r0, r3
 800f544:	f7ff fbfa 	bl	800ed3c <validate>
 800f548:	4603      	mov	r3, r0
 800f54a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f54c:	7bfb      	ldrb	r3, [r7, #15]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d10c      	bne.n	800f56c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	691b      	ldr	r3, [r3, #16]
 800f556:	4618      	mov	r0, r3
 800f558:	f7fd fbcc 	bl	800ccf4 <dec_lock>
 800f55c:	4603      	mov	r3, r0
 800f55e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f560:	7bfb      	ldrb	r3, [r7, #15]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d102      	bne.n	800f56c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2200      	movs	r2, #0
 800f56a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3710      	adds	r7, #16
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}

0800f576 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f576:	b580      	push	{r7, lr}
 800f578:	b090      	sub	sp, #64	@ 0x40
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
 800f57e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f107 0208 	add.w	r2, r7, #8
 800f586:	4611      	mov	r1, r2
 800f588:	4618      	mov	r0, r3
 800f58a:	f7ff fbd7 	bl	800ed3c <validate>
 800f58e:	4603      	mov	r3, r0
 800f590:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f594:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d103      	bne.n	800f5a4 <f_lseek+0x2e>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	7d5b      	ldrb	r3, [r3, #21]
 800f5a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f5a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d002      	beq.n	800f5b2 <f_lseek+0x3c>
 800f5ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f5b0:	e1e6      	b.n	800f980 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	f000 80d1 	beq.w	800f75e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c2:	d15a      	bne.n	800f67a <f_lseek+0x104>
			tbl = fp->cltbl;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5c8:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5cc:	1d1a      	adds	r2, r3, #4
 800f5ce:	627a      	str	r2, [r7, #36]	@ 0x24
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	617b      	str	r3, [r7, #20]
 800f5d4:	2302      	movs	r3, #2
 800f5d6:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	689b      	ldr	r3, [r3, #8]
 800f5dc:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800f5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d03a      	beq.n	800f65a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e6:	613b      	str	r3, [r7, #16]
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5ee:	3302      	adds	r3, #2
 800f5f0:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800f5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5f4:	60fb      	str	r3, [r7, #12]
 800f5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f600:	4618      	mov	r0, r3
 800f602:	f7fd fcd6 	bl	800cfb2 <get_fat>
 800f606:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	d804      	bhi.n	800f618 <f_lseek+0xa2>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2202      	movs	r2, #2
 800f612:	755a      	strb	r2, [r3, #21]
 800f614:	2302      	movs	r3, #2
 800f616:	e1b3      	b.n	800f980 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f61a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f61e:	d104      	bne.n	800f62a <f_lseek+0xb4>
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2201      	movs	r2, #1
 800f624:	755a      	strb	r2, [r3, #21]
 800f626:	2301      	movs	r3, #1
 800f628:	e1aa      	b.n	800f980 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	3301      	adds	r3, #1
 800f62e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f630:	429a      	cmp	r2, r3
 800f632:	d0de      	beq.n	800f5f2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f634:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	429a      	cmp	r2, r3
 800f63a:	d809      	bhi.n	800f650 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f63e:	1d1a      	adds	r2, r3, #4
 800f640:	627a      	str	r2, [r7, #36]	@ 0x24
 800f642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f644:	601a      	str	r2, [r3, #0]
 800f646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f648:	1d1a      	adds	r2, r3, #4
 800f64a:	627a      	str	r2, [r7, #36]	@ 0x24
 800f64c:	693a      	ldr	r2, [r7, #16]
 800f64e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	699b      	ldr	r3, [r3, #24]
 800f654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f656:	429a      	cmp	r2, r3
 800f658:	d3c4      	bcc.n	800f5e4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f65e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f660:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	429a      	cmp	r2, r3
 800f668:	d803      	bhi.n	800f672 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f66c:	2200      	movs	r2, #0
 800f66e:	601a      	str	r2, [r3, #0]
 800f670:	e184      	b.n	800f97c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f672:	2311      	movs	r3, #17
 800f674:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800f678:	e180      	b.n	800f97c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	683a      	ldr	r2, [r7, #0]
 800f680:	429a      	cmp	r2, r3
 800f682:	d902      	bls.n	800f68a <f_lseek+0x114>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	683a      	ldr	r2, [r7, #0]
 800f68e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	2b00      	cmp	r3, #0
 800f694:	f000 8172 	beq.w	800f97c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	3b01      	subs	r3, #1
 800f69c:	4619      	mov	r1, r3
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f7fd ff15 	bl	800d4ce <clmt_clust>
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f6aa:	68ba      	ldr	r2, [r7, #8]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	69db      	ldr	r3, [r3, #28]
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	4610      	mov	r0, r2
 800f6b4:	f7fd fc5e 	bl	800cf74 <clust2sect>
 800f6b8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f6ba:	69bb      	ldr	r3, [r7, #24]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d104      	bne.n	800f6ca <f_lseek+0x154>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2202      	movs	r2, #2
 800f6c4:	755a      	strb	r2, [r3, #21]
 800f6c6:	2302      	movs	r3, #2
 800f6c8:	e15a      	b.n	800f980 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	3b01      	subs	r3, #1
 800f6ce:	0a5b      	lsrs	r3, r3, #9
 800f6d0:	68ba      	ldr	r2, [r7, #8]
 800f6d2:	8952      	ldrh	r2, [r2, #10]
 800f6d4:	3a01      	subs	r2, #1
 800f6d6:	4013      	ands	r3, r2
 800f6d8:	69ba      	ldr	r2, [r7, #24]
 800f6da:	4413      	add	r3, r2
 800f6dc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	699b      	ldr	r3, [r3, #24]
 800f6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	f000 8148 	beq.w	800f97c <f_lseek+0x406>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6a1b      	ldr	r3, [r3, #32]
 800f6f0:	69ba      	ldr	r2, [r7, #24]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	f000 8142 	beq.w	800f97c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	7d1b      	ldrb	r3, [r3, #20]
 800f6fc:	b25b      	sxtb	r3, r3
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	da18      	bge.n	800f734 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	7858      	ldrb	r0, [r3, #1]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6a1a      	ldr	r2, [r3, #32]
 800f710:	2301      	movs	r3, #1
 800f712:	f7fd f8a5 	bl	800c860 <disk_write>
 800f716:	4603      	mov	r3, r0
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d004      	beq.n	800f726 <f_lseek+0x1b0>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2201      	movs	r2, #1
 800f720:	755a      	strb	r2, [r3, #21]
 800f722:	2301      	movs	r3, #1
 800f724:	e12c      	b.n	800f980 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	7d1b      	ldrb	r3, [r3, #20]
 800f72a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f72e:	b2da      	uxtb	r2, r3
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	7858      	ldrb	r0, [r3, #1]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f73e:	2301      	movs	r3, #1
 800f740:	69ba      	ldr	r2, [r7, #24]
 800f742:	f7fd f86d 	bl	800c820 <disk_read>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d004      	beq.n	800f756 <f_lseek+0x1e0>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2201      	movs	r2, #1
 800f750:	755a      	strb	r2, [r3, #21]
 800f752:	2301      	movs	r3, #1
 800f754:	e114      	b.n	800f980 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	69ba      	ldr	r2, [r7, #24]
 800f75a:	621a      	str	r2, [r3, #32]
 800f75c:	e10e      	b.n	800f97c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	683a      	ldr	r2, [r7, #0]
 800f764:	429a      	cmp	r2, r3
 800f766:	d908      	bls.n	800f77a <f_lseek+0x204>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	7d1b      	ldrb	r3, [r3, #20]
 800f76c:	f003 0302 	and.w	r3, r3, #2
 800f770:	2b00      	cmp	r3, #0
 800f772:	d102      	bne.n	800f77a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	699b      	ldr	r3, [r3, #24]
 800f77e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f780:	2300      	movs	r3, #0
 800f782:	637b      	str	r3, [r7, #52]	@ 0x34
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f788:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f000 80a7 	beq.w	800f8e0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	895b      	ldrh	r3, [r3, #10]
 800f796:	025b      	lsls	r3, r3, #9
 800f798:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f79a:	6a3b      	ldr	r3, [r7, #32]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d01b      	beq.n	800f7d8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	1e5a      	subs	r2, r3, #1
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	fbb2 f2f3 	udiv	r2, r2, r3
 800f7aa:	6a3b      	ldr	r3, [r7, #32]
 800f7ac:	1e59      	subs	r1, r3, #1
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d30f      	bcc.n	800f7d8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f7b8:	6a3b      	ldr	r3, [r7, #32]
 800f7ba:	1e5a      	subs	r2, r3, #1
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	425b      	negs	r3, r3
 800f7c0:	401a      	ands	r2, r3
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	699b      	ldr	r3, [r3, #24]
 800f7ca:	683a      	ldr	r2, [r7, #0]
 800f7cc:	1ad3      	subs	r3, r2, r3
 800f7ce:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	69db      	ldr	r3, [r3, #28]
 800f7d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f7d6:	e022      	b.n	800f81e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	689b      	ldr	r3, [r3, #8]
 800f7dc:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d119      	bne.n	800f818 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2100      	movs	r1, #0
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7fd fdd8 	bl	800d39e <create_chain>
 800f7ee:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7f2:	2b01      	cmp	r3, #1
 800f7f4:	d104      	bne.n	800f800 <f_lseek+0x28a>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2202      	movs	r2, #2
 800f7fa:	755a      	strb	r2, [r3, #21]
 800f7fc:	2302      	movs	r3, #2
 800f7fe:	e0bf      	b.n	800f980 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f806:	d104      	bne.n	800f812 <f_lseek+0x29c>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2201      	movs	r2, #1
 800f80c:	755a      	strb	r2, [r3, #21]
 800f80e:	2301      	movs	r3, #1
 800f810:	e0b6      	b.n	800f980 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f816:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f81c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f820:	2b00      	cmp	r3, #0
 800f822:	d05d      	beq.n	800f8e0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f824:	e03a      	b.n	800f89c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800f826:	683a      	ldr	r2, [r7, #0]
 800f828:	69fb      	ldr	r3, [r7, #28]
 800f82a:	1ad3      	subs	r3, r2, r3
 800f82c:	603b      	str	r3, [r7, #0]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	699a      	ldr	r2, [r3, #24]
 800f832:	69fb      	ldr	r3, [r7, #28]
 800f834:	441a      	add	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	7d1b      	ldrb	r3, [r3, #20]
 800f83e:	f003 0302 	and.w	r3, r3, #2
 800f842:	2b00      	cmp	r3, #0
 800f844:	d00b      	beq.n	800f85e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fd fda7 	bl	800d39e <create_chain>
 800f850:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f854:	2b00      	cmp	r3, #0
 800f856:	d108      	bne.n	800f86a <f_lseek+0x2f4>
							ofs = 0; break;
 800f858:	2300      	movs	r3, #0
 800f85a:	603b      	str	r3, [r7, #0]
 800f85c:	e022      	b.n	800f8a4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f862:	4618      	mov	r0, r3
 800f864:	f7fd fba5 	bl	800cfb2 <get_fat>
 800f868:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f870:	d104      	bne.n	800f87c <f_lseek+0x306>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2201      	movs	r2, #1
 800f876:	755a      	strb	r2, [r3, #21]
 800f878:	2301      	movs	r3, #1
 800f87a:	e081      	b.n	800f980 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d904      	bls.n	800f88c <f_lseek+0x316>
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	699b      	ldr	r3, [r3, #24]
 800f886:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f888:	429a      	cmp	r2, r3
 800f88a:	d304      	bcc.n	800f896 <f_lseek+0x320>
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2202      	movs	r2, #2
 800f890:	755a      	strb	r2, [r3, #21]
 800f892:	2302      	movs	r3, #2
 800f894:	e074      	b.n	800f980 <f_lseek+0x40a>
					fp->clust = clst;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f89a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f89c:	683a      	ldr	r2, [r7, #0]
 800f89e:	69fb      	ldr	r3, [r7, #28]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d8c0      	bhi.n	800f826 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	699a      	ldr	r2, [r3, #24]
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	441a      	add	r2, r3
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d012      	beq.n	800f8e0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7fd fb58 	bl	800cf74 <clust2sect>
 800f8c4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f8c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d104      	bne.n	800f8d6 <f_lseek+0x360>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2202      	movs	r2, #2
 800f8d0:	755a      	strb	r2, [r3, #21]
 800f8d2:	2302      	movs	r3, #2
 800f8d4:	e054      	b.n	800f980 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	0a5b      	lsrs	r3, r3, #9
 800f8da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f8dc:	4413      	add	r3, r2
 800f8de:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	699a      	ldr	r2, [r3, #24]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	68db      	ldr	r3, [r3, #12]
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d90a      	bls.n	800f902 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	699a      	ldr	r2, [r3, #24]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	7d1b      	ldrb	r3, [r3, #20]
 800f8f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8fc:	b2da      	uxtb	r2, r3
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	699b      	ldr	r3, [r3, #24]
 800f906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d036      	beq.n	800f97c <f_lseek+0x406>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6a1b      	ldr	r3, [r3, #32]
 800f912:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f914:	429a      	cmp	r2, r3
 800f916:	d031      	beq.n	800f97c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	7d1b      	ldrb	r3, [r3, #20]
 800f91c:	b25b      	sxtb	r3, r3
 800f91e:	2b00      	cmp	r3, #0
 800f920:	da18      	bge.n	800f954 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	7858      	ldrb	r0, [r3, #1]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6a1a      	ldr	r2, [r3, #32]
 800f930:	2301      	movs	r3, #1
 800f932:	f7fc ff95 	bl	800c860 <disk_write>
 800f936:	4603      	mov	r3, r0
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d004      	beq.n	800f946 <f_lseek+0x3d0>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2201      	movs	r2, #1
 800f940:	755a      	strb	r2, [r3, #21]
 800f942:	2301      	movs	r3, #1
 800f944:	e01c      	b.n	800f980 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	7d1b      	ldrb	r3, [r3, #20]
 800f94a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f94e:	b2da      	uxtb	r2, r3
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	7858      	ldrb	r0, [r3, #1]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f95e:	2301      	movs	r3, #1
 800f960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f962:	f7fc ff5d 	bl	800c820 <disk_read>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d004      	beq.n	800f976 <f_lseek+0x400>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2201      	movs	r2, #1
 800f970:	755a      	strb	r2, [r3, #21]
 800f972:	2301      	movs	r3, #1
 800f974:	e004      	b.n	800f980 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f97a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f97c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f980:	4618      	mov	r0, r3
 800f982:	3740      	adds	r7, #64	@ 0x40
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b086      	sub	sp, #24
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d101      	bne.n	800f99c <f_opendir+0x14>
 800f998:	2309      	movs	r3, #9
 800f99a:	e064      	b.n	800fa66 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f9a0:	f107 010c 	add.w	r1, r7, #12
 800f9a4:	463b      	mov	r3, r7
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7fe ff77 	bl	800e89c <find_volume>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f9b2:	7dfb      	ldrb	r3, [r7, #23]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d14f      	bne.n	800fa58 <f_opendir+0xd0>
		obj->fs = fs;
 800f9b8:	68fa      	ldr	r2, [r7, #12]
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7fe fe5e 	bl	800e684 <follow_path>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f9cc:	7dfb      	ldrb	r3, [r7, #23]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d13d      	bne.n	800fa4e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f9d8:	b25b      	sxtb	r3, r3
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	db12      	blt.n	800fa04 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	799b      	ldrb	r3, [r3, #6]
 800f9e2:	f003 0310 	and.w	r3, r3, #16
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d00a      	beq.n	800fa00 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f9ea:	68fa      	ldr	r2, [r7, #12]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6a1b      	ldr	r3, [r3, #32]
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	4610      	mov	r0, r2
 800f9f4:	f7fd ff26 	bl	800d844 <ld_clust>
 800f9f8:	4602      	mov	r2, r0
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	609a      	str	r2, [r3, #8]
 800f9fe:	e001      	b.n	800fa04 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800fa00:	2305      	movs	r3, #5
 800fa02:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800fa04:	7dfb      	ldrb	r3, [r7, #23]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d121      	bne.n	800fa4e <f_opendir+0xc6>
				obj->id = fs->id;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	88da      	ldrh	r2, [r3, #6]
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fa12:	2100      	movs	r1, #0
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f7fd fd8e 	bl	800d536 <dir_sdi>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800fa1e:	7dfb      	ldrb	r3, [r7, #23]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d114      	bne.n	800fa4e <f_opendir+0xc6>
					if (obj->sclust) {
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	689b      	ldr	r3, [r3, #8]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d00d      	beq.n	800fa48 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f7fd f8d2 	bl	800cbd8 <inc_lock>
 800fa34:	4602      	mov	r2, r0
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	691b      	ldr	r3, [r3, #16]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d105      	bne.n	800fa4e <f_opendir+0xc6>
 800fa42:	2312      	movs	r3, #18
 800fa44:	75fb      	strb	r3, [r7, #23]
 800fa46:	e002      	b.n	800fa4e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800fa4e:	7dfb      	ldrb	r3, [r7, #23]
 800fa50:	2b04      	cmp	r3, #4
 800fa52:	d101      	bne.n	800fa58 <f_opendir+0xd0>
 800fa54:	2305      	movs	r3, #5
 800fa56:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800fa58:	7dfb      	ldrb	r3, [r7, #23]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d002      	beq.n	800fa64 <f_opendir+0xdc>
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	2200      	movs	r2, #0
 800fa62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fa64:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3718      	adds	r7, #24
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}

0800fa6e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800fa6e:	b580      	push	{r7, lr}
 800fa70:	b084      	sub	sp, #16
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f107 0208 	add.w	r2, r7, #8
 800fa7c:	4611      	mov	r1, r2
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7ff f95c 	bl	800ed3c <validate>
 800fa84:	4603      	mov	r3, r0
 800fa86:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fa88:	7bfb      	ldrb	r3, [r7, #15]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d110      	bne.n	800fab0 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	691b      	ldr	r3, [r3, #16]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d006      	beq.n	800faa4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	691b      	ldr	r3, [r3, #16]
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f7fd f92a 	bl	800ccf4 <dec_lock>
 800faa0:	4603      	mov	r3, r0
 800faa2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800faa4:	7bfb      	ldrb	r3, [r7, #15]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d102      	bne.n	800fab0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2200      	movs	r2, #0
 800faae:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800fab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3710      	adds	r7, #16
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}

0800faba <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800faba:	b580      	push	{r7, lr}
 800fabc:	b084      	sub	sp, #16
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
 800fac2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f107 0208 	add.w	r2, r7, #8
 800faca:	4611      	mov	r1, r2
 800facc:	4618      	mov	r0, r3
 800face:	f7ff f935 	bl	800ed3c <validate>
 800fad2:	4603      	mov	r3, r0
 800fad4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fad6:	7bfb      	ldrb	r3, [r7, #15]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d126      	bne.n	800fb2a <f_readdir+0x70>
		if (!fno) {
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d106      	bne.n	800faf0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800fae2:	2100      	movs	r1, #0
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f7fd fd26 	bl	800d536 <dir_sdi>
 800faea:	4603      	mov	r3, r0
 800faec:	73fb      	strb	r3, [r7, #15]
 800faee:	e01c      	b.n	800fb2a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800faf0:	2100      	movs	r1, #0
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f7fe f8d1 	bl	800dc9a <dir_read>
 800faf8:	4603      	mov	r3, r0
 800fafa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800fafc:	7bfb      	ldrb	r3, [r7, #15]
 800fafe:	2b04      	cmp	r3, #4
 800fb00:	d101      	bne.n	800fb06 <f_readdir+0x4c>
 800fb02:	2300      	movs	r3, #0
 800fb04:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800fb06:	7bfb      	ldrb	r3, [r7, #15]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d10e      	bne.n	800fb2a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800fb0c:	6839      	ldr	r1, [r7, #0]
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f7fe fb22 	bl	800e158 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fb14:	2100      	movs	r1, #0
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f7fd fd88 	bl	800d62c <dir_next>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fb20:	7bfb      	ldrb	r3, [r7, #15]
 800fb22:	2b04      	cmp	r3, #4
 800fb24:	d101      	bne.n	800fb2a <f_readdir+0x70>
 800fb26:	2300      	movs	r3, #0
 800fb28:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800fb2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3710      	adds	r7, #16
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b087      	sub	sp, #28
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	60b9      	str	r1, [r7, #8]
 800fb3e:	4613      	mov	r3, r2
 800fb40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fb42:	2301      	movs	r3, #1
 800fb44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fb46:	2300      	movs	r3, #0
 800fb48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fb4a:	4b1f      	ldr	r3, [pc, #124]	@ (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb4c:	7a5b      	ldrb	r3, [r3, #9]
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d131      	bne.n	800fbb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fb54:	4b1c      	ldr	r3, [pc, #112]	@ (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb56:	7a5b      	ldrb	r3, [r3, #9]
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	4b1a      	ldr	r3, [pc, #104]	@ (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb5e:	2100      	movs	r1, #0
 800fb60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fb62:	4b19      	ldr	r3, [pc, #100]	@ (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb64:	7a5b      	ldrb	r3, [r3, #9]
 800fb66:	b2db      	uxtb	r3, r3
 800fb68:	4a17      	ldr	r2, [pc, #92]	@ (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb6a:	009b      	lsls	r3, r3, #2
 800fb6c:	4413      	add	r3, r2
 800fb6e:	68fa      	ldr	r2, [r7, #12]
 800fb70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fb72:	4b15      	ldr	r3, [pc, #84]	@ (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb74:	7a5b      	ldrb	r3, [r3, #9]
 800fb76:	b2db      	uxtb	r3, r3
 800fb78:	461a      	mov	r2, r3
 800fb7a:	4b13      	ldr	r3, [pc, #76]	@ (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb7c:	4413      	add	r3, r2
 800fb7e:	79fa      	ldrb	r2, [r7, #7]
 800fb80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fb82:	4b11      	ldr	r3, [pc, #68]	@ (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb84:	7a5b      	ldrb	r3, [r3, #9]
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	1c5a      	adds	r2, r3, #1
 800fb8a:	b2d1      	uxtb	r1, r2
 800fb8c:	4a0e      	ldr	r2, [pc, #56]	@ (800fbc8 <FATFS_LinkDriverEx+0x94>)
 800fb8e:	7251      	strb	r1, [r2, #9]
 800fb90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fb92:	7dbb      	ldrb	r3, [r7, #22]
 800fb94:	3330      	adds	r3, #48	@ 0x30
 800fb96:	b2da      	uxtb	r2, r3
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	223a      	movs	r2, #58	@ 0x3a
 800fba2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	3302      	adds	r3, #2
 800fba8:	222f      	movs	r2, #47	@ 0x2f
 800fbaa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	3303      	adds	r3, #3
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fbb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	371c      	adds	r7, #28
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr
 800fbc6:	bf00      	nop
 800fbc8:	20001d8c 	.word	0x20001d8c

0800fbcc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	6839      	ldr	r1, [r7, #0]
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f7ff ffaa 	bl	800fb34 <FATFS_LinkDriverEx>
 800fbe0:	4603      	mov	r3, r0
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3708      	adds	r7, #8
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
	...

0800fbec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	6039      	str	r1, [r7, #0]
 800fbf6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fbf8:	88fb      	ldrh	r3, [r7, #6]
 800fbfa:	2b7f      	cmp	r3, #127	@ 0x7f
 800fbfc:	d802      	bhi.n	800fc04 <ff_convert+0x18>
		c = chr;
 800fbfe:	88fb      	ldrh	r3, [r7, #6]
 800fc00:	81fb      	strh	r3, [r7, #14]
 800fc02:	e025      	b.n	800fc50 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d00b      	beq.n	800fc22 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fc0a:	88fb      	ldrh	r3, [r7, #6]
 800fc0c:	2bff      	cmp	r3, #255	@ 0xff
 800fc0e:	d805      	bhi.n	800fc1c <ff_convert+0x30>
 800fc10:	88fb      	ldrh	r3, [r7, #6]
 800fc12:	3b80      	subs	r3, #128	@ 0x80
 800fc14:	4a12      	ldr	r2, [pc, #72]	@ (800fc60 <ff_convert+0x74>)
 800fc16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc1a:	e000      	b.n	800fc1e <ff_convert+0x32>
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	81fb      	strh	r3, [r7, #14]
 800fc20:	e016      	b.n	800fc50 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fc22:	2300      	movs	r3, #0
 800fc24:	81fb      	strh	r3, [r7, #14]
 800fc26:	e009      	b.n	800fc3c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fc28:	89fb      	ldrh	r3, [r7, #14]
 800fc2a:	4a0d      	ldr	r2, [pc, #52]	@ (800fc60 <ff_convert+0x74>)
 800fc2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc30:	88fa      	ldrh	r2, [r7, #6]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d006      	beq.n	800fc44 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fc36:	89fb      	ldrh	r3, [r7, #14]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	81fb      	strh	r3, [r7, #14]
 800fc3c:	89fb      	ldrh	r3, [r7, #14]
 800fc3e:	2b7f      	cmp	r3, #127	@ 0x7f
 800fc40:	d9f2      	bls.n	800fc28 <ff_convert+0x3c>
 800fc42:	e000      	b.n	800fc46 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fc44:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fc46:	89fb      	ldrh	r3, [r7, #14]
 800fc48:	3380      	adds	r3, #128	@ 0x80
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	b2db      	uxtb	r3, r3
 800fc4e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fc50:	89fb      	ldrh	r3, [r7, #14]
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3714      	adds	r7, #20
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr
 800fc5e:	bf00      	nop
 800fc60:	0801088c 	.word	0x0801088c

0800fc64 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b087      	sub	sp, #28
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fc6e:	88fb      	ldrh	r3, [r7, #6]
 800fc70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fc74:	d201      	bcs.n	800fc7a <ff_wtoupper+0x16>
 800fc76:	4b3e      	ldr	r3, [pc, #248]	@ (800fd70 <ff_wtoupper+0x10c>)
 800fc78:	e000      	b.n	800fc7c <ff_wtoupper+0x18>
 800fc7a:	4b3e      	ldr	r3, [pc, #248]	@ (800fd74 <ff_wtoupper+0x110>)
 800fc7c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	1c9a      	adds	r2, r3, #2
 800fc82:	617a      	str	r2, [r7, #20]
 800fc84:	881b      	ldrh	r3, [r3, #0]
 800fc86:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fc88:	8a7b      	ldrh	r3, [r7, #18]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d068      	beq.n	800fd60 <ff_wtoupper+0xfc>
 800fc8e:	88fa      	ldrh	r2, [r7, #6]
 800fc90:	8a7b      	ldrh	r3, [r7, #18]
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d364      	bcc.n	800fd60 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	1c9a      	adds	r2, r3, #2
 800fc9a:	617a      	str	r2, [r7, #20]
 800fc9c:	881b      	ldrh	r3, [r3, #0]
 800fc9e:	823b      	strh	r3, [r7, #16]
 800fca0:	8a3b      	ldrh	r3, [r7, #16]
 800fca2:	0a1b      	lsrs	r3, r3, #8
 800fca4:	81fb      	strh	r3, [r7, #14]
 800fca6:	8a3b      	ldrh	r3, [r7, #16]
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fcac:	88fa      	ldrh	r2, [r7, #6]
 800fcae:	8a79      	ldrh	r1, [r7, #18]
 800fcb0:	8a3b      	ldrh	r3, [r7, #16]
 800fcb2:	440b      	add	r3, r1
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	da49      	bge.n	800fd4c <ff_wtoupper+0xe8>
			switch (cmd) {
 800fcb8:	89fb      	ldrh	r3, [r7, #14]
 800fcba:	2b08      	cmp	r3, #8
 800fcbc:	d84f      	bhi.n	800fd5e <ff_wtoupper+0xfa>
 800fcbe:	a201      	add	r2, pc, #4	@ (adr r2, 800fcc4 <ff_wtoupper+0x60>)
 800fcc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcc4:	0800fce9 	.word	0x0800fce9
 800fcc8:	0800fcfb 	.word	0x0800fcfb
 800fccc:	0800fd11 	.word	0x0800fd11
 800fcd0:	0800fd19 	.word	0x0800fd19
 800fcd4:	0800fd21 	.word	0x0800fd21
 800fcd8:	0800fd29 	.word	0x0800fd29
 800fcdc:	0800fd31 	.word	0x0800fd31
 800fce0:	0800fd39 	.word	0x0800fd39
 800fce4:	0800fd41 	.word	0x0800fd41
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fce8:	88fa      	ldrh	r2, [r7, #6]
 800fcea:	8a7b      	ldrh	r3, [r7, #18]
 800fcec:	1ad3      	subs	r3, r2, r3
 800fcee:	005b      	lsls	r3, r3, #1
 800fcf0:	697a      	ldr	r2, [r7, #20]
 800fcf2:	4413      	add	r3, r2
 800fcf4:	881b      	ldrh	r3, [r3, #0]
 800fcf6:	80fb      	strh	r3, [r7, #6]
 800fcf8:	e027      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fcfa:	88fa      	ldrh	r2, [r7, #6]
 800fcfc:	8a7b      	ldrh	r3, [r7, #18]
 800fcfe:	1ad3      	subs	r3, r2, r3
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	f003 0301 	and.w	r3, r3, #1
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	88fa      	ldrh	r2, [r7, #6]
 800fd0a:	1ad3      	subs	r3, r2, r3
 800fd0c:	80fb      	strh	r3, [r7, #6]
 800fd0e:	e01c      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fd10:	88fb      	ldrh	r3, [r7, #6]
 800fd12:	3b10      	subs	r3, #16
 800fd14:	80fb      	strh	r3, [r7, #6]
 800fd16:	e018      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fd18:	88fb      	ldrh	r3, [r7, #6]
 800fd1a:	3b20      	subs	r3, #32
 800fd1c:	80fb      	strh	r3, [r7, #6]
 800fd1e:	e014      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fd20:	88fb      	ldrh	r3, [r7, #6]
 800fd22:	3b30      	subs	r3, #48	@ 0x30
 800fd24:	80fb      	strh	r3, [r7, #6]
 800fd26:	e010      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fd28:	88fb      	ldrh	r3, [r7, #6]
 800fd2a:	3b1a      	subs	r3, #26
 800fd2c:	80fb      	strh	r3, [r7, #6]
 800fd2e:	e00c      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fd30:	88fb      	ldrh	r3, [r7, #6]
 800fd32:	3308      	adds	r3, #8
 800fd34:	80fb      	strh	r3, [r7, #6]
 800fd36:	e008      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fd38:	88fb      	ldrh	r3, [r7, #6]
 800fd3a:	3b50      	subs	r3, #80	@ 0x50
 800fd3c:	80fb      	strh	r3, [r7, #6]
 800fd3e:	e004      	b.n	800fd4a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fd40:	88fb      	ldrh	r3, [r7, #6]
 800fd42:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800fd46:	80fb      	strh	r3, [r7, #6]
 800fd48:	bf00      	nop
			}
			break;
 800fd4a:	e008      	b.n	800fd5e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fd4c:	89fb      	ldrh	r3, [r7, #14]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d195      	bne.n	800fc7e <ff_wtoupper+0x1a>
 800fd52:	8a3b      	ldrh	r3, [r7, #16]
 800fd54:	005b      	lsls	r3, r3, #1
 800fd56:	697a      	ldr	r2, [r7, #20]
 800fd58:	4413      	add	r3, r2
 800fd5a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fd5c:	e78f      	b.n	800fc7e <ff_wtoupper+0x1a>
			break;
 800fd5e:	bf00      	nop
	}

	return chr;
 800fd60:	88fb      	ldrh	r3, [r7, #6]
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	371c      	adds	r7, #28
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr
 800fd6e:	bf00      	nop
 800fd70:	0801098c 	.word	0x0801098c
 800fd74:	08010b80 	.word	0x08010b80

0800fd78 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	490e      	ldr	r1, [pc, #56]	@ (800fdb8 <MX_USB_HOST_Init+0x40>)
 800fd80:	480e      	ldr	r0, [pc, #56]	@ (800fdbc <MX_USB_HOST_Init+0x44>)
 800fd82:	f7fb f828 	bl	800add6 <USBH_Init>
 800fd86:	4603      	mov	r3, r0
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d001      	beq.n	800fd90 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800fd8c:	f7f1 fcfa 	bl	8001784 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800fd90:	490b      	ldr	r1, [pc, #44]	@ (800fdc0 <MX_USB_HOST_Init+0x48>)
 800fd92:	480a      	ldr	r0, [pc, #40]	@ (800fdbc <MX_USB_HOST_Init+0x44>)
 800fd94:	f7fb f8cc 	bl	800af30 <USBH_RegisterClass>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d001      	beq.n	800fda2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800fd9e:	f7f1 fcf1 	bl	8001784 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800fda2:	4806      	ldr	r0, [pc, #24]	@ (800fdbc <MX_USB_HOST_Init+0x44>)
 800fda4:	f7fb f950 	bl	800b048 <USBH_Start>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d001      	beq.n	800fdb2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800fdae:	f7f1 fce9 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800fdb2:	bf00      	nop
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	0800fdd9 	.word	0x0800fdd9
 800fdbc:	20001d98 	.word	0x20001d98
 800fdc0:	20000048 	.word	0x20000048

0800fdc4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800fdc8:	4802      	ldr	r0, [pc, #8]	@ (800fdd4 <MX_USB_HOST_Process+0x10>)
 800fdca:	f7fb f94d 	bl	800b068 <USBH_Process>
}
 800fdce:	bf00      	nop
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	20001d98 	.word	0x20001d98

0800fdd8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b083      	sub	sp, #12
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	460b      	mov	r3, r1
 800fde2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fde4:	78fb      	ldrb	r3, [r7, #3]
 800fde6:	3b01      	subs	r3, #1
 800fde8:	2b04      	cmp	r3, #4
 800fdea:	d819      	bhi.n	800fe20 <USBH_UserProcess+0x48>
 800fdec:	a201      	add	r2, pc, #4	@ (adr r2, 800fdf4 <USBH_UserProcess+0x1c>)
 800fdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdf2:	bf00      	nop
 800fdf4:	0800fe21 	.word	0x0800fe21
 800fdf8:	0800fe11 	.word	0x0800fe11
 800fdfc:	0800fe21 	.word	0x0800fe21
 800fe00:	0800fe19 	.word	0x0800fe19
 800fe04:	0800fe09 	.word	0x0800fe09
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800fe08:	4b09      	ldr	r3, [pc, #36]	@ (800fe30 <USBH_UserProcess+0x58>)
 800fe0a:	2203      	movs	r2, #3
 800fe0c:	701a      	strb	r2, [r3, #0]
  break;
 800fe0e:	e008      	b.n	800fe22 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800fe10:	4b07      	ldr	r3, [pc, #28]	@ (800fe30 <USBH_UserProcess+0x58>)
 800fe12:	2202      	movs	r2, #2
 800fe14:	701a      	strb	r2, [r3, #0]
  break;
 800fe16:	e004      	b.n	800fe22 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800fe18:	4b05      	ldr	r3, [pc, #20]	@ (800fe30 <USBH_UserProcess+0x58>)
 800fe1a:	2201      	movs	r2, #1
 800fe1c:	701a      	strb	r2, [r3, #0]
  break;
 800fe1e:	e000      	b.n	800fe22 <USBH_UserProcess+0x4a>

  default:
  break;
 800fe20:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800fe22:	bf00      	nop
 800fe24:	370c      	adds	r7, #12
 800fe26:	46bd      	mov	sp, r7
 800fe28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2c:	4770      	bx	lr
 800fe2e:	bf00      	nop
 800fe30:	20002170 	.word	0x20002170

0800fe34 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b08a      	sub	sp, #40	@ 0x28
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe3c:	f107 0314 	add.w	r3, r7, #20
 800fe40:	2200      	movs	r2, #0
 800fe42:	601a      	str	r2, [r3, #0]
 800fe44:	605a      	str	r2, [r3, #4]
 800fe46:	609a      	str	r2, [r3, #8]
 800fe48:	60da      	str	r2, [r3, #12]
 800fe4a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fe54:	d147      	bne.n	800fee6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe56:	2300      	movs	r3, #0
 800fe58:	613b      	str	r3, [r7, #16]
 800fe5a:	4b25      	ldr	r3, [pc, #148]	@ (800fef0 <HAL_HCD_MspInit+0xbc>)
 800fe5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe5e:	4a24      	ldr	r2, [pc, #144]	@ (800fef0 <HAL_HCD_MspInit+0xbc>)
 800fe60:	f043 0301 	orr.w	r3, r3, #1
 800fe64:	6313      	str	r3, [r2, #48]	@ 0x30
 800fe66:	4b22      	ldr	r3, [pc, #136]	@ (800fef0 <HAL_HCD_MspInit+0xbc>)
 800fe68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe6a:	f003 0301 	and.w	r3, r3, #1
 800fe6e:	613b      	str	r3, [r7, #16]
 800fe70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800fe72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fe76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe80:	f107 0314 	add.w	r3, r7, #20
 800fe84:	4619      	mov	r1, r3
 800fe86:	481b      	ldr	r0, [pc, #108]	@ (800fef4 <HAL_HCD_MspInit+0xc0>)
 800fe88:	f7f2 fe2e 	bl	8002ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fe8c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800fe90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe92:	2302      	movs	r3, #2
 800fe94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe96:	2300      	movs	r3, #0
 800fe98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe9a:	2303      	movs	r3, #3
 800fe9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fe9e:	230a      	movs	r3, #10
 800fea0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fea2:	f107 0314 	add.w	r3, r7, #20
 800fea6:	4619      	mov	r1, r3
 800fea8:	4812      	ldr	r0, [pc, #72]	@ (800fef4 <HAL_HCD_MspInit+0xc0>)
 800feaa:	f7f2 fe1d 	bl	8002ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800feae:	4b10      	ldr	r3, [pc, #64]	@ (800fef0 <HAL_HCD_MspInit+0xbc>)
 800feb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800feb2:	4a0f      	ldr	r2, [pc, #60]	@ (800fef0 <HAL_HCD_MspInit+0xbc>)
 800feb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800feb8:	6353      	str	r3, [r2, #52]	@ 0x34
 800feba:	2300      	movs	r3, #0
 800febc:	60fb      	str	r3, [r7, #12]
 800febe:	4b0c      	ldr	r3, [pc, #48]	@ (800fef0 <HAL_HCD_MspInit+0xbc>)
 800fec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fec2:	4a0b      	ldr	r2, [pc, #44]	@ (800fef0 <HAL_HCD_MspInit+0xbc>)
 800fec4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800fec8:	6453      	str	r3, [r2, #68]	@ 0x44
 800feca:	4b09      	ldr	r3, [pc, #36]	@ (800fef0 <HAL_HCD_MspInit+0xbc>)
 800fecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fed2:	60fb      	str	r3, [r7, #12]
 800fed4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fed6:	2200      	movs	r2, #0
 800fed8:	2100      	movs	r1, #0
 800feda:	2043      	movs	r0, #67	@ 0x43
 800fedc:	f7f2 f98f 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fee0:	2043      	movs	r0, #67	@ 0x43
 800fee2:	f7f2 f9a8 	bl	8002236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fee6:	bf00      	nop
 800fee8:	3728      	adds	r7, #40	@ 0x28
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	bf00      	nop
 800fef0:	40023800 	.word	0x40023800
 800fef4:	40020000 	.word	0x40020000

0800fef8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7fb fc85 	bl	800b816 <USBH_LL_IncTimer>
}
 800ff0c:	bf00      	nop
 800ff0e:	3708      	adds	r7, #8
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}

0800ff14 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7fb fcbd 	bl	800b8a2 <USBH_LL_Connect>
}
 800ff28:	bf00      	nop
 800ff2a:	3708      	adds	r7, #8
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7fb fcc6 	bl	800b8d0 <USBH_LL_Disconnect>
}
 800ff44:	bf00      	nop
 800ff46:	3708      	adds	r7, #8
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b083      	sub	sp, #12
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	460b      	mov	r3, r1
 800ff56:	70fb      	strb	r3, [r7, #3]
 800ff58:	4613      	mov	r3, r2
 800ff5a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ff5c:	bf00      	nop
 800ff5e:	370c      	adds	r7, #12
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr

0800ff68 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fb fc77 	bl	800b86a <USBH_LL_PortEnabled>
}
 800ff7c:	bf00      	nop
 800ff7e:	3708      	adds	r7, #8
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b082      	sub	sp, #8
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fb fc77 	bl	800b886 <USBH_LL_PortDisabled>
}
 800ff98:	bf00      	nop
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ffae:	2b01      	cmp	r3, #1
 800ffb0:	d12a      	bne.n	8010008 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ffb2:	4a18      	ldr	r2, [pc, #96]	@ (8010014 <USBH_LL_Init+0x74>)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	4a15      	ldr	r2, [pc, #84]	@ (8010014 <USBH_LL_Init+0x74>)
 800ffbe:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ffc2:	4b14      	ldr	r3, [pc, #80]	@ (8010014 <USBH_LL_Init+0x74>)
 800ffc4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ffc8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ffca:	4b12      	ldr	r3, [pc, #72]	@ (8010014 <USBH_LL_Init+0x74>)
 800ffcc:	2208      	movs	r2, #8
 800ffce:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ffd0:	4b10      	ldr	r3, [pc, #64]	@ (8010014 <USBH_LL_Init+0x74>)
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ffd6:	4b0f      	ldr	r3, [pc, #60]	@ (8010014 <USBH_LL_Init+0x74>)
 800ffd8:	2200      	movs	r2, #0
 800ffda:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ffdc:	4b0d      	ldr	r3, [pc, #52]	@ (8010014 <USBH_LL_Init+0x74>)
 800ffde:	2202      	movs	r2, #2
 800ffe0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ffe2:	4b0c      	ldr	r3, [pc, #48]	@ (8010014 <USBH_LL_Init+0x74>)
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ffe8:	480a      	ldr	r0, [pc, #40]	@ (8010014 <USBH_LL_Init+0x74>)
 800ffea:	f7f3 f847 	bl	800307c <HAL_HCD_Init>
 800ffee:	4603      	mov	r3, r0
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d001      	beq.n	800fff8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800fff4:	f7f1 fbc6 	bl	8001784 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800fff8:	4806      	ldr	r0, [pc, #24]	@ (8010014 <USBH_LL_Init+0x74>)
 800fffa:	f7f3 fca7 	bl	800394c <HAL_HCD_GetCurrentFrame>
 800fffe:	4603      	mov	r3, r0
 8010000:	4619      	mov	r1, r3
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f7fb fbf8 	bl	800b7f8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010008:	2300      	movs	r3, #0
}
 801000a:	4618      	mov	r0, r3
 801000c:	3708      	adds	r7, #8
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop
 8010014:	20002174 	.word	0x20002174

08010018 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010020:	2300      	movs	r3, #0
 8010022:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010024:	2300      	movs	r3, #0
 8010026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801002e:	4618      	mov	r0, r3
 8010030:	f7f3 fc14 	bl	800385c <HAL_HCD_Start>
 8010034:	4603      	mov	r3, r0
 8010036:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010038:	7bfb      	ldrb	r3, [r7, #15]
 801003a:	4618      	mov	r0, r3
 801003c:	f000 f992 	bl	8010364 <USBH_Get_USB_Status>
 8010040:	4603      	mov	r3, r0
 8010042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010044:	7bbb      	ldrb	r3, [r7, #14]
}
 8010046:	4618      	mov	r0, r3
 8010048:	3710      	adds	r7, #16
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}

0801004e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801004e:	b580      	push	{r7, lr}
 8010050:	b084      	sub	sp, #16
 8010052:	af00      	add	r7, sp, #0
 8010054:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010056:	2300      	movs	r3, #0
 8010058:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801005a:	2300      	movs	r3, #0
 801005c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010064:	4618      	mov	r0, r3
 8010066:	f7f3 fc1c 	bl	80038a2 <HAL_HCD_Stop>
 801006a:	4603      	mov	r3, r0
 801006c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801006e:	7bfb      	ldrb	r3, [r7, #15]
 8010070:	4618      	mov	r0, r3
 8010072:	f000 f977 	bl	8010364 <USBH_Get_USB_Status>
 8010076:	4603      	mov	r3, r0
 8010078:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801007a:	7bbb      	ldrb	r3, [r7, #14]
}
 801007c:	4618      	mov	r0, r3
 801007e:	3710      	adds	r7, #16
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b084      	sub	sp, #16
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801008c:	2301      	movs	r3, #1
 801008e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010096:	4618      	mov	r0, r3
 8010098:	f7f3 fc66 	bl	8003968 <HAL_HCD_GetCurrentSpeed>
 801009c:	4603      	mov	r3, r0
 801009e:	2b02      	cmp	r3, #2
 80100a0:	d00c      	beq.n	80100bc <USBH_LL_GetSpeed+0x38>
 80100a2:	2b02      	cmp	r3, #2
 80100a4:	d80d      	bhi.n	80100c2 <USBH_LL_GetSpeed+0x3e>
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d002      	beq.n	80100b0 <USBH_LL_GetSpeed+0x2c>
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d003      	beq.n	80100b6 <USBH_LL_GetSpeed+0x32>
 80100ae:	e008      	b.n	80100c2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80100b0:	2300      	movs	r3, #0
 80100b2:	73fb      	strb	r3, [r7, #15]
    break;
 80100b4:	e008      	b.n	80100c8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80100b6:	2301      	movs	r3, #1
 80100b8:	73fb      	strb	r3, [r7, #15]
    break;
 80100ba:	e005      	b.n	80100c8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80100bc:	2302      	movs	r3, #2
 80100be:	73fb      	strb	r3, [r7, #15]
    break;
 80100c0:	e002      	b.n	80100c8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80100c2:	2301      	movs	r3, #1
 80100c4:	73fb      	strb	r3, [r7, #15]
    break;
 80100c6:	bf00      	nop
  }
  return  speed;
 80100c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3710      	adds	r7, #16
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80100d2:	b580      	push	{r7, lr}
 80100d4:	b084      	sub	sp, #16
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100da:	2300      	movs	r3, #0
 80100dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80100de:	2300      	movs	r3, #0
 80100e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7f3 fbf7 	bl	80038dc <HAL_HCD_ResetPort>
 80100ee:	4603      	mov	r3, r0
 80100f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80100f2:	7bfb      	ldrb	r3, [r7, #15]
 80100f4:	4618      	mov	r0, r3
 80100f6:	f000 f935 	bl	8010364 <USBH_Get_USB_Status>
 80100fa:	4603      	mov	r3, r0
 80100fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8010100:	4618      	mov	r0, r3
 8010102:	3710      	adds	r7, #16
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}

08010108 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	460b      	mov	r3, r1
 8010112:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801011a:	78fa      	ldrb	r2, [r7, #3]
 801011c:	4611      	mov	r1, r2
 801011e:	4618      	mov	r0, r3
 8010120:	f7f3 fbff 	bl	8003922 <HAL_HCD_HC_GetXferCount>
 8010124:	4603      	mov	r3, r0
}
 8010126:	4618      	mov	r0, r3
 8010128:	3708      	adds	r7, #8
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}

0801012e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801012e:	b590      	push	{r4, r7, lr}
 8010130:	b089      	sub	sp, #36	@ 0x24
 8010132:	af04      	add	r7, sp, #16
 8010134:	6078      	str	r0, [r7, #4]
 8010136:	4608      	mov	r0, r1
 8010138:	4611      	mov	r1, r2
 801013a:	461a      	mov	r2, r3
 801013c:	4603      	mov	r3, r0
 801013e:	70fb      	strb	r3, [r7, #3]
 8010140:	460b      	mov	r3, r1
 8010142:	70bb      	strb	r3, [r7, #2]
 8010144:	4613      	mov	r3, r2
 8010146:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010148:	2300      	movs	r3, #0
 801014a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801014c:	2300      	movs	r3, #0
 801014e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010156:	787c      	ldrb	r4, [r7, #1]
 8010158:	78ba      	ldrb	r2, [r7, #2]
 801015a:	78f9      	ldrb	r1, [r7, #3]
 801015c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801015e:	9302      	str	r3, [sp, #8]
 8010160:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010164:	9301      	str	r3, [sp, #4]
 8010166:	f897 3020 	ldrb.w	r3, [r7, #32]
 801016a:	9300      	str	r3, [sp, #0]
 801016c:	4623      	mov	r3, r4
 801016e:	f7f2 ffec 	bl	800314a <HAL_HCD_HC_Init>
 8010172:	4603      	mov	r3, r0
 8010174:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010176:	7bfb      	ldrb	r3, [r7, #15]
 8010178:	4618      	mov	r0, r3
 801017a:	f000 f8f3 	bl	8010364 <USBH_Get_USB_Status>
 801017e:	4603      	mov	r3, r0
 8010180:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010182:	7bbb      	ldrb	r3, [r7, #14]
}
 8010184:	4618      	mov	r0, r3
 8010186:	3714      	adds	r7, #20
 8010188:	46bd      	mov	sp, r7
 801018a:	bd90      	pop	{r4, r7, pc}

0801018c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b084      	sub	sp, #16
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	460b      	mov	r3, r1
 8010196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010198:	2300      	movs	r3, #0
 801019a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801019c:	2300      	movs	r3, #0
 801019e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80101a6:	78fa      	ldrb	r2, [r7, #3]
 80101a8:	4611      	mov	r1, r2
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7f3 f885 	bl	80032ba <HAL_HCD_HC_Halt>
 80101b0:	4603      	mov	r3, r0
 80101b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80101b4:	7bfb      	ldrb	r3, [r7, #15]
 80101b6:	4618      	mov	r0, r3
 80101b8:	f000 f8d4 	bl	8010364 <USBH_Get_USB_Status>
 80101bc:	4603      	mov	r3, r0
 80101be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3710      	adds	r7, #16
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}

080101ca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80101ca:	b590      	push	{r4, r7, lr}
 80101cc:	b089      	sub	sp, #36	@ 0x24
 80101ce:	af04      	add	r7, sp, #16
 80101d0:	6078      	str	r0, [r7, #4]
 80101d2:	4608      	mov	r0, r1
 80101d4:	4611      	mov	r1, r2
 80101d6:	461a      	mov	r2, r3
 80101d8:	4603      	mov	r3, r0
 80101da:	70fb      	strb	r3, [r7, #3]
 80101dc:	460b      	mov	r3, r1
 80101de:	70bb      	strb	r3, [r7, #2]
 80101e0:	4613      	mov	r3, r2
 80101e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101e4:	2300      	movs	r3, #0
 80101e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80101e8:	2300      	movs	r3, #0
 80101ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80101f2:	787c      	ldrb	r4, [r7, #1]
 80101f4:	78ba      	ldrb	r2, [r7, #2]
 80101f6:	78f9      	ldrb	r1, [r7, #3]
 80101f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80101fc:	9303      	str	r3, [sp, #12]
 80101fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010200:	9302      	str	r3, [sp, #8]
 8010202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010204:	9301      	str	r3, [sp, #4]
 8010206:	f897 3020 	ldrb.w	r3, [r7, #32]
 801020a:	9300      	str	r3, [sp, #0]
 801020c:	4623      	mov	r3, r4
 801020e:	f7f3 f877 	bl	8003300 <HAL_HCD_HC_SubmitRequest>
 8010212:	4603      	mov	r3, r0
 8010214:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010216:	7bfb      	ldrb	r3, [r7, #15]
 8010218:	4618      	mov	r0, r3
 801021a:	f000 f8a3 	bl	8010364 <USBH_Get_USB_Status>
 801021e:	4603      	mov	r3, r0
 8010220:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010222:	7bbb      	ldrb	r3, [r7, #14]
}
 8010224:	4618      	mov	r0, r3
 8010226:	3714      	adds	r7, #20
 8010228:	46bd      	mov	sp, r7
 801022a:	bd90      	pop	{r4, r7, pc}

0801022c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b082      	sub	sp, #8
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	460b      	mov	r3, r1
 8010236:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801023e:	78fa      	ldrb	r2, [r7, #3]
 8010240:	4611      	mov	r1, r2
 8010242:	4618      	mov	r0, r3
 8010244:	f7f3 fb58 	bl	80038f8 <HAL_HCD_HC_GetURBState>
 8010248:	4603      	mov	r3, r0
}
 801024a:	4618      	mov	r0, r3
 801024c:	3708      	adds	r7, #8
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}

08010252 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010252:	b580      	push	{r7, lr}
 8010254:	b082      	sub	sp, #8
 8010256:	af00      	add	r7, sp, #0
 8010258:	6078      	str	r0, [r7, #4]
 801025a:	460b      	mov	r3, r1
 801025c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010264:	2b01      	cmp	r3, #1
 8010266:	d103      	bne.n	8010270 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010268:	78fb      	ldrb	r3, [r7, #3]
 801026a:	4618      	mov	r0, r3
 801026c:	f000 f8a6 	bl	80103bc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010270:	20c8      	movs	r0, #200	@ 0xc8
 8010272:	f7f1 fec5 	bl	8002000 <HAL_Delay>
  return USBH_OK;
 8010276:	2300      	movs	r3, #0
}
 8010278:	4618      	mov	r0, r3
 801027a:	3708      	adds	r7, #8
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}

08010280 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010280:	b480      	push	{r7}
 8010282:	b085      	sub	sp, #20
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	460b      	mov	r3, r1
 801028a:	70fb      	strb	r3, [r7, #3]
 801028c:	4613      	mov	r3, r2
 801028e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010296:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010298:	78fa      	ldrb	r2, [r7, #3]
 801029a:	68f9      	ldr	r1, [r7, #12]
 801029c:	4613      	mov	r3, r2
 801029e:	011b      	lsls	r3, r3, #4
 80102a0:	1a9b      	subs	r3, r3, r2
 80102a2:	009b      	lsls	r3, r3, #2
 80102a4:	440b      	add	r3, r1
 80102a6:	3317      	adds	r3, #23
 80102a8:	781b      	ldrb	r3, [r3, #0]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00a      	beq.n	80102c4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80102ae:	78fa      	ldrb	r2, [r7, #3]
 80102b0:	68f9      	ldr	r1, [r7, #12]
 80102b2:	4613      	mov	r3, r2
 80102b4:	011b      	lsls	r3, r3, #4
 80102b6:	1a9b      	subs	r3, r3, r2
 80102b8:	009b      	lsls	r3, r3, #2
 80102ba:	440b      	add	r3, r1
 80102bc:	333c      	adds	r3, #60	@ 0x3c
 80102be:	78ba      	ldrb	r2, [r7, #2]
 80102c0:	701a      	strb	r2, [r3, #0]
 80102c2:	e009      	b.n	80102d8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80102c4:	78fa      	ldrb	r2, [r7, #3]
 80102c6:	68f9      	ldr	r1, [r7, #12]
 80102c8:	4613      	mov	r3, r2
 80102ca:	011b      	lsls	r3, r3, #4
 80102cc:	1a9b      	subs	r3, r3, r2
 80102ce:	009b      	lsls	r3, r3, #2
 80102d0:	440b      	add	r3, r1
 80102d2:	333d      	adds	r3, #61	@ 0x3d
 80102d4:	78ba      	ldrb	r2, [r7, #2]
 80102d6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80102d8:	2300      	movs	r3, #0
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3714      	adds	r7, #20
 80102de:	46bd      	mov	sp, r7
 80102e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e4:	4770      	bx	lr

080102e6 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80102e6:	b480      	push	{r7}
 80102e8:	b085      	sub	sp, #20
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
 80102ee:	460b      	mov	r3, r1
 80102f0:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 80102f2:	2300      	movs	r3, #0
 80102f4:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80102fc:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 80102fe:	78fa      	ldrb	r2, [r7, #3]
 8010300:	68b9      	ldr	r1, [r7, #8]
 8010302:	4613      	mov	r3, r2
 8010304:	011b      	lsls	r3, r3, #4
 8010306:	1a9b      	subs	r3, r3, r2
 8010308:	009b      	lsls	r3, r3, #2
 801030a:	440b      	add	r3, r1
 801030c:	3317      	adds	r3, #23
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d00a      	beq.n	801032a <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8010314:	78fa      	ldrb	r2, [r7, #3]
 8010316:	68b9      	ldr	r1, [r7, #8]
 8010318:	4613      	mov	r3, r2
 801031a:	011b      	lsls	r3, r3, #4
 801031c:	1a9b      	subs	r3, r3, r2
 801031e:	009b      	lsls	r3, r3, #2
 8010320:	440b      	add	r3, r1
 8010322:	333c      	adds	r3, #60	@ 0x3c
 8010324:	781b      	ldrb	r3, [r3, #0]
 8010326:	73fb      	strb	r3, [r7, #15]
 8010328:	e009      	b.n	801033e <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 801032a:	78fa      	ldrb	r2, [r7, #3]
 801032c:	68b9      	ldr	r1, [r7, #8]
 801032e:	4613      	mov	r3, r2
 8010330:	011b      	lsls	r3, r3, #4
 8010332:	1a9b      	subs	r3, r3, r2
 8010334:	009b      	lsls	r3, r3, #2
 8010336:	440b      	add	r3, r1
 8010338:	333d      	adds	r3, #61	@ 0x3d
 801033a:	781b      	ldrb	r3, [r3, #0]
 801033c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 801033e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010340:	4618      	mov	r0, r3
 8010342:	3714      	adds	r7, #20
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr

0801034c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f7f1 fe53 	bl	8002000 <HAL_Delay>
}
 801035a:	bf00      	nop
 801035c:	3708      	adds	r7, #8
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
	...

08010364 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010364:	b480      	push	{r7}
 8010366:	b085      	sub	sp, #20
 8010368:	af00      	add	r7, sp, #0
 801036a:	4603      	mov	r3, r0
 801036c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801036e:	2300      	movs	r3, #0
 8010370:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010372:	79fb      	ldrb	r3, [r7, #7]
 8010374:	2b03      	cmp	r3, #3
 8010376:	d817      	bhi.n	80103a8 <USBH_Get_USB_Status+0x44>
 8010378:	a201      	add	r2, pc, #4	@ (adr r2, 8010380 <USBH_Get_USB_Status+0x1c>)
 801037a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801037e:	bf00      	nop
 8010380:	08010391 	.word	0x08010391
 8010384:	08010397 	.word	0x08010397
 8010388:	0801039d 	.word	0x0801039d
 801038c:	080103a3 	.word	0x080103a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010390:	2300      	movs	r3, #0
 8010392:	73fb      	strb	r3, [r7, #15]
    break;
 8010394:	e00b      	b.n	80103ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010396:	2302      	movs	r3, #2
 8010398:	73fb      	strb	r3, [r7, #15]
    break;
 801039a:	e008      	b.n	80103ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801039c:	2301      	movs	r3, #1
 801039e:	73fb      	strb	r3, [r7, #15]
    break;
 80103a0:	e005      	b.n	80103ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80103a2:	2302      	movs	r3, #2
 80103a4:	73fb      	strb	r3, [r7, #15]
    break;
 80103a6:	e002      	b.n	80103ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80103a8:	2302      	movs	r3, #2
 80103aa:	73fb      	strb	r3, [r7, #15]
    break;
 80103ac:	bf00      	nop
  }
  return usb_status;
 80103ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3714      	adds	r7, #20
 80103b4:	46bd      	mov	sp, r7
 80103b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ba:	4770      	bx	lr

080103bc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b084      	sub	sp, #16
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	4603      	mov	r3, r0
 80103c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80103c6:	79fb      	ldrb	r3, [r7, #7]
 80103c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80103ca:	79fb      	ldrb	r3, [r7, #7]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d102      	bne.n	80103d6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80103d0:	2300      	movs	r3, #0
 80103d2:	73fb      	strb	r3, [r7, #15]
 80103d4:	e001      	b.n	80103da <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80103d6:	2301      	movs	r3, #1
 80103d8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80103da:	7bfb      	ldrb	r3, [r7, #15]
 80103dc:	461a      	mov	r2, r3
 80103de:	2101      	movs	r1, #1
 80103e0:	4803      	ldr	r0, [pc, #12]	@ (80103f0 <MX_DriverVbusFS+0x34>)
 80103e2:	f7f2 fe19 	bl	8003018 <HAL_GPIO_WritePin>
}
 80103e6:	bf00      	nop
 80103e8:	3710      	adds	r7, #16
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	40020800 	.word	0x40020800

080103f4 <malloc>:
 80103f4:	4b02      	ldr	r3, [pc, #8]	@ (8010400 <malloc+0xc>)
 80103f6:	4601      	mov	r1, r0
 80103f8:	6818      	ldr	r0, [r3, #0]
 80103fa:	f000 b82d 	b.w	8010458 <_malloc_r>
 80103fe:	bf00      	nop
 8010400:	20000068 	.word	0x20000068

08010404 <free>:
 8010404:	4b02      	ldr	r3, [pc, #8]	@ (8010410 <free+0xc>)
 8010406:	4601      	mov	r1, r0
 8010408:	6818      	ldr	r0, [r3, #0]
 801040a:	f000 b92d 	b.w	8010668 <_free_r>
 801040e:	bf00      	nop
 8010410:	20000068 	.word	0x20000068

08010414 <sbrk_aligned>:
 8010414:	b570      	push	{r4, r5, r6, lr}
 8010416:	4e0f      	ldr	r6, [pc, #60]	@ (8010454 <sbrk_aligned+0x40>)
 8010418:	460c      	mov	r4, r1
 801041a:	6831      	ldr	r1, [r6, #0]
 801041c:	4605      	mov	r5, r0
 801041e:	b911      	cbnz	r1, 8010426 <sbrk_aligned+0x12>
 8010420:	f000 f8d8 	bl	80105d4 <_sbrk_r>
 8010424:	6030      	str	r0, [r6, #0]
 8010426:	4621      	mov	r1, r4
 8010428:	4628      	mov	r0, r5
 801042a:	f000 f8d3 	bl	80105d4 <_sbrk_r>
 801042e:	1c43      	adds	r3, r0, #1
 8010430:	d103      	bne.n	801043a <sbrk_aligned+0x26>
 8010432:	f04f 34ff 	mov.w	r4, #4294967295
 8010436:	4620      	mov	r0, r4
 8010438:	bd70      	pop	{r4, r5, r6, pc}
 801043a:	1cc4      	adds	r4, r0, #3
 801043c:	f024 0403 	bic.w	r4, r4, #3
 8010440:	42a0      	cmp	r0, r4
 8010442:	d0f8      	beq.n	8010436 <sbrk_aligned+0x22>
 8010444:	1a21      	subs	r1, r4, r0
 8010446:	4628      	mov	r0, r5
 8010448:	f000 f8c4 	bl	80105d4 <_sbrk_r>
 801044c:	3001      	adds	r0, #1
 801044e:	d1f2      	bne.n	8010436 <sbrk_aligned+0x22>
 8010450:	e7ef      	b.n	8010432 <sbrk_aligned+0x1e>
 8010452:	bf00      	nop
 8010454:	20002554 	.word	0x20002554

08010458 <_malloc_r>:
 8010458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801045c:	1ccd      	adds	r5, r1, #3
 801045e:	f025 0503 	bic.w	r5, r5, #3
 8010462:	3508      	adds	r5, #8
 8010464:	2d0c      	cmp	r5, #12
 8010466:	bf38      	it	cc
 8010468:	250c      	movcc	r5, #12
 801046a:	2d00      	cmp	r5, #0
 801046c:	4606      	mov	r6, r0
 801046e:	db01      	blt.n	8010474 <_malloc_r+0x1c>
 8010470:	42a9      	cmp	r1, r5
 8010472:	d904      	bls.n	801047e <_malloc_r+0x26>
 8010474:	230c      	movs	r3, #12
 8010476:	6033      	str	r3, [r6, #0]
 8010478:	2000      	movs	r0, #0
 801047a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801047e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010554 <_malloc_r+0xfc>
 8010482:	f000 f869 	bl	8010558 <__malloc_lock>
 8010486:	f8d8 3000 	ldr.w	r3, [r8]
 801048a:	461c      	mov	r4, r3
 801048c:	bb44      	cbnz	r4, 80104e0 <_malloc_r+0x88>
 801048e:	4629      	mov	r1, r5
 8010490:	4630      	mov	r0, r6
 8010492:	f7ff ffbf 	bl	8010414 <sbrk_aligned>
 8010496:	1c43      	adds	r3, r0, #1
 8010498:	4604      	mov	r4, r0
 801049a:	d158      	bne.n	801054e <_malloc_r+0xf6>
 801049c:	f8d8 4000 	ldr.w	r4, [r8]
 80104a0:	4627      	mov	r7, r4
 80104a2:	2f00      	cmp	r7, #0
 80104a4:	d143      	bne.n	801052e <_malloc_r+0xd6>
 80104a6:	2c00      	cmp	r4, #0
 80104a8:	d04b      	beq.n	8010542 <_malloc_r+0xea>
 80104aa:	6823      	ldr	r3, [r4, #0]
 80104ac:	4639      	mov	r1, r7
 80104ae:	4630      	mov	r0, r6
 80104b0:	eb04 0903 	add.w	r9, r4, r3
 80104b4:	f000 f88e 	bl	80105d4 <_sbrk_r>
 80104b8:	4581      	cmp	r9, r0
 80104ba:	d142      	bne.n	8010542 <_malloc_r+0xea>
 80104bc:	6821      	ldr	r1, [r4, #0]
 80104be:	1a6d      	subs	r5, r5, r1
 80104c0:	4629      	mov	r1, r5
 80104c2:	4630      	mov	r0, r6
 80104c4:	f7ff ffa6 	bl	8010414 <sbrk_aligned>
 80104c8:	3001      	adds	r0, #1
 80104ca:	d03a      	beq.n	8010542 <_malloc_r+0xea>
 80104cc:	6823      	ldr	r3, [r4, #0]
 80104ce:	442b      	add	r3, r5
 80104d0:	6023      	str	r3, [r4, #0]
 80104d2:	f8d8 3000 	ldr.w	r3, [r8]
 80104d6:	685a      	ldr	r2, [r3, #4]
 80104d8:	bb62      	cbnz	r2, 8010534 <_malloc_r+0xdc>
 80104da:	f8c8 7000 	str.w	r7, [r8]
 80104de:	e00f      	b.n	8010500 <_malloc_r+0xa8>
 80104e0:	6822      	ldr	r2, [r4, #0]
 80104e2:	1b52      	subs	r2, r2, r5
 80104e4:	d420      	bmi.n	8010528 <_malloc_r+0xd0>
 80104e6:	2a0b      	cmp	r2, #11
 80104e8:	d917      	bls.n	801051a <_malloc_r+0xc2>
 80104ea:	1961      	adds	r1, r4, r5
 80104ec:	42a3      	cmp	r3, r4
 80104ee:	6025      	str	r5, [r4, #0]
 80104f0:	bf18      	it	ne
 80104f2:	6059      	strne	r1, [r3, #4]
 80104f4:	6863      	ldr	r3, [r4, #4]
 80104f6:	bf08      	it	eq
 80104f8:	f8c8 1000 	streq.w	r1, [r8]
 80104fc:	5162      	str	r2, [r4, r5]
 80104fe:	604b      	str	r3, [r1, #4]
 8010500:	4630      	mov	r0, r6
 8010502:	f000 f82f 	bl	8010564 <__malloc_unlock>
 8010506:	f104 000b 	add.w	r0, r4, #11
 801050a:	1d23      	adds	r3, r4, #4
 801050c:	f020 0007 	bic.w	r0, r0, #7
 8010510:	1ac2      	subs	r2, r0, r3
 8010512:	bf1c      	itt	ne
 8010514:	1a1b      	subne	r3, r3, r0
 8010516:	50a3      	strne	r3, [r4, r2]
 8010518:	e7af      	b.n	801047a <_malloc_r+0x22>
 801051a:	6862      	ldr	r2, [r4, #4]
 801051c:	42a3      	cmp	r3, r4
 801051e:	bf0c      	ite	eq
 8010520:	f8c8 2000 	streq.w	r2, [r8]
 8010524:	605a      	strne	r2, [r3, #4]
 8010526:	e7eb      	b.n	8010500 <_malloc_r+0xa8>
 8010528:	4623      	mov	r3, r4
 801052a:	6864      	ldr	r4, [r4, #4]
 801052c:	e7ae      	b.n	801048c <_malloc_r+0x34>
 801052e:	463c      	mov	r4, r7
 8010530:	687f      	ldr	r7, [r7, #4]
 8010532:	e7b6      	b.n	80104a2 <_malloc_r+0x4a>
 8010534:	461a      	mov	r2, r3
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	42a3      	cmp	r3, r4
 801053a:	d1fb      	bne.n	8010534 <_malloc_r+0xdc>
 801053c:	2300      	movs	r3, #0
 801053e:	6053      	str	r3, [r2, #4]
 8010540:	e7de      	b.n	8010500 <_malloc_r+0xa8>
 8010542:	230c      	movs	r3, #12
 8010544:	6033      	str	r3, [r6, #0]
 8010546:	4630      	mov	r0, r6
 8010548:	f000 f80c 	bl	8010564 <__malloc_unlock>
 801054c:	e794      	b.n	8010478 <_malloc_r+0x20>
 801054e:	6005      	str	r5, [r0, #0]
 8010550:	e7d6      	b.n	8010500 <_malloc_r+0xa8>
 8010552:	bf00      	nop
 8010554:	20002558 	.word	0x20002558

08010558 <__malloc_lock>:
 8010558:	4801      	ldr	r0, [pc, #4]	@ (8010560 <__malloc_lock+0x8>)
 801055a:	f000 b875 	b.w	8010648 <__retarget_lock_acquire_recursive>
 801055e:	bf00      	nop
 8010560:	20002698 	.word	0x20002698

08010564 <__malloc_unlock>:
 8010564:	4801      	ldr	r0, [pc, #4]	@ (801056c <__malloc_unlock+0x8>)
 8010566:	f000 b870 	b.w	801064a <__retarget_lock_release_recursive>
 801056a:	bf00      	nop
 801056c:	20002698 	.word	0x20002698

08010570 <memset>:
 8010570:	4402      	add	r2, r0
 8010572:	4603      	mov	r3, r0
 8010574:	4293      	cmp	r3, r2
 8010576:	d100      	bne.n	801057a <memset+0xa>
 8010578:	4770      	bx	lr
 801057a:	f803 1b01 	strb.w	r1, [r3], #1
 801057e:	e7f9      	b.n	8010574 <memset+0x4>

08010580 <strncpy>:
 8010580:	b510      	push	{r4, lr}
 8010582:	3901      	subs	r1, #1
 8010584:	4603      	mov	r3, r0
 8010586:	b132      	cbz	r2, 8010596 <strncpy+0x16>
 8010588:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801058c:	f803 4b01 	strb.w	r4, [r3], #1
 8010590:	3a01      	subs	r2, #1
 8010592:	2c00      	cmp	r4, #0
 8010594:	d1f7      	bne.n	8010586 <strncpy+0x6>
 8010596:	441a      	add	r2, r3
 8010598:	2100      	movs	r1, #0
 801059a:	4293      	cmp	r3, r2
 801059c:	d100      	bne.n	80105a0 <strncpy+0x20>
 801059e:	bd10      	pop	{r4, pc}
 80105a0:	f803 1b01 	strb.w	r1, [r3], #1
 80105a4:	e7f9      	b.n	801059a <strncpy+0x1a>

080105a6 <strstr>:
 80105a6:	780a      	ldrb	r2, [r1, #0]
 80105a8:	b570      	push	{r4, r5, r6, lr}
 80105aa:	b96a      	cbnz	r2, 80105c8 <strstr+0x22>
 80105ac:	bd70      	pop	{r4, r5, r6, pc}
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d109      	bne.n	80105c6 <strstr+0x20>
 80105b2:	460c      	mov	r4, r1
 80105b4:	4605      	mov	r5, r0
 80105b6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d0f6      	beq.n	80105ac <strstr+0x6>
 80105be:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80105c2:	429e      	cmp	r6, r3
 80105c4:	d0f7      	beq.n	80105b6 <strstr+0x10>
 80105c6:	3001      	adds	r0, #1
 80105c8:	7803      	ldrb	r3, [r0, #0]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d1ef      	bne.n	80105ae <strstr+0x8>
 80105ce:	4618      	mov	r0, r3
 80105d0:	e7ec      	b.n	80105ac <strstr+0x6>
	...

080105d4 <_sbrk_r>:
 80105d4:	b538      	push	{r3, r4, r5, lr}
 80105d6:	4d06      	ldr	r5, [pc, #24]	@ (80105f0 <_sbrk_r+0x1c>)
 80105d8:	2300      	movs	r3, #0
 80105da:	4604      	mov	r4, r0
 80105dc:	4608      	mov	r0, r1
 80105de:	602b      	str	r3, [r5, #0]
 80105e0:	f7f1 fa70 	bl	8001ac4 <_sbrk>
 80105e4:	1c43      	adds	r3, r0, #1
 80105e6:	d102      	bne.n	80105ee <_sbrk_r+0x1a>
 80105e8:	682b      	ldr	r3, [r5, #0]
 80105ea:	b103      	cbz	r3, 80105ee <_sbrk_r+0x1a>
 80105ec:	6023      	str	r3, [r4, #0]
 80105ee:	bd38      	pop	{r3, r4, r5, pc}
 80105f0:	20002694 	.word	0x20002694

080105f4 <__errno>:
 80105f4:	4b01      	ldr	r3, [pc, #4]	@ (80105fc <__errno+0x8>)
 80105f6:	6818      	ldr	r0, [r3, #0]
 80105f8:	4770      	bx	lr
 80105fa:	bf00      	nop
 80105fc:	20000068 	.word	0x20000068

08010600 <__libc_init_array>:
 8010600:	b570      	push	{r4, r5, r6, lr}
 8010602:	4d0d      	ldr	r5, [pc, #52]	@ (8010638 <__libc_init_array+0x38>)
 8010604:	4c0d      	ldr	r4, [pc, #52]	@ (801063c <__libc_init_array+0x3c>)
 8010606:	1b64      	subs	r4, r4, r5
 8010608:	10a4      	asrs	r4, r4, #2
 801060a:	2600      	movs	r6, #0
 801060c:	42a6      	cmp	r6, r4
 801060e:	d109      	bne.n	8010624 <__libc_init_array+0x24>
 8010610:	4d0b      	ldr	r5, [pc, #44]	@ (8010640 <__libc_init_array+0x40>)
 8010612:	4c0c      	ldr	r4, [pc, #48]	@ (8010644 <__libc_init_array+0x44>)
 8010614:	f000 f872 	bl	80106fc <_init>
 8010618:	1b64      	subs	r4, r4, r5
 801061a:	10a4      	asrs	r4, r4, #2
 801061c:	2600      	movs	r6, #0
 801061e:	42a6      	cmp	r6, r4
 8010620:	d105      	bne.n	801062e <__libc_init_array+0x2e>
 8010622:	bd70      	pop	{r4, r5, r6, pc}
 8010624:	f855 3b04 	ldr.w	r3, [r5], #4
 8010628:	4798      	blx	r3
 801062a:	3601      	adds	r6, #1
 801062c:	e7ee      	b.n	801060c <__libc_init_array+0xc>
 801062e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010632:	4798      	blx	r3
 8010634:	3601      	adds	r6, #1
 8010636:	e7f2      	b.n	801061e <__libc_init_array+0x1e>
 8010638:	08010c44 	.word	0x08010c44
 801063c:	08010c44 	.word	0x08010c44
 8010640:	08010c44 	.word	0x08010c44
 8010644:	08010c48 	.word	0x08010c48

08010648 <__retarget_lock_acquire_recursive>:
 8010648:	4770      	bx	lr

0801064a <__retarget_lock_release_recursive>:
 801064a:	4770      	bx	lr

0801064c <memcpy>:
 801064c:	440a      	add	r2, r1
 801064e:	4291      	cmp	r1, r2
 8010650:	f100 33ff 	add.w	r3, r0, #4294967295
 8010654:	d100      	bne.n	8010658 <memcpy+0xc>
 8010656:	4770      	bx	lr
 8010658:	b510      	push	{r4, lr}
 801065a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801065e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010662:	4291      	cmp	r1, r2
 8010664:	d1f9      	bne.n	801065a <memcpy+0xe>
 8010666:	bd10      	pop	{r4, pc}

08010668 <_free_r>:
 8010668:	b538      	push	{r3, r4, r5, lr}
 801066a:	4605      	mov	r5, r0
 801066c:	2900      	cmp	r1, #0
 801066e:	d041      	beq.n	80106f4 <_free_r+0x8c>
 8010670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010674:	1f0c      	subs	r4, r1, #4
 8010676:	2b00      	cmp	r3, #0
 8010678:	bfb8      	it	lt
 801067a:	18e4      	addlt	r4, r4, r3
 801067c:	f7ff ff6c 	bl	8010558 <__malloc_lock>
 8010680:	4a1d      	ldr	r2, [pc, #116]	@ (80106f8 <_free_r+0x90>)
 8010682:	6813      	ldr	r3, [r2, #0]
 8010684:	b933      	cbnz	r3, 8010694 <_free_r+0x2c>
 8010686:	6063      	str	r3, [r4, #4]
 8010688:	6014      	str	r4, [r2, #0]
 801068a:	4628      	mov	r0, r5
 801068c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010690:	f7ff bf68 	b.w	8010564 <__malloc_unlock>
 8010694:	42a3      	cmp	r3, r4
 8010696:	d908      	bls.n	80106aa <_free_r+0x42>
 8010698:	6820      	ldr	r0, [r4, #0]
 801069a:	1821      	adds	r1, r4, r0
 801069c:	428b      	cmp	r3, r1
 801069e:	bf01      	itttt	eq
 80106a0:	6819      	ldreq	r1, [r3, #0]
 80106a2:	685b      	ldreq	r3, [r3, #4]
 80106a4:	1809      	addeq	r1, r1, r0
 80106a6:	6021      	streq	r1, [r4, #0]
 80106a8:	e7ed      	b.n	8010686 <_free_r+0x1e>
 80106aa:	461a      	mov	r2, r3
 80106ac:	685b      	ldr	r3, [r3, #4]
 80106ae:	b10b      	cbz	r3, 80106b4 <_free_r+0x4c>
 80106b0:	42a3      	cmp	r3, r4
 80106b2:	d9fa      	bls.n	80106aa <_free_r+0x42>
 80106b4:	6811      	ldr	r1, [r2, #0]
 80106b6:	1850      	adds	r0, r2, r1
 80106b8:	42a0      	cmp	r0, r4
 80106ba:	d10b      	bne.n	80106d4 <_free_r+0x6c>
 80106bc:	6820      	ldr	r0, [r4, #0]
 80106be:	4401      	add	r1, r0
 80106c0:	1850      	adds	r0, r2, r1
 80106c2:	4283      	cmp	r3, r0
 80106c4:	6011      	str	r1, [r2, #0]
 80106c6:	d1e0      	bne.n	801068a <_free_r+0x22>
 80106c8:	6818      	ldr	r0, [r3, #0]
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	6053      	str	r3, [r2, #4]
 80106ce:	4408      	add	r0, r1
 80106d0:	6010      	str	r0, [r2, #0]
 80106d2:	e7da      	b.n	801068a <_free_r+0x22>
 80106d4:	d902      	bls.n	80106dc <_free_r+0x74>
 80106d6:	230c      	movs	r3, #12
 80106d8:	602b      	str	r3, [r5, #0]
 80106da:	e7d6      	b.n	801068a <_free_r+0x22>
 80106dc:	6820      	ldr	r0, [r4, #0]
 80106de:	1821      	adds	r1, r4, r0
 80106e0:	428b      	cmp	r3, r1
 80106e2:	bf04      	itt	eq
 80106e4:	6819      	ldreq	r1, [r3, #0]
 80106e6:	685b      	ldreq	r3, [r3, #4]
 80106e8:	6063      	str	r3, [r4, #4]
 80106ea:	bf04      	itt	eq
 80106ec:	1809      	addeq	r1, r1, r0
 80106ee:	6021      	streq	r1, [r4, #0]
 80106f0:	6054      	str	r4, [r2, #4]
 80106f2:	e7ca      	b.n	801068a <_free_r+0x22>
 80106f4:	bd38      	pop	{r3, r4, r5, pc}
 80106f6:	bf00      	nop
 80106f8:	20002558 	.word	0x20002558

080106fc <_init>:
 80106fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106fe:	bf00      	nop
 8010700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010702:	bc08      	pop	{r3}
 8010704:	469e      	mov	lr, r3
 8010706:	4770      	bx	lr

08010708 <_fini>:
 8010708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801070a:	bf00      	nop
 801070c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801070e:	bc08      	pop	{r3}
 8010710:	469e      	mov	lr, r3
 8010712:	4770      	bx	lr
